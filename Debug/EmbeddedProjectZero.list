
EmbeddedProjectZero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08008230  08008230  00018230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e0  080085e0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e8  080085e8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080085f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200001f8  080087e8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  080087e8  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019669  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033e1  00000000  00000000  00039891  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001830  00000000  00000000  0003cc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001688  00000000  00000000  0003e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b7d9  00000000  00000000  0003fb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012274  00000000  00000000  0006b309  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffc3d  00000000  00000000  0007d57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007458  00000000  00000000  0017d238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008218 	.word	0x08008218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08008218 	.word	0x08008218

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000efc:	f023 0306 	bic.w	r3, r3, #6
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	431a      	orrs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	60da      	str	r2, [r3, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60da      	str	r2, [r3, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <LL_RCC_LSE_Enable+0x20>)
 8000f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <LL_RCC_LSE_Enable+0x20>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f8a:	f023 0218 	bic.w	r2, r3, #24
 8000f8e:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <LL_RCC_LSE_IsReady+0x24>)
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d101      	bne.n	8000fbe <LL_RCC_LSE_IsReady+0x16>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_RCC_LSE_IsReady+0x18>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <LL_RCC_MSI_Enable+0x1c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <LL_RCC_MSI_Enable+0x1c>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LL_RCC_MSI_IsReady+0x20>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d101      	bne.n	8001004 <LL_RCC_MSI_IsReady+0x14>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <LL_RCC_MSI_IsReady+0x16>
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000

08001014 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <LL_RCC_MSI_SetRange+0x24>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001064:	4904      	ldr	r1, [pc, #16]	; (8001078 <LL_RCC_MSI_SetRange+0x24>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000

0800107c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	4904      	ldr	r1, [pc, #16]	; (80010a4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <LL_RCC_SetSysClkSource+0x24>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 0203 	bic.w	r2, r3, #3
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <LL_RCC_SetSysClkSource+0x24>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000

080010d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <LL_RCC_GetSysClkSource+0x18>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 030c 	and.w	r3, r3, #12
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_RCC_SetAHBPrescaler+0x24>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <LL_RCC_SetAHBPrescaler+0x24>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	608b      	str	r3, [r1, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <LL_RCC_SetAPB1Prescaler+0x24>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001124:	4904      	ldr	r1, [pc, #16]	; (8001138 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <LL_RCC_SetAPB2Prescaler+0x24>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000

08001164 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <LL_RCC_SetUSARTClockSource+0x30>)
 800116e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	0c1b      	lsrs	r3, r3, #16
 8001176:	43db      	mvns	r3, r3
 8001178:	401a      	ands	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4905      	ldr	r1, [pc, #20]	; (8001194 <LL_RCC_SetUSARTClockSource+0x30>)
 8001180:	4313      	orrs	r3, r2
 8001182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0e1a      	lsrs	r2, r3, #24
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <LL_RCC_SetI2CClockSource+0x4c>)
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2103      	movs	r1, #3
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	b2d9      	uxtb	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	431a      	orrs	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021088 	.word	0x40021088

080011e8 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <LL_RCC_SetUSBClockSource+0x28>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80011fa:	4905      	ldr	r1, [pc, #20]	; (8001210 <LL_RCC_SetUSBClockSource+0x28>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4313      	orrs	r3, r2
 8001200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000

08001214 <LL_RCC_SetDFSDMClockSource>:
  *         @arg @ref LL_RCC_DFSDM1_CLKSOURCE_PCLK2
  *         @arg @ref LL_RCC_DFSDM1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetDFSDMClockSource(uint32_t DFSDMxSource)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
#if defined(RCC_CCIPR2_DFSDM1SEL)
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_DFSDM1SEL, DFSDMxSource);
#else
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_DFSDM1SEL, DFSDMxSource);
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <LL_RCC_SetDFSDMClockSource+0x28>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001226:	4905      	ldr	r1, [pc, #20]	; (800123c <LL_RCC_SetDFSDMClockSource+0x28>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4313      	orrs	r3, r2
 800122c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* RCC_CCIPR2_DFSDM1SEL */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000

08001240 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <LL_RCC_PLL_Enable+0x1c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <LL_RCC_PLL_Enable+0x1c>)
 800124a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <LL_RCC_PLL_IsReady+0x24>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001270:	d101      	bne.n	8001276 <LL_RCC_PLL_IsReady+0x16>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_RCC_PLL_IsReady+0x18>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800129c:	4013      	ands	r3, r2
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	4311      	orrs	r1, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	0212      	lsls	r2, r2, #8
 80012a8:	4311      	orrs	r1, r2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	4904      	ldr	r1, [pc, #16]	; (80012c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	f9ff808c 	.word	0xf9ff808c

080012c8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80012d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <LL_RCC_PLLSAI1_Enable+0x1c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <LL_RCC_PLLSAI1_Enable+0x1c>)
 80012f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <LL_RCC_PLLSAI1_IsReady+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001318:	d101      	bne.n	800131e <LL_RCC_PLLSAI1_IsReady+0x16>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_RCC_PLLSAI1_IsReady+0x18>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <LL_RCC_PLLSAI1_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	430b      	orrs	r3, r1
 800134c:	490a      	ldr	r1, [pc, #40]	; (8001378 <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 800134e:	4313      	orrs	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800135a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	0211      	lsls	r1, r2, #8
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	4904      	ldr	r1, [pc, #16]	; (8001378 <LL_RCC_PLLSAI1_ConfigDomain_48M+0x48>)
 8001368:	4313      	orrs	r3, r2
 800136a:	610b      	str	r3, [r1, #16]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000

0800137c <LL_RCC_PLLSAI1_EnableDomain_48M>:
  * @brief  Enable PLLSAI1 output mapped on 48MHz domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <LL_RCC_PLLSAI1_EnableDomain_48M+0x1c>)
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <LL_RCC_PLLSAI1_EnableDomain_48M+0x1c>)
 8001386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800138a:	6113      	str	r3, [r2, #16]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000

080013cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4013      	ands	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000

080013fc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <LL_FLASH_SetLatency+0x24>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 0207 	bic.w	r2, r3, #7
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <LL_FLASH_SetLatency+0x24>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40022000 	.word	0x40022000

08001424 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <LL_FLASH_GetLatency+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <LL_GetUID_Word0+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	1fff7590 	.word	0x1fff7590

08001458 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <LL_GetUID_Word1+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	1fff7594 	.word	0x1fff7594

08001470 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <LL_GetUID_Word2+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	1fff7598 	.word	0x1fff7598

08001488 <LL_GetFlashSize>:
  * @note   This bitfield indicates the size of the device Flash memory expressed in
  *         Kbytes. As an example, 0x040 corresponds to 64 Kbytes.
  * @retval FLASH_SIZE[15:0]: Flash memory size
  */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <LL_GetFlashSize+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	1fff75e0 	.word	0x1fff75e0

080014a0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40007000 	.word	0x40007000

080014c8 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40007000 	.word	0x40007000

080014e8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 0210 	bic.w	r2, r3, #16
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f043 0208 	orr.w	r2, r3, #8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	405a      	eors	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f001 fa34 	bl	80029c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f816 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 fa38 	bl	80019d0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001560:	f000 f896 	bl	8001690 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001564:	f000 f8cc 	bl	8001700 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001568:	f000 f926 	bl	80017b8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800156c:	f000 f94a 	bl	8001804 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001570:	f000 f9a0 	bl	80018b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001574:	f000 f9ce 	bl	8001914 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001578:	f000 f9fc 	bl	8001974 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_TSENSOR_Init();
 800157c:	f001 f942 	bl	8002804 <BSP_TSENSOR_Init>
  while (1)
  {
	  printInformation();
 8001580:	f000 fbd6 	bl	8001d30 <printInformation>
 8001584:	e7fc      	b.n	8001580 <main+0x30>
	...

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff ff35 	bl	80013fc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8001592:	f7ff ff47 	bl	8001424 <LL_FLASH_GetLatency>
 8001596:	4603      	mov	r3, r0
 8001598:	2b04      	cmp	r3, #4
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 800159c:	f000 fcec 	bl	8001f78 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80015a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a4:	f7ff ff7c 	bl	80014a0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 80015a8:	f7ff fd12 	bl	8000fd0 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80015ac:	bf00      	nop
 80015ae:	f7ff fd1f 	bl	8000ff0 <LL_RCC_MSI_IsReady>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d1fa      	bne.n	80015ae <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_MSI_EnablePLLMode();
 80015b8:	f7ff fd2c 	bl	8001014 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_MSI_EnableRangeSelection();
 80015bc:	f7ff fd3a 	bl	8001034 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80015c0:	2060      	movs	r0, #96	; 0x60
 80015c2:	f7ff fd47 	bl	8001054 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fd58 	bl	800107c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 80015cc:	f7ff ff7c 	bl	80014c8 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fcd3 	bl	8000f7c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 80015d6:	f7ff fcbf 	bl	8000f58 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 80015da:	bf00      	nop
 80015dc:	f7ff fce4 	bl	8000fa8 <LL_RCC_LSE_IsReady>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d1fa      	bne.n	80015dc <SystemClock_Config+0x54>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80015e6:	2300      	movs	r3, #0
 80015e8:	2228      	movs	r2, #40	; 0x28
 80015ea:	2100      	movs	r1, #0
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff fe4b 	bl	8001288 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80015f2:	f7ff fe69 	bl	80012c8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80015f6:	f7ff fe23 	bl	8001240 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015fa:	bf00      	nop
 80015fc:	f7ff fe30 	bl	8001260 <LL_RCC_PLL_IsReady>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d1fa      	bne.n	80015fc <SystemClock_Config+0x74>
  {
    
  }
  LL_RCC_PLLSAI1_ConfigDomain_48M(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 24, LL_RCC_PLLSAI1Q_DIV_2);
 8001606:	2300      	movs	r3, #0
 8001608:	2218      	movs	r2, #24
 800160a:	2100      	movs	r1, #0
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fe8f 	bl	8001330 <LL_RCC_PLLSAI1_ConfigDomain_48M>
  LL_RCC_PLLSAI1_EnableDomain_48M();
 8001612:	f7ff feb3 	bl	800137c <LL_RCC_PLLSAI1_EnableDomain_48M>
  LL_RCC_PLLSAI1_Enable();
 8001616:	f7ff fe67 	bl	80012e8 <LL_RCC_PLLSAI1_Enable>

   /* Wait till PLLSAI1 is ready */
  while(LL_RCC_PLLSAI1_IsReady() != 1)
 800161a:	bf00      	nop
 800161c:	f7ff fe74 	bl	8001308 <LL_RCC_PLLSAI1_IsReady>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	d1fa      	bne.n	800161c <SystemClock_Config+0x94>
  {
    
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001626:	2003      	movs	r0, #3
 8001628:	f7ff fd3e 	bl	80010a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800162c:	bf00      	nop
 800162e:	f7ff fd4f 	bl	80010d0 <LL_RCC_GetSysClkSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d1fa      	bne.n	800162e <SystemClock_Config+0xa6>
  {
  
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fd57 	bl	80010ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fd68 	bl	8001114 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fd79 	bl	800113c <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <SystemClock_Config+0x104>)
 800164c:	f004 fa16 	bl	8005a7c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001650:	2000      	movs	r0, #0
 8001652:	f001 f9cd 	bl	80029f0 <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xd8>
  {
    Error_Handler();  
 800165c:	f000 fc8c 	bl	8001f78 <Error_Handler>
  };
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001660:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001664:	f7ff fd7e 	bl	8001164 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8001668:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800166c:	f7ff fd7a 	bl	8001164 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 8001670:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8001674:	f7ff fd90 	bl	8001198 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLLSAI1);
 8001678:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800167c:	f7ff fdb4 	bl	80011e8 <LL_RCC_SetUSBClockSource>
  LL_RCC_SetDFSDMClockSource(LL_RCC_DFSDM_CLKSOURCE_PCLK);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fdc7 	bl	8001214 <LL_RCC_SetDFSDMClockSource>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	04c4b400 	.word	0x04c4b400

08001690 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <MX_DFSDM1_Init+0x6c>)
 8001698:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 800169c:	2201      	movs	r2, #1
 800169e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016da:	2200      	movs	r2, #0
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_DFSDM1_Init+0x68>)
 80016e6:	f001 fb41 	bl	8002d6c <HAL_DFSDM_ChannelInit>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80016f0:	f000 fc42 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000024c 	.word	0x2000024c
 80016fc:	40016020 	.word	0x40016020

08001700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800172a:	2002      	movs	r0, #2
 800172c:	f7ff fe36 	bl	800139c <LL_AHB2_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001730:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001734:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001736:	2302      	movs	r3, #2
 8001738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800173e:	2301      	movs	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001746:	2304      	movs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <MX_I2C2_Init+0xb0>)
 8001750:	f003 fd27 	bl	80051a2 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001754:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001758:	f7ff fe38 	bl	80013cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <MX_I2C2_Init+0xb4>)
 800175e:	f7ff fbeb 	bl	8000f38 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C2);
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <MX_I2C2_Init+0xb4>)
 8001764:	f7ff fbd8 	bl	8000f18 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <MX_I2C2_Init+0xb4>)
 800176a:	f7ff fbad 	bl	8000ec8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 800176e:	4811      	ldr	r0, [pc, #68]	; (80017b4 <MX_I2C2_Init+0xb4>)
 8001770:	f7ff fb9a 	bl	8000ea8 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00000E14;
 8001778:	f640 6314 	movw	r3, #3604	; 0xe14
 800177c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_I2C2_Init+0xb4>)
 800179a:	f003 fe14 	bl	80053c6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_I2C2_Init+0xb4>)
 80017a4:	f7ff fba0 	bl	8000ee8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	3738      	adds	r7, #56	; 0x38
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	48000400 	.word	0x48000400
 80017b4:	40005800 	.word	0x40005800

080017b8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <MX_QUADSPI_Init+0x48>)
 80017c0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_QUADSPI_Init+0x44>)
 80017e8:	f002 fc96 	bl	8004118 <HAL_QSPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80017f2:	f000 fbc1 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000078c 	.word	0x2000078c
 8001800:	a0001000 	.word	0xa0001000

08001804 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b090      	sub	sp, #64	; 0x40
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	2228      	movs	r2, #40	; 0x28
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f004 f977 	bl	8005b06 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001828:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800182c:	f7ff fdce 	bl	80013cc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001830:	2004      	movs	r0, #4
 8001832:	f7ff fdb3 	bl	800139c <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001836:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800183a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800183c:	2302      	movs	r3, #2
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800184c:	2306      	movs	r3, #6
 800184e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <MX_SPI3_Init+0xa8>)
 8001856:	f003 fca4 	bl	80051a2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800185e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001862:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8001864:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001868:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001878:	2300      	movs	r3, #0
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001884:	2307      	movs	r3, #7
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4619      	mov	r1, r3
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <MX_SPI3_Init+0xac>)
 8001890:	f003 fdf8 	bl	8005484 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001894:	2100      	movs	r1, #0
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_SPI3_Init+0xac>)
 8001898:	f7ff fe26 	bl	80014e8 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_SPI3_Init+0xac>)
 800189e:	f7ff fe36 	bl	800150e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3740      	adds	r7, #64	; 0x40
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	48000800 	.word	0x48000800
 80018b0:	40003c00 	.word	0x40003c00

080018b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <MX_USART1_UART_Init+0x5c>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART1_UART_Init+0x58>)
 80018f8:	f002 fd98 	bl	800442c <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001902:	f000 fb39 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000070c 	.word	0x2000070c
 8001910:	40013800 	.word	0x40013800

08001914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_USART3_UART_Init+0x58>)
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <MX_USART3_UART_Init+0x5c>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_USART3_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_USART3_UART_Init+0x58>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_USART3_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_USART3_UART_Init+0x58>)
 8001958:	f002 fd68 	bl	800442c <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001962:	f000 fb09 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000284 	.word	0x20000284
 8001970:	40004800 	.word	0x40004800

08001974 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800197e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001982:	2206      	movs	r2, #6
 8001984:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001988:	2202      	movs	r2, #2
 800198a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198e:	2202      	movs	r2, #2
 8001990:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b8:	f002 fa55 	bl	8003e66 <HAL_PCD_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019c2:	f000 fad9 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000304 	.word	0x20000304

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4bba      	ldr	r3, [pc, #744]	; (8001cd0 <MX_GPIO_Init+0x300>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4ab9      	ldr	r2, [pc, #740]	; (8001cd0 <MX_GPIO_Init+0x300>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4bb7      	ldr	r3, [pc, #732]	; (8001cd0 <MX_GPIO_Init+0x300>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4bb4      	ldr	r3, [pc, #720]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	4ab3      	ldr	r2, [pc, #716]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4bb1      	ldr	r3, [pc, #708]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4bae      	ldr	r3, [pc, #696]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4aad      	ldr	r2, [pc, #692]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4bab      	ldr	r3, [pc, #684]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4ba8      	ldr	r3, [pc, #672]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4aa7      	ldr	r2, [pc, #668]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4ba5      	ldr	r3, [pc, #660]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a46:	4ba2      	ldr	r3, [pc, #648]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4aa1      	ldr	r2, [pc, #644]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b9f      	ldr	r3, [pc, #636]	; (8001cd0 <MX_GPIO_Init+0x300>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001a64:	489b      	ldr	r0, [pc, #620]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001a66:	f001 fc4d 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f001 fc46 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001a7e:	4896      	ldr	r0, [pc, #600]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001a80:	f001 fc40 	bl	8003304 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f241 0181 	movw	r1, #4225	; 0x1081
 8001a8a:	4894      	ldr	r0, [pc, #592]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001a8c:	f001 fc3a 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a96:	4891      	ldr	r0, [pc, #580]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001a98:	f001 fc34 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001aa2:	488f      	ldr	r0, [pc, #572]	; (8001ce0 <MX_GPIO_Init+0x310>)
 8001aa4:	f001 fc2e 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2120      	movs	r1, #32
 8001aac:	488a      	ldr	r0, [pc, #552]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001aae:	f001 fc29 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4887      	ldr	r0, [pc, #540]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001ab8:	f001 fc24 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001abc:	f240 1315 	movw	r3, #277	; 0x115
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	487f      	ldr	r0, [pc, #508]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001ad6:	f001 fa55 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001ada:	236a      	movs	r3, #106	; 0x6a
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ade:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <MX_GPIO_Init+0x314>)
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4879      	ldr	r0, [pc, #484]	; (8001cd4 <MX_GPIO_Init+0x304>)
 8001aee:	f001 fa49 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001af8:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <MX_GPIO_Init+0x318>)
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4876      	ldr	r0, [pc, #472]	; (8001ce0 <MX_GPIO_Init+0x310>)
 8001b08:	f001 fa3c 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8001b0c:	233f      	movs	r3, #63	; 0x3f
 8001b0e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b10:	230b      	movs	r3, #11
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4870      	ldr	r0, [pc, #448]	; (8001ce0 <MX_GPIO_Init+0x310>)
 8001b20:	f001 fa30 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001b24:	2303      	movs	r3, #3
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b34:	2308      	movs	r3, #8
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f001 fa1f 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001b46:	f248 1304 	movw	r3, #33028	; 0x8104
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b62:	f001 fa0f 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001b66:	2308      	movs	r3, #8
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b76:	2301      	movs	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f001 f9fe 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001b88:	2310      	movs	r3, #16
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b8c:	230b      	movs	r3, #11
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f001 f9f1 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001ba2:	23e0      	movs	r3, #224	; 0xe0
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f001 f9e0 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <MX_GPIO_Init+0x314>)
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4840      	ldr	r0, [pc, #256]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001bd8:	f001 f9d4 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001be0:	230b      	movs	r3, #11
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	483a      	ldr	r0, [pc, #232]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001bf0:	f001 f9c8 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001bf4:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001bf8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4832      	ldr	r0, [pc, #200]	; (8001cd8 <MX_GPIO_Init+0x308>)
 8001c0e:	f001 f9b9 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8001c12:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001c16:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <MX_GPIO_Init+0x314>)
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	482d      	ldr	r0, [pc, #180]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001c28:	f001 f9ac 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001c2c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4825      	ldr	r0, [pc, #148]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001c46:	f001 f99d 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001c4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <MX_GPIO_Init+0x310>)
 8001c64:	f001 f98e 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001c68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_GPIO_Init+0x314>)
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <MX_GPIO_Init+0x310>)
 8001c7e:	f001 f981 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001c82:	2302      	movs	r3, #2
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c92:	2305      	movs	r3, #5
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480f      	ldr	r0, [pc, #60]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001c9e:	f001 f971 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001ca2:	2378      	movs	r3, #120	; 0x78
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_GPIO_Init+0x30c>)
 8001cbe:	f001 f961 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc8:	2312      	movs	r3, #18
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00d      	b.n	8001cec <MX_GPIO_Init+0x31c>
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48001000 	.word	0x48001000
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	10110000 	.word	0x10110000
 8001ce8:	10210000 	.word	0x10210000
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <MX_GPIO_Init+0x35c>)
 8001cfe:	f001 f941 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2017      	movs	r0, #23
 8001d08:	f000 fff9 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d0c:	2017      	movs	r0, #23
 8001d0e:	f001 f812 	bl	8002d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2028      	movs	r0, #40	; 0x28
 8001d18:	f000 fff1 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1c:	2028      	movs	r0, #40	; 0x28
 8001d1e:	f001 f80a 	bl	8002d36 <HAL_NVIC_EnableIRQ>

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	48000400 	.word	0x48000400

08001d30 <printInformation>:

/* USER CODE BEGIN 4 */


int printInformation (void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af02      	add	r7, sp, #8
	switch(MODE){
 8001d36:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <printInformation+0x174>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	f200 80a2 	bhi.w	8001e86 <printInformation+0x156>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <printInformation+0x18>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001db1 	.word	0x08001db1
 8001d50:	08001e01 	.word	0x08001e01
 8001d54:	08001e59 	.word	0x08001e59
		   * but keep flashing the LED every 1 second until the Blue Button is pressed to
		   * advance to next demo.
		   *
		   * */
		  case 1:
			  if(SHOW_LABEL)
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <printInformation+0x178>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01d      	beq.n	8001d9c <printInformation+0x6c>
			  {
				  uint32_t flashSize= LL_GetFlashSize();
 8001d60:	f7ff fb92 	bl	8001488 <LL_GetFlashSize>
 8001d64:	61b8      	str	r0, [r7, #24]
				  uint32_t deviceIdentifier[3];
				  deviceIdentifier[0] = LL_GetUID_Word0();
 8001d66:	f7ff fb6b 	bl	8001440 <LL_GetUID_Word0>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	60fb      	str	r3, [r7, #12]
				  deviceIdentifier[1] = LL_GetUID_Word1();
 8001d6e:	f7ff fb73 	bl	8001458 <LL_GetUID_Word1>
 8001d72:	4603      	mov	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]
				  deviceIdentifier[2] = LL_GetUID_Word2();
 8001d76:	f7ff fb7b 	bl	8001470 <LL_GetUID_Word2>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	617b      	str	r3, [r7, #20]
				  printf("Demo 1: LL APIs - ");
 8001d7e:	484b      	ldr	r0, [pc, #300]	; (8001eac <printInformation+0x17c>)
 8001d80:	f004 fb26 	bl	80063d0 <iprintf>
				  printf("Flash size: %lx Device Identifier: %lx%lx%lx\n",
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	6939      	ldr	r1, [r7, #16]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	69b9      	ldr	r1, [r7, #24]
 8001d90:	4847      	ldr	r0, [pc, #284]	; (8001eb0 <printInformation+0x180>)
 8001d92:	f004 fb1d 	bl	80063d0 <iprintf>
					  flashSize, deviceIdentifier[0], deviceIdentifier[1], deviceIdentifier[2]);
				  SHOW_LABEL = 0;
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <printInformation+0x178>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
			  }
			  LL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da0:	4844      	ldr	r0, [pc, #272]	; (8001eb4 <printInformation+0x184>)
 8001da2:	f7ff fbc4 	bl	800152e <LL_GPIO_TogglePin>
			  LL_mDelay(1000);
 8001da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001daa:	f003 fe41 	bl	8005a30 <LL_mDelay>
		  break;
 8001dae:	e074      	b.n	8001e9a <printInformation+0x16a>
		   * a 2 second rate, using HAL_Delay() to sleep for the 2 seconds.
		   * Display the Dev ID info only when demo 2 begins, but keep flashing
		   * the LED every 2 second until the Blue Button is pressed to advance to next demo.
		   */
		  case 2:
			  if(SHOW_LABEL)
 8001db0:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <printInformation+0x178>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d019      	beq.n	8001dec <printInformation+0xbc>
			  {
				  HAL_GetDEVID();
 8001db8:	f000 fe94 	bl	8002ae4 <HAL_GetDEVID>
				  uint32_t deviceIdentifier[3];
				  deviceIdentifier[0] = HAL_GetUIDw0();
 8001dbc:	f000 fea0 	bl	8002b00 <HAL_GetUIDw0>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	603b      	str	r3, [r7, #0]
				  deviceIdentifier[1] = HAL_GetUIDw1();
 8001dc4:	f000 fea8 	bl	8002b18 <HAL_GetUIDw1>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	607b      	str	r3, [r7, #4]
				  deviceIdentifier[2] = HAL_GetUIDw2();
 8001dcc:	f000 feb0 	bl	8002b30 <HAL_GetUIDw2>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60bb      	str	r3, [r7, #8]
				  printf("Demo 2: HAL APIs - ");
 8001dd4:	4838      	ldr	r0, [pc, #224]	; (8001eb8 <printInformation+0x188>)
 8001dd6:	f004 fafb 	bl	80063d0 <iprintf>
				  printf("Device Identifier: %lx%lx%lx\n",
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4836      	ldr	r0, [pc, #216]	; (8001ebc <printInformation+0x18c>)
 8001de2:	f004 faf5 	bl	80063d0 <iprintf>
						  deviceIdentifier[0], deviceIdentifier[1], deviceIdentifier[2]);
				  SHOW_LABEL = 0;
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <printInformation+0x178>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
			  }
			  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df0:	4830      	ldr	r0, [pc, #192]	; (8001eb4 <printInformation+0x184>)
 8001df2:	f001 fa9f 	bl	8003334 <HAL_GPIO_TogglePin>
			  HAL_Delay(2000);
 8001df6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dfa:	f000 fe51 	bl	8002aa0 <HAL_Delay>

		  break;
 8001dfe:	e04c      	b.n	8001e9a <printInformation+0x16a>
		   *  seconds with BSP_LED_Off(). In other words the LED should blink
		   *  on/off at a 3-second rate (3 seconds on, 3 seconds off). Continue this
		   *  until the Blue Button pressed to advance to the next demo.
		   */
		  case 3:
			  if(SHOW_LABEL)
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <printInformation+0x178>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <printInformation+0x100>
			  {
				  float temp = BSP_TSENSOR_ReadTemp();
 8001e08:	f000 fd18 	bl	800283c <BSP_TSENSOR_ReadTemp>
 8001e0c:	ed87 0a07 	vstr	s0, [r7, #28]
				  printf("Demo 3: BSP APIs - ");
 8001e10:	482b      	ldr	r0, [pc, #172]	; (8001ec0 <printInformation+0x190>)
 8001e12:	f004 fadd 	bl	80063d0 <iprintf>
				  printf("Temperature: %.2f\n", temp);
 8001e16:	69f8      	ldr	r0, [r7, #28]
 8001e18:	f7fe fb96 	bl	8000548 <__aeabi_f2d>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	4827      	ldr	r0, [pc, #156]	; (8001ec4 <printInformation+0x194>)
 8001e26:	f004 fad3 	bl	80063d0 <iprintf>
				  SHOW_LABEL = 0;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <printInformation+0x178>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
			  }

			  if( HAL_GPIO_ReadPin(GPIOB, LED2_Pin) == GPIO_PIN_SET)
 8001e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e34:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <printInformation+0x184>)
 8001e36:	f001 fa4d 	bl	80032d4 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d103      	bne.n	8001e48 <printInformation+0x118>
			  {
				BSP_LED_Off(LED2);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 fb79 	bl	8002538 <BSP_LED_Off>
 8001e46:	e002      	b.n	8001e4e <printInformation+0x11e>
			  }
			  else
			  {
				  BSP_LED_On(LED2);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 fb5f 	bl	800250c <BSP_LED_On>
			  }
			  HAL_Delay(3000);
 8001e4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e52:	f000 fe25 	bl	8002aa0 <HAL_Delay>
		  break;
 8001e56:	e020      	b.n	8001e9a <printInformation+0x16a>
		  case 4:
			  if(SHOW_LABEL)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <printInformation+0x178>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <printInformation+0x142>
			  {
				  printf("Demo 4: BONUS - ");
 8001e60:	4819      	ldr	r0, [pc, #100]	; (8001ec8 <printInformation+0x198>)
 8001e62:	f004 fab5 	bl	80063d0 <iprintf>
				  printf("TBD\n");
 8001e66:	4819      	ldr	r0, [pc, #100]	; (8001ecc <printInformation+0x19c>)
 8001e68:	f004 fb26 	bl	80064b8 <puts>
				  SHOW_LABEL = 0;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <printInformation+0x178>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
			  }
			  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001e72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <printInformation+0x184>)
 8001e78:	f001 fa5c 	bl	8003334 <HAL_GPIO_TogglePin>
			  HAL_Delay(4000);
 8001e7c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001e80:	f000 fe0e 	bl	8002aa0 <HAL_Delay>
		  break;
 8001e84:	e009      	b.n	8001e9a <printInformation+0x16a>
		  default:
			  if(SHOW_LABEL)
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <printInformation+0x178>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <printInformation+0x16a>
			  {
				  SHOW_LABEL = 0;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <printInformation+0x178>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
				  printf("TBD\n");
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <printInformation+0x19c>)
 8001e96:	f004 fb0f 	bl	80064b8 <puts>
			  }

	  }
	return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	; 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	08008230 	.word	0x08008230
 8001eb0:	08008244 	.word	0x08008244
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	08008274 	.word	0x08008274
 8001ebc:	08008288 	.word	0x08008288
 8001ec0:	080082a8 	.word	0x080082a8
 8001ec4:	080082bc 	.word	0x080082bc
 8001ec8:	080082d0 	.word	0x080082d0
 8001ecc:	080082e4 	.word	0x080082e4

08001ed0 <__io_putchar>:


int __io_putchar (int ch)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8001ede:	f107 010c 	add.w	r1, r7, #12
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <__io_putchar+0x28>)
 8001ee8:	f002 faee 	bl	80044c8 <HAL_UART_Transmit>
	return ch;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000070c 	.word	0x2000070c

08001efc <_write>:

int _write (int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e009      	b.n	8001f22 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	60ba      	str	r2, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ffda 	bl	8001ed0 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dbf1      	blt.n	8001f0e <_write+0x12>
	}
	return len;
 8001f2a:	687b      	ldr	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
//	UNUSED(GPIO_Pin);

//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);

	SHOW_LABEL = 1;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
	MODE++;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f4c:	6013      	str	r3, [r2, #0]
	if(MODE > 4)
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	dd02      	ble.n	8001f5c <HAL_GPIO_EXTI_Callback+0x28>
		MODE = 1;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

	MODE = 3;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f5e:	2203      	movs	r2, #3
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000004 	.word	0x20000004
 8001f74:	20000000 	.word	0x20000000

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_MspInit+0x44>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6613      	str	r3, [r2, #96]	; 0x60
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_MspInit+0x44>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_MspInit+0x44>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_MspInit+0x44>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d128      	bne.n	8002042 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff4:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_DFSDM_ChannelMspInit+0x80>)
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_DFSDM_ChannelMspInit+0x80>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002020:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002032:	2306      	movs	r3, #6
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_DFSDM_ChannelMspInit+0x84>)
 800203e:	f000 ffa1 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000214 	.word	0x20000214
 8002050:	40021000 	.word	0x40021000
 8002054:	48001000 	.word	0x48001000

08002058 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_QSPI_MspInit+0x7c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d128      	bne.n	80020cc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_QSPI_MspInit+0x80>)
 800207c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_QSPI_MspInit+0x80>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6513      	str	r3, [r2, #80]	; 0x50
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_QSPI_MspInit+0x80>)
 8002088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_QSPI_MspInit+0x80>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_QSPI_MspInit+0x80>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_QSPI_MspInit+0x80>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 80020aa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80020ae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020bc:	230a      	movs	r3, #10
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_QSPI_MspInit+0x84>)
 80020c8:	f000 ff5c 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	a0001000 	.word	0xa0001000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48001000 	.word	0x48001000

080020e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <HAL_UART_MspInit+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d128      	bne.n	8002154 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	6613      	str	r3, [r2, #96]	; 0x60
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_UART_MspInit+0xdc>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002142:	2307      	movs	r3, #7
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	481c      	ldr	r0, [pc, #112]	; (80021c0 <HAL_UART_MspInit+0xe0>)
 800214e:	f000 ff19 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002152:	e02d      	b.n	80021b0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d128      	bne.n	80021b0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_MspInit+0xdc>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_UART_MspInit+0xdc>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_UART_MspInit+0xdc>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800218e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021a0:	2307      	movs	r3, #7
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <HAL_UART_MspInit+0xe8>)
 80021ac:	f000 feea 	bl	8002f84 <HAL_GPIO_Init>
}
 80021b0:	bf00      	nop
 80021b2:	3730      	adds	r7, #48	; 0x30
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	40004800 	.word	0x40004800
 80021c8:	48000c00 	.word	0x48000c00

080021cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ec:	d154      	bne.n	8002298 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f000 feb1 	bl	8002f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002222:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002234:	230a      	movs	r3, #10
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f000 fe9f 	bl	8002f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 800224c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d114      	bne.n	8002294 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002282:	f001 ff39 	bl	80040f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_PCD_MspInit+0xd4>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002292:	e001      	b.n	8002298 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002294:	f001 ff30 	bl	80040f8 <HAL_PWREx_EnableVddUSB>
}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f000 fbb4 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002304:	2020      	movs	r0, #32
 8002306:	f001 f82f 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800230a:	2040      	movs	r0, #64	; 0x40
 800230c:	f001 f82c 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002310:	2080      	movs	r0, #128	; 0x80
 8002312:	f001 f829 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002316:	f44f 7080 	mov.w	r0, #256	; 0x100
 800231a:	f001 f825 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}

08002322 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002326:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800232a:	f001 f81d 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800232e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002332:	f001 f819 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002336:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800233a:	f001 f815 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800233e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002342:	f001 f811 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002346:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800234a:	f001 f80d 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}

08002352 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e00a      	b.n	800237a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002364:	f3af 8000 	nop.w
 8002368:	4601      	mov	r1, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	60ba      	str	r2, [r7, #8]
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	dbf0      	blt.n	8002364 <_read+0x12>
	}

return len;
 8002382:	687b      	ldr	r3, [r7, #4]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_close>:
	}
	return len;
}

int _close(int file)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b4:	605a      	str	r2, [r3, #4]
	return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_isatty>:

int _isatty(int file)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	return 1;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	return 0;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x50>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x16>
		heap_end = &end;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <_sbrk+0x50>)
 8002406:	4a10      	ldr	r2, [pc, #64]	; (8002448 <_sbrk+0x54>)
 8002408:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <_sbrk+0x50>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <_sbrk+0x50>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	466a      	mov	r2, sp
 800241a:	4293      	cmp	r3, r2
 800241c:	d907      	bls.n	800242e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800241e:	f003 fb3d 	bl	8005a9c <__errno>
 8002422:	4602      	mov	r2, r0
 8002424:	230c      	movs	r3, #12
 8002426:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
 800242c:	e006      	b.n	800243c <_sbrk+0x48>
	}

	heap_end += incr;
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <_sbrk+0x50>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a03      	ldr	r2, [pc, #12]	; (8002444 <_sbrk+0x50>)
 8002438:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000218 	.word	0x20000218
 8002448:	200008a8 	.word	0x200008a8

0800244c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <SystemInit+0x64>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <SystemInit+0x64>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <SystemInit+0x68>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <SystemInit+0x68>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <SystemInit+0x68>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <SystemInit+0x68>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <SystemInit+0x68>)
 8002478:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800247c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002480:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <SystemInit+0x68>)
 8002484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002488:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <SystemInit+0x68>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <SystemInit+0x68>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <SystemInit+0x68>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SystemInit+0x64>)
 800249e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a2:	609a      	str	r2, [r3, #8]
#endif
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00
 80024b4:	40021000 	.word	0x40021000

080024b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024be:	e003      	b.n	80024c8 <LoopCopyDataInit>

080024c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024c6:	3104      	adds	r1, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024c8:	480b      	ldr	r0, [pc, #44]	; (80024f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80024cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024d0:	d3f6      	bcc.n	80024c0 <CopyDataInit>
	ldr	r2, =_sbss
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024d4:	e002      	b.n	80024dc <LoopFillZerobss>

080024d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024d8:	f842 3b04 	str.w	r3, [r2], #4

080024dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <LoopForever+0x16>)
	cmp	r2, r3
 80024de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024e0:	d3f9      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e2:	f7ff ffb3 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f003 fadf 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ea:	f7ff f831 	bl	8001550 <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024f4:	080085f0 	.word	0x080085f0
	ldr	r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024fc:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8002500:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002504:	200008a4 	.word	0x200008a4

08002508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_2_IRQHandler>
	...

0800250c <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <BSP_LED_On+0x28>)
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002522:	b291      	uxth	r1, r2
 8002524:	2201      	movs	r2, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 feec 	bl	8003304 <HAL_GPIO_WritePin>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2000000c 	.word	0x2000000c

08002538 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <BSP_LED_Off+0x28>)
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800254e:	b291      	uxth	r1, r2
 8002550:	2200      	movs	r2, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fed6 	bl	8003304 <HAL_GPIO_WritePin>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000000c 	.word	0x2000000c

08002564 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <I2Cx_MspInit+0xa8>)
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <I2Cx_MspInit+0xa8>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <I2Cx_MspInit+0xa8>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002584:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002588:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800258a:	2312      	movs	r3, #18
 800258c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002596:	2304      	movs	r3, #4
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	481b      	ldr	r0, [pc, #108]	; (8002610 <I2Cx_MspInit+0xac>)
 80025a2:	f000 fcef 	bl	8002f84 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4818      	ldr	r0, [pc, #96]	; (8002610 <I2Cx_MspInit+0xac>)
 80025ae:	f000 fce9 	bl	8002f84 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <I2Cx_MspInit+0xa8>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <I2Cx_MspInit+0xa8>)
 80025b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <I2Cx_MspInit+0xa8>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <I2Cx_MspInit+0xa8>)
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <I2Cx_MspInit+0xa8>)
 80025d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <I2Cx_MspInit+0xa8>)
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <I2Cx_MspInit+0xa8>)
 80025dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	210f      	movs	r1, #15
 80025e6:	2021      	movs	r0, #33	; 0x21
 80025e8:	f000 fb89 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80025ec:	2021      	movs	r0, #33	; 0x21
 80025ee:	f000 fba2 	bl	8002d36 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	210f      	movs	r1, #15
 80025f6:	2022      	movs	r0, #34	; 0x22
 80025f8:	f000 fb81 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80025fc:	2022      	movs	r0, #34	; 0x22
 80025fe:	f000 fb9a 	bl	8002d36 <HAL_NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	48000400 	.word	0x48000400

08002614 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <I2Cx_Init+0x54>)
 8002620:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <I2Cx_Init+0x58>)
 8002626:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff89 	bl	8002564 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fea0 	bl	8003398 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002658:	2100      	movs	r1, #0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f001 fbb8 	bl	8003dd0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40005800 	.word	0x40005800
 800266c:	00702681 	.word	0x00702681

08002670 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	72fb      	strb	r3, [r7, #11]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	b299      	uxth	r1, r3
 8002692:	88f8      	ldrh	r0, [r7, #6]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4603      	mov	r3, r0
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f001 f85c 	bl	8003764 <HAL_I2C_Mem_Read>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	4619      	mov	r1, r3
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f832 	bl	8002724 <I2Cx_Error>
  }
  return status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b08a      	sub	sp, #40	; 0x28
 80026ce:	af04      	add	r7, sp, #16
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	4608      	mov	r0, r1
 80026d4:	4611      	mov	r1, r2
 80026d6:	461a      	mov	r2, r3
 80026d8:	4603      	mov	r3, r0
 80026da:	72fb      	strb	r3, [r7, #11]
 80026dc:	460b      	mov	r3, r1
 80026de:	813b      	strh	r3, [r7, #8]
 80026e0:	4613      	mov	r3, r2
 80026e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	b299      	uxth	r1, r3
 80026ec:	88f8      	ldrh	r0, [r7, #6]
 80026ee:	893a      	ldrh	r2, [r7, #8]
 80026f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4603      	mov	r3, r0
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 ff1b 	bl	800353c <HAL_I2C_Mem_Write>
 8002706:	4603      	mov	r3, r0
 8002708:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	4619      	mov	r1, r3
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f805 	bl	8002724 <I2Cx_Error>
  }
  return status;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fec0 	bl	80034b6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ff6c 	bl	8002614 <I2Cx_Init>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <SENSOR_IO_Init+0x10>)
 800274a:	f7ff ff63 	bl	8002614 <I2Cx_Init>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000850 	.word	0x20000850

08002758 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af02      	add	r7, sp, #8
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	460b      	mov	r3, r1
 8002764:	71bb      	strb	r3, [r7, #6]
 8002766:	4613      	mov	r3, r2
 8002768:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800276a:	79bb      	ldrb	r3, [r7, #6]
 800276c:	b29a      	uxth	r2, r3
 800276e:	79f9      	ldrb	r1, [r7, #7]
 8002770:	2301      	movs	r3, #1
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	1d7b      	adds	r3, r7, #5
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	4803      	ldr	r0, [pc, #12]	; (8002788 <SENSOR_IO_Write+0x30>)
 800277c:	f7ff ffa5 	bl	80026ca <I2Cx_WriteMultiple>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000850 	.word	0x20000850

0800278c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af02      	add	r7, sp, #8
 8002792:	4603      	mov	r3, r0
 8002794:	460a      	mov	r2, r1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4613      	mov	r3, r2
 800279a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	79f9      	ldrb	r1, [r7, #7]
 80027a6:	2301      	movs	r3, #1
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	f107 030f 	add.w	r3, r7, #15
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	4804      	ldr	r0, [pc, #16]	; (80027c4 <SENSOR_IO_Read+0x38>)
 80027b4:	f7ff ff5c 	bl	8002670 <I2Cx_ReadMultiple>

  return read_value;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000850 	.word	0x20000850

080027c8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	603a      	str	r2, [r7, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	79f9      	ldrb	r1, [r7, #7]
 80027e4:	88bb      	ldrh	r3, [r7, #4]
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	4804      	ldr	r0, [pc, #16]	; (8002800 <SENSOR_IO_ReadMultiple+0x38>)
 80027f0:	f7ff ff3e 	bl	8002670 <I2Cx_ReadMultiple>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b29b      	uxth	r3, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000850 	.word	0x20000850

08002804 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <BSP_TSENSOR_Init+0x30>)
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <BSP_TSENSOR_Init+0x34>)
 8002812:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002814:	f7ff ff96 	bl	8002744 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <BSP_TSENSOR_Init+0x30>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2100      	movs	r1, #0
 8002820:	20be      	movs	r0, #190	; 0xbe
 8002822:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002828:	79fb      	ldrb	r3, [r7, #7]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000021c 	.word	0x2000021c
 8002838:	20000010 	.word	0x20000010

0800283c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <BSP_TSENSOR_ReadTemp+0x18>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	20be      	movs	r0, #190	; 0xbe
 8002848:	4798      	blx	r3
 800284a:	eef0 7a40 	vmov.f32	s15, s0
}
 800284e:	eeb0 0a67 	vmov.f32	s0, s15
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000021c 	.word	0x2000021c

08002858 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2120      	movs	r1, #32
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff8e 	bl	800278c <SENSOR_IO_Read>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800289a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	2120      	movs	r1, #32
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff57 	bl	8002758 <SENSOR_IO_Write>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b088      	sub	sp, #32
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	b2d8      	uxtb	r0, r3
 80028c0:	f107 0208 	add.w	r2, r7, #8
 80028c4:	2302      	movs	r3, #2
 80028c6:	21b2      	movs	r1, #178	; 0xb2
 80028c8:	f7ff ff7e 	bl	80027c8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2135      	movs	r1, #53	; 0x35
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff5a 	bl	800278c <SENSOR_IO_Read>
 80028d8:	4603      	mov	r3, r0
 80028da:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7a3b      	ldrb	r3, [r7, #8]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
 80028f2:	019b      	lsls	r3, r3, #6
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	7a7b      	ldrb	r3, [r7, #9]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002904:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002908:	10db      	asrs	r3, r3, #3
 800290a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800290c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002910:	10db      	asrs	r3, r3, #3
 8002912:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	b2d8      	uxtb	r0, r3
 8002918:	f107 0208 	add.w	r2, r7, #8
 800291c:	2304      	movs	r3, #4
 800291e:	21bc      	movs	r1, #188	; 0xbc
 8002920:	f7ff ff52 	bl	80027c8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002924:	7a7b      	ldrb	r3, [r7, #9]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	b21a      	sxth	r2, r3
 800292a:	7a3b      	ldrb	r3, [r7, #8]
 800292c:	b21b      	sxth	r3, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b21a      	sxth	r2, r3
 8002938:	7abb      	ldrb	r3, [r7, #10]
 800293a:	b21b      	sxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	b2d8      	uxtb	r0, r3
 8002944:	f107 0208 	add.w	r2, r7, #8
 8002948:	2302      	movs	r3, #2
 800294a:	21aa      	movs	r1, #170	; 0xaa
 800294c:	f7ff ff3c 	bl	80027c8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002950:	7a7b      	ldrb	r3, [r7, #9]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	b21a      	sxth	r2, r3
 8002956:	7a3b      	ldrb	r3, [r7, #8]
 8002958:	b21b      	sxth	r3, r3
 800295a:	4313      	orrs	r3, r2
 800295c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800295e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002970:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002974:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002986:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800298a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800299c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	ee07 3a90 	vmov	s15, r3
}
 80029b6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ca:	2003      	movs	r0, #3
 80029cc:	f000 f98c 	bl	8002ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029d0:	2000      	movs	r0, #0
 80029d2:	f000 f80d 	bl	80029f0 <HAL_InitTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	e001      	b.n	80029e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029e2:	f7ff fad1 	bl	8001f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029e6:	79fb      	ldrb	r3, [r7, #7]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_InitTick+0x68>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d022      	beq.n	8002a4a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_InitTick+0x6c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_InitTick+0x68>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f99a 	bl	8002d52 <HAL_SYSTICK_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10f      	bne.n	8002a44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d809      	bhi.n	8002a3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a32:	f000 f964 	bl	8002cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_InitTick+0x70>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e007      	b.n	8002a4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e004      	b.n	8002a4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e001      	b.n	8002a4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000024 	.word	0x20000024
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000020 	.word	0x20000020

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_IncTick+0x1c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_IncTick+0x20>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <HAL_IncTick+0x1c>)
 8002a74:	6013      	str	r3, [r2, #0]
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	2000089c 	.word	0x2000089c
 8002a84:	20000024 	.word	0x20000024

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000089c 	.word	0x2000089c

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d004      	beq.n	8002ac4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_Delay+0x40>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ac4:	bf00      	nop
 8002ac6:	f7ff ffdf 	bl	8002a88 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d8f7      	bhi.n	8002ac6 <HAL_Delay+0x26>
  {
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000024 	.word	0x20000024

08002ae4 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_GetDEVID+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e0042000 	.word	0xe0042000

08002b00 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GetUIDw0+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	1fff7590 	.word	0x1fff7590

08002b18 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_GetUIDw1+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	1fff7594 	.word	0x1fff7594

08002b30 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetUIDw2+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	1fff7598 	.word	0x1fff7598

08002b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <__NVIC_SetPriorityGrouping+0x44>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b64:	4013      	ands	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <__NVIC_SetPriorityGrouping+0x44>)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	60d3      	str	r3, [r2, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	f003 0307 	and.w	r3, r3, #7
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	db0b      	blt.n	8002bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	4907      	ldr	r1, [pc, #28]	; (8002be4 <__NVIC_EnableIRQ+0x38>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2001      	movs	r0, #1
 8002bce:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100

08002be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0a      	blt.n	8002c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	490c      	ldr	r1, [pc, #48]	; (8002c34 <__NVIC_SetPriority+0x4c>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c10:	e00a      	b.n	8002c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4908      	ldr	r1, [pc, #32]	; (8002c38 <__NVIC_SetPriority+0x50>)
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	440b      	add	r3, r1
 8002c26:	761a      	strb	r2, [r3, #24]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e100 	.word	0xe000e100
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f1c3 0307 	rsb	r3, r3, #7
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	bf28      	it	cs
 8002c5a:	2304      	movcs	r3, #4
 8002c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d902      	bls.n	8002c6c <NVIC_EncodePriority+0x30>
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3b03      	subs	r3, #3
 8002c6a:	e000      	b.n	8002c6e <NVIC_EncodePriority+0x32>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	f04f 32ff 	mov.w	r2, #4294967295
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	401a      	ands	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43d9      	mvns	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	4313      	orrs	r3, r2
         );
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb4:	d301      	bcc.n	8002cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e00f      	b.n	8002cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <SysTick_Config+0x40>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	f7ff ff8e 	bl	8002be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <SysTick_Config+0x40>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <SysTick_Config+0x40>)
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	e000e010 	.word	0xe000e010

08002ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff29 	bl	8002b48 <__NVIC_SetPriorityGrouping>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d10:	f7ff ff3e 	bl	8002b90 <__NVIC_GetPriorityGrouping>
 8002d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	6978      	ldr	r0, [r7, #20]
 8002d1c:	f7ff ff8e 	bl	8002c3c <NVIC_EncodePriority>
 8002d20:	4602      	mov	r2, r0
 8002d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff5d 	bl	8002be8 <__NVIC_SetPriority>
}
 8002d2e:	bf00      	nop
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff31 	bl	8002bac <__NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ffa2 	bl	8002ca4 <SysTick_Config>
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0ac      	b.n	8002ed8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f8b2 	bl	8002eec <DFSDM_GetChannelFromInstance>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <HAL_DFSDM_ChannelInit+0x174>)
 8002d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e09f      	b.n	8002ed8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff f919 	bl	8001fd0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002d9e:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <HAL_DFSDM_ChannelInit+0x178>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a4f      	ldr	r2, [pc, #316]	; (8002ee4 <HAL_DFSDM_ChannelInit+0x178>)
 8002da6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002da8:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <HAL_DFSDM_ChannelInit+0x178>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d125      	bne.n	8002dfc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002db0:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002db6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002dbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4948      	ldr	r1, [pc, #288]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a46      	ldr	r2, [pc, #280]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dd0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002dd4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	791b      	ldrb	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d108      	bne.n	8002df0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	493f      	ldr	r1, [pc, #252]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e0a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e1a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e20:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 020f 	bic.w	r2, r2, #15
 8002e38:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002e60:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 0207 	and.w	r2, r2, #7
 8002e8c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f810 	bl	8002eec <DFSDM_GetChannelFromInstance>
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_DFSDM_ChannelInit+0x174>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000224 	.word	0x20000224
 8002ee4:	20000220 	.word	0x20000220
 8002ee8:	40016000 	.word	0x40016000

08002eec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <DFSDM_GetChannelFromInstance+0x7c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e02b      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <DFSDM_GetChannelFromInstance+0x80>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d102      	bne.n	8002f10 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e024      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <DFSDM_GetChannelFromInstance+0x84>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d102      	bne.n	8002f1e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e01d      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <DFSDM_GetChannelFromInstance+0x88>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d102      	bne.n	8002f2c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002f26:	2304      	movs	r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e016      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <DFSDM_GetChannelFromInstance+0x8c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002f34:	2305      	movs	r3, #5
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e00f      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <DFSDM_GetChannelFromInstance+0x90>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d102      	bne.n	8002f48 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002f42:	2306      	movs	r3, #6
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e008      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <DFSDM_GetChannelFromInstance+0x94>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002f50:	2307      	movs	r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e001      	b.n	8002f5a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002f56:	2303      	movs	r3, #3
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40016000 	.word	0x40016000
 8002f6c:	40016020 	.word	0x40016020
 8002f70:	40016040 	.word	0x40016040
 8002f74:	40016080 	.word	0x40016080
 8002f78:	400160a0 	.word	0x400160a0
 8002f7c:	400160c0 	.word	0x400160c0
 8002f80:	400160e0 	.word	0x400160e0

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e17f      	b.n	8003294 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8171 	beq.w	800328e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d00b      	beq.n	8002fcc <HAL_GPIO_Init+0x48>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d007      	beq.n	8002fcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fc0:	2b11      	cmp	r3, #17
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b12      	cmp	r3, #18
 8002fca:	d130      	bne.n	800302e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003002:	2201      	movs	r2, #1
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 0201 	and.w	r2, r3, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b03      	cmp	r3, #3
 8003038:	d118      	bne.n	800306c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x128>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b12      	cmp	r3, #18
 80030aa:	d123      	bne.n	80030f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80ac 	beq.w	800328e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_GPIO_Init+0x32c>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_GPIO_Init+0x32c>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6613      	str	r3, [r2, #96]	; 0x60
 8003142:	4b5b      	ldr	r3, [pc, #364]	; (80032b0 <HAL_GPIO_Init+0x32c>)
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800314e:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_GPIO_Init+0x330>)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	220f      	movs	r2, #15
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003178:	d025      	beq.n	80031c6 <HAL_GPIO_Init+0x242>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_GPIO_Init+0x334>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01f      	beq.n	80031c2 <HAL_GPIO_Init+0x23e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_GPIO_Init+0x338>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d019      	beq.n	80031be <HAL_GPIO_Init+0x23a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <HAL_GPIO_Init+0x33c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0x236>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <HAL_GPIO_Init+0x340>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00d      	beq.n	80031b6 <HAL_GPIO_Init+0x232>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4a      	ldr	r2, [pc, #296]	; (80032c8 <HAL_GPIO_Init+0x344>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a49      	ldr	r2, [pc, #292]	; (80032cc <HAL_GPIO_Init+0x348>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_GPIO_Init+0x22a>
 80031aa:	2306      	movs	r3, #6
 80031ac:	e00c      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00a      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031b2:	2305      	movs	r3, #5
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031c6:	2300      	movs	r3, #0
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031d8:	4936      	ldr	r1, [pc, #216]	; (80032b4 <HAL_GPIO_Init+0x330>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320a:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003210:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003288:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ae78 	bne.w	8002f94 <HAL_GPIO_Init+0x10>
  }
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40010000 	.word	0x40010000
 80032b8:	48000400 	.word	0x48000400
 80032bc:	48000800 	.word	0x48000800
 80032c0:	48000c00 	.word	0x48000c00
 80032c4:	48001000 	.word	0x48001000
 80032c8:	48001400 	.word	0x48001400
 80032cc:	48001800 	.word	0x48001800
 80032d0:	40010400 	.word	0x40010400

080032d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e001      	b.n	80032f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003320:	e002      	b.n	8003328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003352:	e002      	b.n	800335a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003354:	887a      	ldrh	r2, [r7, #2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	619a      	str	r2, [r3, #24]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fdd4 	bl	8001f34 <HAL_GPIO_EXTI_Callback>
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e081      	b.n	80034ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8a8 	bl	8003514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	e006      	b.n	8003420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800341e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d104      	bne.n	8003432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	ea42 0103 	orr.w	r1, r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	021a      	lsls	r2, r3, #8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e021      	b.n	800350c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f821 	bl	8003528 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	4608      	mov	r0, r1
 8003546:	4611      	mov	r1, r2
 8003548:	461a      	mov	r2, r3
 800354a:	4603      	mov	r3, r0
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	460b      	mov	r3, r1
 8003550:	813b      	strh	r3, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	f040 80f9 	bne.w	8003756 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_I2C_Mem_Write+0x34>
 800356a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0ed      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_I2C_Mem_Write+0x4e>
 8003586:	2302      	movs	r3, #2
 8003588:	e0e6      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003592:	f7ff fa79 	bl	8002a88 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fac3 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d1      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2221      	movs	r2, #33	; 0x21
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035dc:	88f8      	ldrh	r0, [r7, #6]
 80035de:	893a      	ldrh	r2, [r7, #8]
 80035e0:	8979      	ldrh	r1, [r7, #10]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4603      	mov	r3, r0
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9d3 	bl	8003998 <I2C_RequestMemoryWrite>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0a9      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2bff      	cmp	r3, #255	; 0xff
 800360c:	d90e      	bls.n	800362c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	22ff      	movs	r2, #255	; 0xff
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	b2da      	uxtb	r2, r3
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	2300      	movs	r3, #0
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fba5 	bl	8003d74 <I2C_TransferConfig>
 800362a:	e00f      	b.n	800364c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	b2da      	uxtb	r2, r3
 800363c:	8979      	ldrh	r1, [r7, #10]
 800363e:	2300      	movs	r3, #0
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fb94 	bl	8003d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 faad 	bl	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e07b      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d034      	beq.n	8003704 <HAL_I2C_Mem_Write+0x1c8>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d130      	bne.n	8003704 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fa3f 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e04d      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2bff      	cmp	r3, #255	; 0xff
 80036c4:	d90e      	bls.n	80036e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	8979      	ldrh	r1, [r7, #10]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fb49 	bl	8003d74 <I2C_TransferConfig>
 80036e2:	e00f      	b.n	8003704 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	8979      	ldrh	r1, [r7, #10]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb38 	bl	8003d74 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d19e      	bne.n	800364c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa8c 	bl	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e01a      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_I2C_Mem_Write+0x224>)
 8003736:	400b      	ands	r3, r1
 8003738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	fe00e800 	.word	0xfe00e800

08003764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4603      	mov	r3, r0
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	460b      	mov	r3, r1
 8003778:	813b      	strh	r3, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	f040 80fd 	bne.w	8003986 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_I2C_Mem_Read+0x34>
 8003792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0f1      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x4e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0ea      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ba:	f7ff f965 	bl	8002a88 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2319      	movs	r3, #25
 80037c6:	2201      	movs	r2, #1
 80037c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f9af 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0d5      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2222      	movs	r2, #34	; 0x22
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003804:	88f8      	ldrh	r0, [r7, #6]
 8003806:	893a      	ldrh	r2, [r7, #8]
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4603      	mov	r3, r0
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f913 	bl	8003a40 <I2C_RequestMemoryRead>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0ad      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	d90e      	bls.n	8003854 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	4b52      	ldr	r3, [pc, #328]	; (8003990 <HAL_I2C_Mem_Read+0x22c>)
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fa91 	bl	8003d74 <I2C_TransferConfig>
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_I2C_Mem_Read+0x22c>)
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa80 	bl	8003d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	2200      	movs	r2, #0
 800387c:	2104      	movs	r1, #4
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f956 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07c      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d034      	beq.n	8003934 <HAL_I2C_Mem_Read+0x1d0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d130      	bne.n	8003934 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f927 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e04d      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2bff      	cmp	r3, #255	; 0xff
 80038f4:	d90e      	bls.n	8003914 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	22ff      	movs	r2, #255	; 0xff
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	b2da      	uxtb	r2, r3
 8003902:	8979      	ldrh	r1, [r7, #10]
 8003904:	2300      	movs	r3, #0
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fa31 	bl	8003d74 <I2C_TransferConfig>
 8003912:	e00f      	b.n	8003934 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	b2da      	uxtb	r2, r3
 8003924:	8979      	ldrh	r1, [r7, #10]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fa20 	bl	8003d74 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d19a      	bne.n	8003874 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f974 	bl	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01a      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2220      	movs	r2, #32
 8003958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_I2C_Mem_Read+0x230>)
 8003966:	400b      	ands	r3, r1
 8003968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	80002400 	.word	0x80002400
 8003994:	fe00e800 	.word	0xfe00e800

08003998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	817b      	strh	r3, [r7, #10]
 80039aa:	460b      	mov	r3, r1
 80039ac:	813b      	strh	r3, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	8979      	ldrh	r1, [r7, #10]
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <I2C_RequestMemoryWrite+0xa4>)
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f9d7 	bl	8003d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f8f0 	bl	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e02c      	b.n	8003a34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
 80039ea:	e015      	b.n	8003a18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039ec:	893b      	ldrh	r3, [r7, #8]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f8d6 	bl	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e012      	b.n	8003a34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0e:	893b      	ldrh	r3, [r7, #8]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f884 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	80002000 	.word	0x80002000

08003a40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	817b      	strh	r3, [r7, #10]
 8003a52:	460b      	mov	r3, r1
 8003a54:	813b      	strh	r3, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	8979      	ldrh	r1, [r7, #10]
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <I2C_RequestMemoryRead+0xa4>)
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f984 	bl	8003d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	69b9      	ldr	r1, [r7, #24]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f89d 	bl	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e02c      	b.n	8003ada <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a86:	893b      	ldrh	r3, [r7, #8]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a90:	e015      	b.n	8003abe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a92:	893b      	ldrh	r3, [r7, #8]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	69b9      	ldr	r1, [r7, #24]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f883 	bl	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e012      	b.n	8003ada <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f831 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	80002000 	.word	0x80002000

08003ae8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d103      	bne.n	8003b06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d007      	beq.n	8003b24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	619a      	str	r2, [r3, #24]
  }
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b40:	e022      	b.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d01e      	beq.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fe ff9d 	bl	8002a88 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d113      	bne.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00f      	b.n	8003ba8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d0cd      	beq.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bbc:	e02c      	b.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f870 	bl	8003ca8 <I2C_IsAcknowledgeFailed>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02a      	b.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d01e      	beq.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe ff55 	bl	8002a88 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d113      	bne.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e007      	b.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d1cb      	bne.n	8003bbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3c:	e028      	b.n	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f830 	bl	8003ca8 <I2C_IsAcknowledgeFailed>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e026      	b.n	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fe ff19 	bl	8002a88 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d113      	bne.n	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e007      	b.n	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d1cf      	bne.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d151      	bne.n	8003d66 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc2:	e022      	b.n	8003d0a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d01e      	beq.n	8003d0a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ccc:	f7fe fedc 	bl	8002a88 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <I2C_IsAcknowledgeFailed+0x3a>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e02e      	b.n	8003d68 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d1d5      	bne.n	8003cc4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2220      	movs	r2, #32
 8003d26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff fedd 	bl	8003ae8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <I2C_IsAcknowledgeFailed+0xc8>)
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f043 0204 	orr.w	r2, r3, #4
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	fe00e800 	.word	0xfe00e800

08003d74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	817b      	strh	r3, [r7, #10]
 8003d82:	4613      	mov	r3, r2
 8003d84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	0d5b      	lsrs	r3, r3, #21
 8003d90:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <I2C_TransferConfig+0x58>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	ea02 0103 	and.w	r1, r2, r3
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003da4:	7a7b      	ldrb	r3, [r7, #9]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	03ff63ff 	.word	0x03ff63ff

08003dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d138      	bne.n	8003e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e032      	b.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e68:	b08f      	sub	sp, #60	; 0x3c
 8003e6a:	af0a      	add	r7, sp, #40	; 0x28
 8003e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e116      	b.n	80040a6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe f99a 	bl	80021cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fb84 	bl	80055c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	687e      	ldr	r6, [r7, #4]
 8003ec4:	466d      	mov	r5, sp
 8003ec6:	f106 0410 	add.w	r4, r6, #16
 8003eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ed6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eda:	1d33      	adds	r3, r6, #4
 8003edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f001 fb1e 	bl	8005520 <USB_CoreInit>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0d7      	b.n	80040a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fb72 	bl	80055e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e04a      	b.n	8003f9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	333d      	adds	r3, #61	; 0x3d
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	333c      	adds	r3, #60	; 0x3c
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	b298      	uxth	r0, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	3342      	adds	r3, #66	; 0x42
 8003f44:	4602      	mov	r2, r0
 8003f46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	333f      	adds	r3, #63	; 0x3f
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3344      	adds	r3, #68	; 0x44
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3348      	adds	r3, #72	; 0x48
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3350      	adds	r3, #80	; 0x50
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3af      	bcc.n	8003f08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e044      	b.n	8004038 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	3301      	adds	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	7bfa      	ldrb	r2, [r7, #15]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	d3b5      	bcc.n	8003fae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	687e      	ldr	r6, [r7, #4]
 800404a:	466d      	mov	r5, sp
 800404c:	f106 0410 	add.w	r4, r6, #16
 8004050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004060:	1d33      	adds	r3, r6, #4
 8004062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004064:	6838      	ldr	r0, [r7, #0]
 8004066:	f001 fae9 	bl	800563c <USB_DevInit>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e014      	b.n	80040a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f80a 	bl	80040ae <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 fc79 	bl	8005996 <USB_DevDisconnect>

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	f043 0303 	orr.w	r3, r3, #3
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_PWREx_EnableVddUSB+0x1c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004106:	6053      	str	r3, [r2, #4]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40007000 	.word	0x40007000

08004118 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004120:	f7fe fcb2 	bl	8002a88 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e06f      	b.n	8004210 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_QSPI_Init+0x28>
 800413c:	2302      	movs	r3, #2
 800413e:	e067      	b.n	8004210 <HAL_QSPI_Init+0xf8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7fd ff7b 	bl	8002058 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004162:	f241 3188 	movw	r1, #5000	; 0x1388
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f858 	bl	800421c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	3b01      	subs	r3, #1
 800417c:	021a      	lsls	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	2120      	movs	r1, #32
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f850 	bl	8004238 <QSPI_WaitFlagStateUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800419c:	7afb      	ldrb	r3, [r7, #11]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d131      	bne.n	8004206 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6852      	ldr	r2, [r2, #4]
 80041b4:	0611      	lsls	r1, r2, #24
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_QSPI_Init+0x100>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6912      	ldr	r2, [r2, #16]
 80041d2:	0411      	lsls	r1, r2, #16
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6952      	ldr	r2, [r2, #20]
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6992      	ldr	r2, [r2, #24]
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800420e:	7afb      	ldrb	r3, [r7, #11]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	ffe0f8fe 	.word	0xffe0f8fe

0800421c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004248:	e01a      	b.n	8004280 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d016      	beq.n	8004280 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fe fc19 	bl	8002a88 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2204      	movs	r2, #4
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e00e      	b.n	800429e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d1d6      	bne.n	800424a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c0:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x34>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d121      	bne.n	800431a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d11e      	bne.n	800431a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042dc:	4b33      	ldr	r3, [pc, #204]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e005      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042f8:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004304:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d102      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004320:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	e004      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d101      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800432c:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800432e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d133      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d002      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0xa4>
 8004346:	2b03      	cmp	r3, #3
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0xaa>
 800434a:	e005      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800434e:	617b      	str	r3, [r7, #20]
      break;
 8004350:	e005      	b.n	800435e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004352:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004354:	617b      	str	r3, [r7, #20]
      break;
 8004356:	e002      	b.n	800435e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	617b      	str	r3, [r7, #20]
      break;
 800435c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	3301      	adds	r3, #1
 800436a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	fb02 f203 	mul.w	r2, r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	0e5b      	lsrs	r3, r3, #25
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800439e:	69bb      	ldr	r3, [r7, #24]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3724      	adds	r7, #36	; 0x24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40021000 	.word	0x40021000
 80043b0:	080082f0 	.word	0x080082f0
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000008 	.word	0x20000008

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4601      	mov	r1, r0
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	080082e8 	.word	0x080082e8

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004404:	f7ff ffda 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004408:	4601      	mov	r1, r0
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	080082e8 	.word	0x080082e8

0800442c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e040      	b.n	80044c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fe46 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8c0 	bl	80045f0 <UART_SetConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e022      	b.n	80044c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fc26 	bl	8004cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fcad 	bl	8004e18 <UART_CheckIdleState>
 80044be:	4603      	mov	r3, r0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	2b20      	cmp	r3, #32
 80044de:	f040 8081 	bne.w	80045e4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_UART_Transmit+0x26>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e079      	b.n	80045e6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Transmit+0x38>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e072      	b.n	80045e6 <HAL_UART_Transmit+0x11e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004514:	f7fe fab8 	bl	8002a88 <HAL_GetTick>
 8004518:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d108      	bne.n	8004546 <HAL_UART_Transmit+0x7e>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e003      	b.n	800454e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004556:	e02d      	b.n	80045b4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2200      	movs	r2, #0
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fc9d 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e039      	b.n	80045e6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004584:	b292      	uxth	r2, r2
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	3302      	adds	r3, #2
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e008      	b.n	80045a2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b292      	uxth	r2, r2
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1cb      	bne.n	8004558 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2140      	movs	r1, #64	; 0x40
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fc69 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e005      	b.n	80045e6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80045f4:	b08a      	sub	sp, #40	; 0x28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4313      	orrs	r3, r2
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4bb8      	ldr	r3, [pc, #736]	; (8004908 <UART_SetConfig+0x318>)
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462e:	430b      	orrs	r3, r1
 8004630:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4aae      	ldr	r2, [pc, #696]	; (800490c <UART_SetConfig+0x31c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	4313      	orrs	r3, r2
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4aa5      	ldr	r2, [pc, #660]	; (8004910 <UART_SetConfig+0x320>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d126      	bne.n	80046ce <UART_SetConfig+0xde>
 8004680:	4ba4      	ldr	r3, [pc, #656]	; (8004914 <UART_SetConfig+0x324>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b03      	cmp	r3, #3
 800468c:	d81a      	bhi.n	80046c4 <UART_SetConfig+0xd4>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0xa4>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bd 	.word	0x080046bd
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e105      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e101      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e0fd      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e0f9      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	bf00      	nop
 80046cc:	e0f4      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a91      	ldr	r2, [pc, #580]	; (8004918 <UART_SetConfig+0x328>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d138      	bne.n	800474a <UART_SetConfig+0x15a>
 80046d8:	4b8e      	ldr	r3, [pc, #568]	; (8004914 <UART_SetConfig+0x324>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d82c      	bhi.n	8004740 <UART_SetConfig+0x150>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0xfc>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004741 	.word	0x08004741
 80046f4:	08004741 	.word	0x08004741
 80046f8:	08004741 	.word	0x08004741
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004741 	.word	0x08004741
 8004704:	08004741 	.word	0x08004741
 8004708:	08004741 	.word	0x08004741
 800470c:	08004729 	.word	0x08004729
 8004710:	08004741 	.word	0x08004741
 8004714:	08004741 	.word	0x08004741
 8004718:	08004741 	.word	0x08004741
 800471c:	08004739 	.word	0x08004739
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e0c7      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e0c3      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e0bf      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e0bb      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	bf00      	nop
 8004748:	e0b6      	b.n	80048b8 <UART_SetConfig+0x2c8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a73      	ldr	r2, [pc, #460]	; (800491c <UART_SetConfig+0x32c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d125      	bne.n	80047a0 <UART_SetConfig+0x1b0>
 8004754:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <UART_SetConfig+0x324>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800475e:	2b10      	cmp	r3, #16
 8004760:	d011      	beq.n	8004786 <UART_SetConfig+0x196>
 8004762:	2b10      	cmp	r3, #16
 8004764:	d802      	bhi.n	800476c <UART_SetConfig+0x17c>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <UART_SetConfig+0x186>
 800476a:	e014      	b.n	8004796 <UART_SetConfig+0x1a6>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d006      	beq.n	800477e <UART_SetConfig+0x18e>
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d00c      	beq.n	800478e <UART_SetConfig+0x19e>
 8004774:	e00f      	b.n	8004796 <UART_SetConfig+0x1a6>
 8004776:	2300      	movs	r3, #0
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477c:	e09c      	b.n	80048b8 <UART_SetConfig+0x2c8>
 800477e:	2302      	movs	r3, #2
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004784:	e098      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004786:	2304      	movs	r3, #4
 8004788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478c:	e094      	b.n	80048b8 <UART_SetConfig+0x2c8>
 800478e:	2308      	movs	r3, #8
 8004790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004794:	e090      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004796:	2310      	movs	r3, #16
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479c:	bf00      	nop
 800479e:	e08b      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5e      	ldr	r2, [pc, #376]	; (8004920 <UART_SetConfig+0x330>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d125      	bne.n	80047f6 <UART_SetConfig+0x206>
 80047aa:	4b5a      	ldr	r3, [pc, #360]	; (8004914 <UART_SetConfig+0x324>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d011      	beq.n	80047dc <UART_SetConfig+0x1ec>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d802      	bhi.n	80047c2 <UART_SetConfig+0x1d2>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <UART_SetConfig+0x1dc>
 80047c0:	e014      	b.n	80047ec <UART_SetConfig+0x1fc>
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d006      	beq.n	80047d4 <UART_SetConfig+0x1e4>
 80047c6:	2bc0      	cmp	r3, #192	; 0xc0
 80047c8:	d00c      	beq.n	80047e4 <UART_SetConfig+0x1f4>
 80047ca:	e00f      	b.n	80047ec <UART_SetConfig+0x1fc>
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e071      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e06d      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e069      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e065      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	bf00      	nop
 80047f4:	e060      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4a      	ldr	r2, [pc, #296]	; (8004924 <UART_SetConfig+0x334>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d129      	bne.n	8004854 <UART_SetConfig+0x264>
 8004800:	4b44      	ldr	r3, [pc, #272]	; (8004914 <UART_SetConfig+0x324>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480e:	d014      	beq.n	800483a <UART_SetConfig+0x24a>
 8004810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004814:	d802      	bhi.n	800481c <UART_SetConfig+0x22c>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <UART_SetConfig+0x23a>
 800481a:	e016      	b.n	800484a <UART_SetConfig+0x25a>
 800481c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004820:	d007      	beq.n	8004832 <UART_SetConfig+0x242>
 8004822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004826:	d00c      	beq.n	8004842 <UART_SetConfig+0x252>
 8004828:	e00f      	b.n	800484a <UART_SetConfig+0x25a>
 800482a:	2300      	movs	r3, #0
 800482c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004830:	e042      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004832:	2302      	movs	r3, #2
 8004834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004838:	e03e      	b.n	80048b8 <UART_SetConfig+0x2c8>
 800483a:	2304      	movs	r3, #4
 800483c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004840:	e03a      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004842:	2308      	movs	r3, #8
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004848:	e036      	b.n	80048b8 <UART_SetConfig+0x2c8>
 800484a:	2310      	movs	r3, #16
 800484c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004850:	bf00      	nop
 8004852:	e031      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2c      	ldr	r2, [pc, #176]	; (800490c <UART_SetConfig+0x31c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d129      	bne.n	80048b2 <UART_SetConfig+0x2c2>
 800485e:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <UART_SetConfig+0x324>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d014      	beq.n	8004898 <UART_SetConfig+0x2a8>
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004872:	d802      	bhi.n	800487a <UART_SetConfig+0x28a>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <UART_SetConfig+0x298>
 8004878:	e016      	b.n	80048a8 <UART_SetConfig+0x2b8>
 800487a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487e:	d007      	beq.n	8004890 <UART_SetConfig+0x2a0>
 8004880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004884:	d00c      	beq.n	80048a0 <UART_SetConfig+0x2b0>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x2b8>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e013      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x2c8>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e007      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <UART_SetConfig+0x2c8>
 80048b2:	2310      	movs	r3, #16
 80048b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a13      	ldr	r2, [pc, #76]	; (800490c <UART_SetConfig+0x31c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	f040 80fe 	bne.w	8004ac0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d837      	bhi.n	800493c <UART_SetConfig+0x34c>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x2e4>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	0800493d 	.word	0x0800493d
 80048dc:	08004901 	.word	0x08004901
 80048e0:	0800493d 	.word	0x0800493d
 80048e4:	0800492d 	.word	0x0800492d
 80048e8:	0800493d 	.word	0x0800493d
 80048ec:	0800493d 	.word	0x0800493d
 80048f0:	0800493d 	.word	0x0800493d
 80048f4:	08004935 	.word	0x08004935
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7ff fd6c 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80048fc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048fe:	e020      	b.n	8004942 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <UART_SetConfig+0x338>)
 8004902:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004904:	e01d      	b.n	8004942 <UART_SetConfig+0x352>
 8004906:	bf00      	nop
 8004908:	efff69f3 	.word	0xefff69f3
 800490c:	40008000 	.word	0x40008000
 8004910:	40013800 	.word	0x40013800
 8004914:	40021000 	.word	0x40021000
 8004918:	40004400 	.word	0x40004400
 800491c:	40004800 	.word	0x40004800
 8004920:	40004c00 	.word	0x40004c00
 8004924:	40005000 	.word	0x40005000
 8004928:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800492c:	f7ff fcbc 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004930:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004932:	e006      	b.n	8004942 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004938:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800493a:	e002      	b.n	8004942 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	76fb      	strb	r3, [r7, #27]
        break;
 8004940:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 81b9 	beq.w	8004cbc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	429a      	cmp	r2, r3
 8004958:	d305      	bcc.n	8004966 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	429a      	cmp	r2, r3
 8004964:	d902      	bls.n	800496c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e1a7      	b.n	8004cbc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800496c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004970:	2b08      	cmp	r3, #8
 8004972:	f200 8092 	bhi.w	8004a9a <UART_SetConfig+0x4aa>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x38c>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049a1 	.word	0x080049a1
 8004980:	08004a9b 	.word	0x08004a9b
 8004984:	080049ef 	.word	0x080049ef
 8004988:	08004a9b 	.word	0x08004a9b
 800498c:	08004a23 	.word	0x08004a23
 8004990:	08004a9b 	.word	0x08004a9b
 8004994:	08004a9b 	.word	0x08004a9b
 8004998:	08004a9b 	.word	0x08004a9b
 800499c:	08004a71 	.word	0x08004a71
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7ff fd18 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80049a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	f04f 0400 	mov.w	r4, #0
 80049b6:	0214      	lsls	r4, r2, #8
 80049b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80049bc:	020b      	lsls	r3, r1, #8
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6852      	ldr	r2, [r2, #4]
 80049c2:	0852      	lsrs	r2, r2, #1
 80049c4:	4611      	mov	r1, r2
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	eb13 0b01 	adds.w	fp, r3, r1
 80049ce:	eb44 0c02 	adc.w	ip, r4, r2
 80049d2:	4658      	mov	r0, fp
 80049d4:	4661      	mov	r1, ip
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f04f 0400 	mov.w	r4, #0
 80049de:	461a      	mov	r2, r3
 80049e0:	4623      	mov	r3, r4
 80049e2:	f7fc f8e1 	bl	8000ba8 <__aeabi_uldivmod>
 80049e6:	4603      	mov	r3, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049ec:	e058      	b.n	8004aa0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	f04f 0400 	mov.w	r4, #0
 80049f8:	49ae      	ldr	r1, [pc, #696]	; (8004cb4 <UART_SetConfig+0x6c4>)
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	eb13 0b01 	adds.w	fp, r3, r1
 8004a02:	eb44 0c02 	adc.w	ip, r4, r2
 8004a06:	4658      	mov	r0, fp
 8004a08:	4661      	mov	r1, ip
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f04f 0400 	mov.w	r4, #0
 8004a12:	461a      	mov	r2, r3
 8004a14:	4623      	mov	r3, r4
 8004a16:	f7fc f8c7 	bl	8000ba8 <__aeabi_uldivmod>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a20:	e03e      	b.n	8004aa0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004a22:	f7ff fc41 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004a26:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	f04f 0400 	mov.w	r4, #0
 8004a38:	0214      	lsls	r4, r2, #8
 8004a3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a3e:	020b      	lsls	r3, r1, #8
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6852      	ldr	r2, [r2, #4]
 8004a44:	0852      	lsrs	r2, r2, #1
 8004a46:	4611      	mov	r1, r2
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	eb13 0b01 	adds.w	fp, r3, r1
 8004a50:	eb44 0c02 	adc.w	ip, r4, r2
 8004a54:	4658      	mov	r0, fp
 8004a56:	4661      	mov	r1, ip
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f04f 0400 	mov.w	r4, #0
 8004a60:	461a      	mov	r2, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	f7fc f8a0 	bl	8000ba8 <__aeabi_uldivmod>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a6e:	e017      	b.n	8004aa0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004a7e:	f144 0100 	adc.w	r1, r4, #0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	f7fc f88b 	bl	8000ba8 <__aeabi_uldivmod>
 8004a92:	4603      	mov	r3, r0
 8004a94:	460c      	mov	r4, r1
 8004a96:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a98:	e002      	b.n	8004aa0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	76fb      	strb	r3, [r7, #27]
            break;
 8004a9e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa6:	d308      	bcc.n	8004aba <UART_SetConfig+0x4ca>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aae:	d204      	bcs.n	8004aba <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	60da      	str	r2, [r3, #12]
 8004ab8:	e100      	b.n	8004cbc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	76fb      	strb	r3, [r7, #27]
 8004abe:	e0fd      	b.n	8004cbc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	f040 8084 	bne.w	8004bd4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d85f      	bhi.n	8004b94 <UART_SetConfig+0x5a4>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x4ec>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b41 	.word	0x08004b41
 8004ae8:	08004b95 	.word	0x08004b95
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b95 	.word	0x08004b95
 8004af4:	08004b95 	.word	0x08004b95
 8004af8:	08004b95 	.word	0x08004b95
 8004afc:	08004b7d 	.word	0x08004b7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7ff fc68 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8004b04:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	005a      	lsls	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b1e:	e03c      	b.n	8004b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b20:	f7ff fc6e 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8004b24:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	005a      	lsls	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b3e:	e02c      	b.n	8004b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004b4a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6852      	ldr	r2, [r2, #4]
 8004b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b5a:	e01e      	b.n	8004b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5c:	f7ff fba4 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004b60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	005a      	lsls	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	441a      	add	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b7a:	e00e      	b.n	8004b9a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b92:	e002      	b.n	8004b9a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	76fb      	strb	r3, [r7, #27]
        break;
 8004b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2b0f      	cmp	r3, #15
 8004b9e:	d916      	bls.n	8004bce <UART_SetConfig+0x5de>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba6:	d212      	bcs.n	8004bce <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f023 030f 	bic.w	r3, r3, #15
 8004bb0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	89fa      	ldrh	r2, [r7, #14]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	e076      	b.n	8004cbc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	76fb      	strb	r3, [r7, #27]
 8004bd2:	e073      	b.n	8004cbc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d85c      	bhi.n	8004c96 <UART_SetConfig+0x6a6>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x5f4>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c27 	.word	0x08004c27
 8004bec:	08004c45 	.word	0x08004c45
 8004bf0:	08004c97 	.word	0x08004c97
 8004bf4:	08004c61 	.word	0x08004c61
 8004bf8:	08004c97 	.word	0x08004c97
 8004bfc:	08004c97 	.word	0x08004c97
 8004c00:	08004c97 	.word	0x08004c97
 8004c04:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7ff fbe4 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085a      	lsrs	r2, r3, #1
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c24:	e03a      	b.n	8004c9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c26:	f7ff fbeb 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8004c2a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	085a      	lsrs	r2, r3, #1
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	441a      	add	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c42:	e02b      	b.n	8004c9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004c4e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6852      	ldr	r2, [r2, #4]
 8004c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c5e:	e01d      	b.n	8004c9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c60:	f7ff fb22 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004c64:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085a      	lsrs	r2, r3, #1
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c7c:	e00e      	b.n	8004c9c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c94:	e002      	b.n	8004c9c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	76fb      	strb	r3, [r7, #27]
        break;
 8004c9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d90a      	bls.n	8004cb8 <UART_SetConfig+0x6c8>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d206      	bcs.n	8004cb8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	e003      	b.n	8004cbc <UART_SetConfig+0x6cc>
 8004cb4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004cc8:	7efb      	ldrb	r3, [r7, #27]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01a      	beq.n	8004dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd2:	d10a      	bne.n	8004dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e26:	f7fd fe2f 	bl	8002a88 <HAL_GetTick>
 8004e2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d10e      	bne.n	8004e58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f82a 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e020      	b.n	8004e9a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d10e      	bne.n	8004e84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f814 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e00a      	b.n	8004e9a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb2:	e05d      	b.n	8004f70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d059      	beq.n	8004f70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebc:	f7fd fde4 	bl	8002a88 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d302      	bcc.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d11b      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ee0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e042      	b.n	8004f90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02b      	beq.n	8004f70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d123      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f40:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e00f      	b.n	8004f90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d092      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <LL_GPIO_SetPinMode>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b089      	sub	sp, #36	; 0x24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2103      	movs	r1, #3
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	61bb      	str	r3, [r7, #24]
  return result;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	fab3 f383 	clz	r3, r3
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]
}
 8004fea:	bf00      	nop
 8004fec:	3724      	adds	r7, #36	; 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_GPIO_SetPinOutputType>:
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	43db      	mvns	r3, r3
 800500a:	401a      	ands	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_GPIO_SetPinSpeed>:
{
 8005026:	b480      	push	{r7}
 8005028:	b089      	sub	sp, #36	; 0x24
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	613b      	str	r3, [r7, #16]
  return result;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	2103      	movs	r1, #3
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	401a      	ands	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	fa93 f3a3 	rbit	r3, r3
 8005060:	61bb      	str	r3, [r7, #24]
  return result;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	fab3 f383 	clz	r3, r3
 8005068:	b2db      	uxtb	r3, r3
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	fa01 f303 	lsl.w	r3, r1, r3
 8005072:	431a      	orrs	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	3724      	adds	r7, #36	; 0x24
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_GPIO_SetPinPull>:
{
 8005084:	b480      	push	{r7}
 8005086:	b089      	sub	sp, #36	; 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	613b      	str	r3, [r7, #16]
  return result;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	2103      	movs	r1, #3
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	61bb      	str	r3, [r7, #24]
  return result;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	fa01 f303 	lsl.w	r3, r1, r3
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	60da      	str	r2, [r3, #12]
}
 80050d6:	bf00      	nop
 80050d8:	3724      	adds	r7, #36	; 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <LL_GPIO_SetAFPin_0_7>:
{
 80050e2:	b480      	push	{r7}
 80050e4:	b089      	sub	sp, #36	; 0x24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1a      	ldr	r2, [r3, #32]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	fa93 f3a3 	rbit	r3, r3
 80050fc:	613b      	str	r3, [r7, #16]
  return result;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	fab3 f383 	clz	r3, r3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	210f      	movs	r1, #15
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	401a      	ands	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	61bb      	str	r3, [r7, #24]
  return result;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	fab3 f383 	clz	r3, r3
 8005124:	b2db      	uxtb	r3, r3
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	431a      	orrs	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	3724      	adds	r7, #36	; 0x24
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <LL_GPIO_SetAFPin_8_15>:
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	fa93 f3a3 	rbit	r3, r3
 800515c:	613b      	str	r3, [r7, #16]
  return result;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	fab3 f383 	clz	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	210f      	movs	r1, #15
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	401a      	ands	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	61bb      	str	r3, [r7, #24]
  return result;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005196:	bf00      	nop
 8005198:	3724      	adds	r7, #36	; 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	60bb      	str	r3, [r7, #8]
  return result;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	fab3 f383 	clz	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80051c4:	e040      	b.n	8005248 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	2101      	movs	r1, #1
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	4013      	ands	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d032      	beq.n	8005242 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6939      	ldr	r1, [r7, #16]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fed7 	bl	8004f98 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d003      	beq.n	80051fa <LL_GPIO_Init+0x58>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d106      	bne.n	8005208 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	461a      	mov	r2, r3
 8005200:	6939      	ldr	r1, [r7, #16]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ff0f 	bl	8005026 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	461a      	mov	r2, r3
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff37 	bl	8005084 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d111      	bne.n	8005242 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2bff      	cmp	r3, #255	; 0xff
 8005222:	d807      	bhi.n	8005234 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	461a      	mov	r2, r3
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff58 	bl	80050e2 <LL_GPIO_SetAFPin_0_7>
 8005232:	e006      	b.n	8005242 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	461a      	mov	r2, r3
 800523a:	6939      	ldr	r1, [r7, #16]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff7f 	bl	8005140 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1b7      	bne.n	80051c6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d003      	beq.n	8005266 <LL_GPIO_Init+0xc4>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6819      	ldr	r1, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	461a      	mov	r2, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fec0 	bl	8004ff6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <LL_I2C_Enable>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <LL_I2C_Disable>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 0201 	bic.w	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_I2C_ConfigFilters>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	0219      	lsls	r1, r3, #8
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	430b      	orrs	r3, r1
 80052dc:	431a      	orrs	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_I2C_SetOwnAddress1>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005302:	f023 0307 	bic.w	r3, r3, #7
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	430a      	orrs	r2, r1
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	609a      	str	r2, [r3, #8]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <LL_I2C_EnableOwnAddress1>:
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_I2C_DisableOwnAddress1>:
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	609a      	str	r2, [r3, #8]
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_I2C_SetTiming>:
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	611a      	str	r2, [r3, #16]
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_I2C_SetMode>:
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff65 	bl	80052a0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	461a      	mov	r2, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff6d 	bl	80052c0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ffb6 	bl	800535e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff44 	bl	8005280 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ffa0 	bl	800533e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6919      	ldr	r1, [r3, #16]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	461a      	mov	r2, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff70 	bl	80052ee <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ff81 	bl	800531e <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ffa9 	bl	800537a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ffb6 	bl	80053a0 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <LL_SPI_IsEnabled>:
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d101      	bne.n	8005456 <LL_SPI_IsEnabled+0x18>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <LL_SPI_IsEnabled+0x1a>
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_SPI_SetCRCPolynomial>:
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	611a      	str	r2, [r3, #16]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ffd3 	bl	800543e <LL_SPI_IsEnabled>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d13b      	bne.n	8005516 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a6:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	6811      	ldr	r1, [r2, #0]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	6852      	ldr	r2, [r2, #4]
 80054b2:	4311      	orrs	r1, r2
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	68d2      	ldr	r2, [r2, #12]
 80054b8:	4311      	orrs	r1, r2
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	6912      	ldr	r2, [r2, #16]
 80054be:	4311      	orrs	r1, r2
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	6952      	ldr	r2, [r2, #20]
 80054c4:	4311      	orrs	r1, r2
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6992      	ldr	r2, [r2, #24]
 80054ca:	4311      	orrs	r1, r2
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	69d2      	ldr	r2, [r2, #28]
 80054d0:	4311      	orrs	r1, r2
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	6a12      	ldr	r2, [r2, #32]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e6:	f023 0304 	bic.w	r3, r3, #4
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	6891      	ldr	r1, [r2, #8]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	6952      	ldr	r2, [r2, #20]
 80054f2:	0c12      	lsrs	r2, r2, #16
 80054f4:	430a      	orrs	r2, r1
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005504:	d105      	bne.n	8005512 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ffa9 	bl	8005464 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005520:	b084      	sub	sp, #16
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	f107 001c 	add.w	r0, r7, #28
 800552e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2b01      	cmp	r3, #1
 8005536:	d122      	bne.n	800557e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d105      	bne.n	8005572 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa28 	bl	80059c8 <USB_CoreReset>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
 800557c:	e01a      	b.n	80055b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa1c 	bl	80059c8 <USB_CoreReset>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
 80055a6:	e005      	b.n	80055b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr

080055c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f023 0201 	bic.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d106      	bne.n	8005612 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]
 8005610:	e00b      	b.n	800562a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	e001      	b.n	800562a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e003      	b.n	8005632 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800562a:	2032      	movs	r0, #50	; 0x32
 800562c:	f7fd fa38 	bl	8002aa0 <HAL_Delay>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800563c:	b084      	sub	sp, #16
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800564a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e009      	b.n	8005670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3340      	adds	r3, #64	; 0x40
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	2200      	movs	r2, #0
 8005668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3301      	adds	r3, #1
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b0e      	cmp	r3, #14
 8005674:	d9f2      	bls.n	800565c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11c      	bne.n	80056b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568a:	f043 0302 	orr.w	r3, r3, #2
 800568e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e005      	b.n	80056c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c8:	461a      	mov	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	4619      	mov	r1, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	461a      	mov	r2, r3
 80056de:	680b      	ldr	r3, [r1, #0]
 80056e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056e2:	2103      	movs	r1, #3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f93d 	bl	8005964 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056ea:	2110      	movs	r1, #16
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8f1 	bl	80058d4 <USB_FlushTxFifo>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f90f 	bl	8005920 <USB_FlushRxFifo>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	461a      	mov	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e043      	b.n	80057be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574c:	d118      	bne.n	8005780 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e013      	b.n	8005792 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	461a      	mov	r2, r3
 8005778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e008      	b.n	8005792 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3b7      	bcc.n	8005736 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e043      	b.n	8005854 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e2:	d118      	bne.n	8005816 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e013      	b.n	8005828 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	461a      	mov	r2, r3
 800580e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e008      	b.n	8005828 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800584c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3301      	adds	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3b7      	bcc.n	80057cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800586e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800587c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f043 0210 	orr.w	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <USB_DevInit+0x294>)
 8005890:	4313      	orrs	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 0208 	orr.w	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ca:	b004      	add	sp, #16
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	803c3800 	.word	0x803c3800

080058d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <USB_FlushTxFifo+0x48>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e006      	b.n	800590e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b20      	cmp	r3, #32
 800590a:	d0f0      	beq.n	80058ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	00030d40 	.word	0x00030d40

08005920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2210      	movs	r2, #16
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <USB_FlushRxFifo+0x40>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d0f0      	beq.n	8005932 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	00030d40 	.word	0x00030d40

08005964 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80059b6:	2003      	movs	r0, #3
 80059b8:	f7fd f872 	bl	8002aa0 <HAL_Delay>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_CoreReset+0x64>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e01b      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	daf2      	bge.n	80059d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <USB_CoreReset+0x64>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d0f0      	beq.n	80059fe <USB_CoreReset+0x36>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <LL_mDelay+0x48>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005a42:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d00c      	beq.n	8005a66 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005a52:	e008      	b.n	8005a66 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005a54:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <LL_mDelay+0x48>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f3      	bne.n	8005a54 <LL_mDelay+0x24>
    }
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	e000e010 	.word	0xe000e010

08005a7c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <LL_SetSystemCoreClock+0x1c>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6013      	str	r3, [r2, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000008 	.word	0x20000008

08005a9c <__errno>:
 8005a9c:	4b01      	ldr	r3, [pc, #4]	; (8005aa4 <__errno+0x8>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000028 	.word	0x20000028

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0d      	ldr	r6, [pc, #52]	; (8005ae0 <__libc_init_array+0x38>)
 8005aac:	4c0d      	ldr	r4, [pc, #52]	; (8005ae4 <__libc_init_array+0x3c>)
 8005aae:	1ba4      	subs	r4, r4, r6
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	42a5      	cmp	r5, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	4e0b      	ldr	r6, [pc, #44]	; (8005ae8 <__libc_init_array+0x40>)
 8005aba:	4c0c      	ldr	r4, [pc, #48]	; (8005aec <__libc_init_array+0x44>)
 8005abc:	f002 fbac 	bl	8008218 <_init>
 8005ac0:	1ba4      	subs	r4, r4, r6
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	2500      	movs	r5, #0
 8005ac6:	42a5      	cmp	r5, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ad0:	4798      	blx	r3
 8005ad2:	3501      	adds	r5, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ada:	4798      	blx	r3
 8005adc:	3501      	adds	r5, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	080085e8 	.word	0x080085e8
 8005ae4:	080085e8 	.word	0x080085e8
 8005ae8:	080085e8 	.word	0x080085e8
 8005aec:	080085ec 	.word	0x080085ec

08005af0 <memcpy>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	1e43      	subs	r3, r0, #1
 8005af4:	440a      	add	r2, r1
 8005af6:	4291      	cmp	r1, r2
 8005af8:	d100      	bne.n	8005afc <memcpy+0xc>
 8005afa:	bd10      	pop	{r4, pc}
 8005afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b04:	e7f7      	b.n	8005af6 <memcpy+0x6>

08005b06 <memset>:
 8005b06:	4402      	add	r2, r0
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d100      	bne.n	8005b10 <memset+0xa>
 8005b0e:	4770      	bx	lr
 8005b10:	f803 1b01 	strb.w	r1, [r3], #1
 8005b14:	e7f9      	b.n	8005b0a <memset+0x4>

08005b16 <__cvt>:
 8005b16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1a:	ec55 4b10 	vmov	r4, r5, d0
 8005b1e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005b20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	460e      	mov	r6, r1
 8005b28:	4691      	mov	r9, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	bfb8      	it	lt
 8005b2e:	4622      	movlt	r2, r4
 8005b30:	462b      	mov	r3, r5
 8005b32:	f027 0720 	bic.w	r7, r7, #32
 8005b36:	bfbb      	ittet	lt
 8005b38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b3c:	461d      	movlt	r5, r3
 8005b3e:	2300      	movge	r3, #0
 8005b40:	232d      	movlt	r3, #45	; 0x2d
 8005b42:	bfb8      	it	lt
 8005b44:	4614      	movlt	r4, r2
 8005b46:	2f46      	cmp	r7, #70	; 0x46
 8005b48:	700b      	strb	r3, [r1, #0]
 8005b4a:	d004      	beq.n	8005b56 <__cvt+0x40>
 8005b4c:	2f45      	cmp	r7, #69	; 0x45
 8005b4e:	d100      	bne.n	8005b52 <__cvt+0x3c>
 8005b50:	3601      	adds	r6, #1
 8005b52:	2102      	movs	r1, #2
 8005b54:	e000      	b.n	8005b58 <__cvt+0x42>
 8005b56:	2103      	movs	r1, #3
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	ab02      	add	r3, sp, #8
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	4632      	mov	r2, r6
 8005b62:	4653      	mov	r3, sl
 8005b64:	ec45 4b10 	vmov	d0, r4, r5
 8005b68:	f000 fdfa 	bl	8006760 <_dtoa_r>
 8005b6c:	2f47      	cmp	r7, #71	; 0x47
 8005b6e:	4680      	mov	r8, r0
 8005b70:	d102      	bne.n	8005b78 <__cvt+0x62>
 8005b72:	f019 0f01 	tst.w	r9, #1
 8005b76:	d026      	beq.n	8005bc6 <__cvt+0xb0>
 8005b78:	2f46      	cmp	r7, #70	; 0x46
 8005b7a:	eb08 0906 	add.w	r9, r8, r6
 8005b7e:	d111      	bne.n	8005ba4 <__cvt+0x8e>
 8005b80:	f898 3000 	ldrb.w	r3, [r8]
 8005b84:	2b30      	cmp	r3, #48	; 0x30
 8005b86:	d10a      	bne.n	8005b9e <__cvt+0x88>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	f7fa ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b94:	b918      	cbnz	r0, 8005b9e <__cvt+0x88>
 8005b96:	f1c6 0601 	rsb	r6, r6, #1
 8005b9a:	f8ca 6000 	str.w	r6, [sl]
 8005b9e:	f8da 3000 	ldr.w	r3, [sl]
 8005ba2:	4499      	add	r9, r3
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bb0:	b938      	cbnz	r0, 8005bc2 <__cvt+0xac>
 8005bb2:	2230      	movs	r2, #48	; 0x30
 8005bb4:	9b03      	ldr	r3, [sp, #12]
 8005bb6:	454b      	cmp	r3, r9
 8005bb8:	d205      	bcs.n	8005bc6 <__cvt+0xb0>
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	9103      	str	r1, [sp, #12]
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e7f8      	b.n	8005bb4 <__cvt+0x9e>
 8005bc2:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bca:	eba3 0308 	sub.w	r3, r3, r8
 8005bce:	4640      	mov	r0, r8
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	b004      	add	sp, #16
 8005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005bd8 <__exponent>:
 8005bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bda:	2900      	cmp	r1, #0
 8005bdc:	4604      	mov	r4, r0
 8005bde:	bfba      	itte	lt
 8005be0:	4249      	neglt	r1, r1
 8005be2:	232d      	movlt	r3, #45	; 0x2d
 8005be4:	232b      	movge	r3, #43	; 0x2b
 8005be6:	2909      	cmp	r1, #9
 8005be8:	f804 2b02 	strb.w	r2, [r4], #2
 8005bec:	7043      	strb	r3, [r0, #1]
 8005bee:	dd20      	ble.n	8005c32 <__exponent+0x5a>
 8005bf0:	f10d 0307 	add.w	r3, sp, #7
 8005bf4:	461f      	mov	r7, r3
 8005bf6:	260a      	movs	r6, #10
 8005bf8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bfc:	fb06 1115 	mls	r1, r6, r5, r1
 8005c00:	3130      	adds	r1, #48	; 0x30
 8005c02:	2d09      	cmp	r5, #9
 8005c04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c08:	f103 32ff 	add.w	r2, r3, #4294967295
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	dc09      	bgt.n	8005c24 <__exponent+0x4c>
 8005c10:	3130      	adds	r1, #48	; 0x30
 8005c12:	3b02      	subs	r3, #2
 8005c14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005c18:	42bb      	cmp	r3, r7
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	d304      	bcc.n	8005c28 <__exponent+0x50>
 8005c1e:	1a10      	subs	r0, r2, r0
 8005c20:	b003      	add	sp, #12
 8005c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c24:	4613      	mov	r3, r2
 8005c26:	e7e7      	b.n	8005bf8 <__exponent+0x20>
 8005c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2c:	f804 2b01 	strb.w	r2, [r4], #1
 8005c30:	e7f2      	b.n	8005c18 <__exponent+0x40>
 8005c32:	2330      	movs	r3, #48	; 0x30
 8005c34:	4419      	add	r1, r3
 8005c36:	7083      	strb	r3, [r0, #2]
 8005c38:	1d02      	adds	r2, r0, #4
 8005c3a:	70c1      	strb	r1, [r0, #3]
 8005c3c:	e7ef      	b.n	8005c1e <__exponent+0x46>
	...

08005c40 <_printf_float>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	b08d      	sub	sp, #52	; 0x34
 8005c46:	460c      	mov	r4, r1
 8005c48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	461f      	mov	r7, r3
 8005c50:	4605      	mov	r5, r0
 8005c52:	f001 fcb7 	bl	80075c4 <_localeconv_r>
 8005c56:	6803      	ldr	r3, [r0, #0]
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fab8 	bl	80001d0 <strlen>
 8005c60:	2300      	movs	r3, #0
 8005c62:	930a      	str	r3, [sp, #40]	; 0x28
 8005c64:	f8d8 3000 	ldr.w	r3, [r8]
 8005c68:	9005      	str	r0, [sp, #20]
 8005c6a:	3307      	adds	r3, #7
 8005c6c:	f023 0307 	bic.w	r3, r3, #7
 8005c70:	f103 0208 	add.w	r2, r3, #8
 8005c74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c78:	f8d4 b000 	ldr.w	fp, [r4]
 8005c7c:	f8c8 2000 	str.w	r2, [r8]
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c96:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9a:	4ba7      	ldr	r3, [pc, #668]	; (8005f38 <_printf_float+0x2f8>)
 8005c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ca0:	f7fa ff44 	bl	8000b2c <__aeabi_dcmpun>
 8005ca4:	bb70      	cbnz	r0, 8005d04 <_printf_float+0xc4>
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8005caa:	4ba3      	ldr	r3, [pc, #652]	; (8005f38 <_printf_float+0x2f8>)
 8005cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cb0:	f7fa ff1e 	bl	8000af0 <__aeabi_dcmple>
 8005cb4:	bb30      	cbnz	r0, 8005d04 <_printf_float+0xc4>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	f7fa ff0d 	bl	8000adc <__aeabi_dcmplt>
 8005cc2:	b110      	cbz	r0, 8005cca <_printf_float+0x8a>
 8005cc4:	232d      	movs	r3, #45	; 0x2d
 8005cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cca:	4a9c      	ldr	r2, [pc, #624]	; (8005f3c <_printf_float+0x2fc>)
 8005ccc:	4b9c      	ldr	r3, [pc, #624]	; (8005f40 <_printf_float+0x300>)
 8005cce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005cd2:	bf8c      	ite	hi
 8005cd4:	4690      	movhi	r8, r2
 8005cd6:	4698      	movls	r8, r3
 8005cd8:	2303      	movs	r3, #3
 8005cda:	f02b 0204 	bic.w	r2, fp, #4
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	6022      	str	r2, [r4, #0]
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	9700      	str	r7, [sp, #0]
 8005ce8:	4633      	mov	r3, r6
 8005cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f9e6 	bl	80060c0 <_printf_common>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f040 808d 	bne.w	8005e14 <_printf_float+0x1d4>
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfe:	b00d      	add	sp, #52	; 0x34
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	4640      	mov	r0, r8
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	f7fa ff0e 	bl	8000b2c <__aeabi_dcmpun>
 8005d10:	b110      	cbz	r0, 8005d18 <_printf_float+0xd8>
 8005d12:	4a8c      	ldr	r2, [pc, #560]	; (8005f44 <_printf_float+0x304>)
 8005d14:	4b8c      	ldr	r3, [pc, #560]	; (8005f48 <_printf_float+0x308>)
 8005d16:	e7da      	b.n	8005cce <_printf_float+0x8e>
 8005d18:	6861      	ldr	r1, [r4, #4]
 8005d1a:	1c4b      	adds	r3, r1, #1
 8005d1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005d20:	a80a      	add	r0, sp, #40	; 0x28
 8005d22:	d13e      	bne.n	8005da2 <_printf_float+0x162>
 8005d24:	2306      	movs	r3, #6
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005d2e:	ab09      	add	r3, sp, #36	; 0x24
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	ec49 8b10 	vmov	d0, r8, r9
 8005d36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d3a:	6022      	str	r2, [r4, #0]
 8005d3c:	f8cd a004 	str.w	sl, [sp, #4]
 8005d40:	6861      	ldr	r1, [r4, #4]
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff fee7 	bl	8005b16 <__cvt>
 8005d48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005d4c:	2b47      	cmp	r3, #71	; 0x47
 8005d4e:	4680      	mov	r8, r0
 8005d50:	d109      	bne.n	8005d66 <_printf_float+0x126>
 8005d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d54:	1cd8      	adds	r0, r3, #3
 8005d56:	db02      	blt.n	8005d5e <_printf_float+0x11e>
 8005d58:	6862      	ldr	r2, [r4, #4]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	dd47      	ble.n	8005dee <_printf_float+0x1ae>
 8005d5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d62:	fa5f fa8a 	uxtb.w	sl, sl
 8005d66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d6c:	d824      	bhi.n	8005db8 <_printf_float+0x178>
 8005d6e:	3901      	subs	r1, #1
 8005d70:	4652      	mov	r2, sl
 8005d72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d76:	9109      	str	r1, [sp, #36]	; 0x24
 8005d78:	f7ff ff2e 	bl	8005bd8 <__exponent>
 8005d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d7e:	1813      	adds	r3, r2, r0
 8005d80:	2a01      	cmp	r2, #1
 8005d82:	4681      	mov	r9, r0
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	dc02      	bgt.n	8005d8e <_printf_float+0x14e>
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	07d1      	lsls	r1, r2, #31
 8005d8c:	d501      	bpl.n	8005d92 <_printf_float+0x152>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0a5      	beq.n	8005ce6 <_printf_float+0xa6>
 8005d9a:	232d      	movs	r3, #45	; 0x2d
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da0:	e7a1      	b.n	8005ce6 <_printf_float+0xa6>
 8005da2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005da6:	f000 8177 	beq.w	8006098 <_printf_float+0x458>
 8005daa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005dae:	d1bb      	bne.n	8005d28 <_printf_float+0xe8>
 8005db0:	2900      	cmp	r1, #0
 8005db2:	d1b9      	bne.n	8005d28 <_printf_float+0xe8>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e7b6      	b.n	8005d26 <_printf_float+0xe6>
 8005db8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005dbc:	d119      	bne.n	8005df2 <_printf_float+0x1b2>
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	dd0c      	ble.n	8005dde <_printf_float+0x19e>
 8005dc4:	6121      	str	r1, [r4, #16]
 8005dc6:	b913      	cbnz	r3, 8005dce <_printf_float+0x18e>
 8005dc8:	6822      	ldr	r2, [r4, #0]
 8005dca:	07d2      	lsls	r2, r2, #31
 8005dcc:	d502      	bpl.n	8005dd4 <_printf_float+0x194>
 8005dce:	3301      	adds	r3, #1
 8005dd0:	440b      	add	r3, r1
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005dd8:	f04f 0900 	mov.w	r9, #0
 8005ddc:	e7d9      	b.n	8005d92 <_printf_float+0x152>
 8005dde:	b913      	cbnz	r3, 8005de6 <_printf_float+0x1a6>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	07d0      	lsls	r0, r2, #31
 8005de4:	d501      	bpl.n	8005dea <_printf_float+0x1aa>
 8005de6:	3302      	adds	r3, #2
 8005de8:	e7f3      	b.n	8005dd2 <_printf_float+0x192>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7f1      	b.n	8005dd2 <_printf_float+0x192>
 8005dee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005df2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005df6:	4293      	cmp	r3, r2
 8005df8:	db05      	blt.n	8005e06 <_printf_float+0x1c6>
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	07d1      	lsls	r1, r2, #31
 8005e00:	d5e8      	bpl.n	8005dd4 <_printf_float+0x194>
 8005e02:	3301      	adds	r3, #1
 8005e04:	e7e5      	b.n	8005dd2 <_printf_float+0x192>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfd4      	ite	le
 8005e0a:	f1c3 0302 	rsble	r3, r3, #2
 8005e0e:	2301      	movgt	r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	e7de      	b.n	8005dd2 <_printf_float+0x192>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	055a      	lsls	r2, r3, #21
 8005e18:	d407      	bmi.n	8005e2a <_printf_float+0x1ea>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	d12b      	bne.n	8005e80 <_printf_float+0x240>
 8005e28:	e767      	b.n	8005cfa <_printf_float+0xba>
 8005e2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005e2e:	f240 80dc 	bls.w	8005fea <_printf_float+0x3aa>
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e3a:	f7fa fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d033      	beq.n	8005eaa <_printf_float+0x26a>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4a41      	ldr	r2, [pc, #260]	; (8005f4c <_printf_float+0x30c>)
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f af54 	beq.w	8005cfa <_printf_float+0xba>
 8005e52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e56:	429a      	cmp	r2, r3
 8005e58:	db02      	blt.n	8005e60 <_printf_float+0x220>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	07d8      	lsls	r0, r3, #31
 8005e5e:	d50f      	bpl.n	8005e80 <_printf_float+0x240>
 8005e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e64:	4631      	mov	r1, r6
 8005e66:	4628      	mov	r0, r5
 8005e68:	47b8      	blx	r7
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f43f af45 	beq.w	8005cfa <_printf_float+0xba>
 8005e70:	f04f 0800 	mov.w	r8, #0
 8005e74:	f104 091a 	add.w	r9, r4, #26
 8005e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	4543      	cmp	r3, r8
 8005e7e:	dc09      	bgt.n	8005e94 <_printf_float+0x254>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	079b      	lsls	r3, r3, #30
 8005e84:	f100 8103 	bmi.w	800608e <_printf_float+0x44e>
 8005e88:	68e0      	ldr	r0, [r4, #12]
 8005e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e8c:	4298      	cmp	r0, r3
 8005e8e:	bfb8      	it	lt
 8005e90:	4618      	movlt	r0, r3
 8005e92:	e734      	b.n	8005cfe <_printf_float+0xbe>
 8005e94:	2301      	movs	r3, #1
 8005e96:	464a      	mov	r2, r9
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f af2b 	beq.w	8005cfa <_printf_float+0xba>
 8005ea4:	f108 0801 	add.w	r8, r8, #1
 8005ea8:	e7e6      	b.n	8005e78 <_printf_float+0x238>
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc2b      	bgt.n	8005f08 <_printf_float+0x2c8>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <_printf_float+0x30c>)
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	f43f af1d 	beq.w	8005cfa <_printf_float+0xba>
 8005ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec2:	b923      	cbnz	r3, 8005ece <_printf_float+0x28e>
 8005ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec6:	b913      	cbnz	r3, 8005ece <_printf_float+0x28e>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	d5d8      	bpl.n	8005e80 <_printf_float+0x240>
 8005ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f43f af0e 	beq.w	8005cfa <_printf_float+0xba>
 8005ede:	f04f 0900 	mov.w	r9, #0
 8005ee2:	f104 0a1a 	add.w	sl, r4, #26
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	425b      	negs	r3, r3
 8005eea:	454b      	cmp	r3, r9
 8005eec:	dc01      	bgt.n	8005ef2 <_printf_float+0x2b2>
 8005eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef0:	e794      	b.n	8005e1c <_printf_float+0x1dc>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	f43f aefc 	beq.w	8005cfa <_printf_float+0xba>
 8005f02:	f109 0901 	add.w	r9, r9, #1
 8005f06:	e7ee      	b.n	8005ee6 <_printf_float+0x2a6>
 8005f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bfa8      	it	ge
 8005f10:	461a      	movge	r2, r3
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	4691      	mov	r9, r2
 8005f16:	dd07      	ble.n	8005f28 <_printf_float+0x2e8>
 8005f18:	4613      	mov	r3, r2
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f aee9 	beq.w	8005cfa <_printf_float+0xba>
 8005f28:	f104 031a 	add.w	r3, r4, #26
 8005f2c:	f04f 0b00 	mov.w	fp, #0
 8005f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f34:	9306      	str	r3, [sp, #24]
 8005f36:	e015      	b.n	8005f64 <_printf_float+0x324>
 8005f38:	7fefffff 	.word	0x7fefffff
 8005f3c:	08008328 	.word	0x08008328
 8005f40:	08008324 	.word	0x08008324
 8005f44:	08008330 	.word	0x08008330
 8005f48:	0800832c 	.word	0x0800832c
 8005f4c:	08008334 	.word	0x08008334
 8005f50:	2301      	movs	r3, #1
 8005f52:	9a06      	ldr	r2, [sp, #24]
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f aecd 	beq.w	8005cfa <_printf_float+0xba>
 8005f60:	f10b 0b01 	add.w	fp, fp, #1
 8005f64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f68:	ebaa 0309 	sub.w	r3, sl, r9
 8005f6c:	455b      	cmp	r3, fp
 8005f6e:	dcef      	bgt.n	8005f50 <_printf_float+0x310>
 8005f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f74:	429a      	cmp	r2, r3
 8005f76:	44d0      	add	r8, sl
 8005f78:	db15      	blt.n	8005fa6 <_printf_float+0x366>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	07da      	lsls	r2, r3, #31
 8005f7e:	d412      	bmi.n	8005fa6 <_printf_float+0x366>
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f84:	eba3 020a 	sub.w	r2, r3, sl
 8005f88:	eba3 0a01 	sub.w	sl, r3, r1
 8005f8c:	4592      	cmp	sl, r2
 8005f8e:	bfa8      	it	ge
 8005f90:	4692      	movge	sl, r2
 8005f92:	f1ba 0f00 	cmp.w	sl, #0
 8005f96:	dc0e      	bgt.n	8005fb6 <_printf_float+0x376>
 8005f98:	f04f 0800 	mov.w	r8, #0
 8005f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fa0:	f104 091a 	add.w	r9, r4, #26
 8005fa4:	e019      	b.n	8005fda <_printf_float+0x39a>
 8005fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1e5      	bne.n	8005f80 <_printf_float+0x340>
 8005fb4:	e6a1      	b.n	8005cfa <_printf_float+0xba>
 8005fb6:	4653      	mov	r3, sl
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d1e9      	bne.n	8005f98 <_printf_float+0x358>
 8005fc4:	e699      	b.n	8005cfa <_printf_float+0xba>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	464a      	mov	r2, r9
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f ae92 	beq.w	8005cfa <_printf_float+0xba>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	eba3 030a 	sub.w	r3, r3, sl
 8005fe4:	4543      	cmp	r3, r8
 8005fe6:	dcee      	bgt.n	8005fc6 <_printf_float+0x386>
 8005fe8:	e74a      	b.n	8005e80 <_printf_float+0x240>
 8005fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fec:	2a01      	cmp	r2, #1
 8005fee:	dc01      	bgt.n	8005ff4 <_printf_float+0x3b4>
 8005ff0:	07db      	lsls	r3, r3, #31
 8005ff2:	d53a      	bpl.n	800606a <_printf_float+0x42a>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f ae7b 	beq.w	8005cfa <_printf_float+0xba>
 8006004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f108 0801 	add.w	r8, r8, #1
 8006014:	f43f ae71 	beq.w	8005cfa <_printf_float+0xba>
 8006018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601a:	2200      	movs	r2, #0
 800601c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006024:	2300      	movs	r3, #0
 8006026:	f7fa fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800602a:	b9c8      	cbnz	r0, 8006060 <_printf_float+0x420>
 800602c:	4653      	mov	r3, sl
 800602e:	4642      	mov	r2, r8
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	d10e      	bne.n	8006058 <_printf_float+0x418>
 800603a:	e65e      	b.n	8005cfa <_printf_float+0xba>
 800603c:	2301      	movs	r3, #1
 800603e:	4652      	mov	r2, sl
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	f43f ae57 	beq.w	8005cfa <_printf_float+0xba>
 800604c:	f108 0801 	add.w	r8, r8, #1
 8006050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	4543      	cmp	r3, r8
 8006056:	dcf1      	bgt.n	800603c <_printf_float+0x3fc>
 8006058:	464b      	mov	r3, r9
 800605a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800605e:	e6de      	b.n	8005e1e <_printf_float+0x1de>
 8006060:	f04f 0800 	mov.w	r8, #0
 8006064:	f104 0a1a 	add.w	sl, r4, #26
 8006068:	e7f2      	b.n	8006050 <_printf_float+0x410>
 800606a:	2301      	movs	r3, #1
 800606c:	e7df      	b.n	800602e <_printf_float+0x3ee>
 800606e:	2301      	movs	r3, #1
 8006070:	464a      	mov	r2, r9
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	f43f ae3e 	beq.w	8005cfa <_printf_float+0xba>
 800607e:	f108 0801 	add.w	r8, r8, #1
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	4543      	cmp	r3, r8
 800608a:	dcf0      	bgt.n	800606e <_printf_float+0x42e>
 800608c:	e6fc      	b.n	8005e88 <_printf_float+0x248>
 800608e:	f04f 0800 	mov.w	r8, #0
 8006092:	f104 0919 	add.w	r9, r4, #25
 8006096:	e7f4      	b.n	8006082 <_printf_float+0x442>
 8006098:	2900      	cmp	r1, #0
 800609a:	f43f ae8b 	beq.w	8005db4 <_printf_float+0x174>
 800609e:	2300      	movs	r3, #0
 80060a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80060a4:	ab09      	add	r3, sp, #36	; 0x24
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	ec49 8b10 	vmov	d0, r8, r9
 80060ac:	6022      	str	r2, [r4, #0]
 80060ae:	f8cd a004 	str.w	sl, [sp, #4]
 80060b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060b6:	4628      	mov	r0, r5
 80060b8:	f7ff fd2d 	bl	8005b16 <__cvt>
 80060bc:	4680      	mov	r8, r0
 80060be:	e648      	b.n	8005d52 <_printf_float+0x112>

080060c0 <_printf_common>:
 80060c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	4691      	mov	r9, r2
 80060c6:	461f      	mov	r7, r3
 80060c8:	688a      	ldr	r2, [r1, #8]
 80060ca:	690b      	ldr	r3, [r1, #16]
 80060cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bfb8      	it	lt
 80060d4:	4613      	movlt	r3, r2
 80060d6:	f8c9 3000 	str.w	r3, [r9]
 80060da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060de:	4606      	mov	r6, r0
 80060e0:	460c      	mov	r4, r1
 80060e2:	b112      	cbz	r2, 80060ea <_printf_common+0x2a>
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c9 3000 	str.w	r3, [r9]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	0699      	lsls	r1, r3, #26
 80060ee:	bf42      	ittt	mi
 80060f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060f4:	3302      	addmi	r3, #2
 80060f6:	f8c9 3000 	strmi.w	r3, [r9]
 80060fa:	6825      	ldr	r5, [r4, #0]
 80060fc:	f015 0506 	ands.w	r5, r5, #6
 8006100:	d107      	bne.n	8006112 <_printf_common+0x52>
 8006102:	f104 0a19 	add.w	sl, r4, #25
 8006106:	68e3      	ldr	r3, [r4, #12]
 8006108:	f8d9 2000 	ldr.w	r2, [r9]
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	42ab      	cmp	r3, r5
 8006110:	dc28      	bgt.n	8006164 <_printf_common+0xa4>
 8006112:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	3300      	adds	r3, #0
 800611a:	bf18      	it	ne
 800611c:	2301      	movne	r3, #1
 800611e:	0692      	lsls	r2, r2, #26
 8006120:	d42d      	bmi.n	800617e <_printf_common+0xbe>
 8006122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006126:	4639      	mov	r1, r7
 8006128:	4630      	mov	r0, r6
 800612a:	47c0      	blx	r8
 800612c:	3001      	adds	r0, #1
 800612e:	d020      	beq.n	8006172 <_printf_common+0xb2>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	68e5      	ldr	r5, [r4, #12]
 8006134:	f8d9 2000 	ldr.w	r2, [r9]
 8006138:	f003 0306 	and.w	r3, r3, #6
 800613c:	2b04      	cmp	r3, #4
 800613e:	bf08      	it	eq
 8006140:	1aad      	subeq	r5, r5, r2
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	bf0c      	ite	eq
 8006148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800614c:	2500      	movne	r5, #0
 800614e:	4293      	cmp	r3, r2
 8006150:	bfc4      	itt	gt
 8006152:	1a9b      	subgt	r3, r3, r2
 8006154:	18ed      	addgt	r5, r5, r3
 8006156:	f04f 0900 	mov.w	r9, #0
 800615a:	341a      	adds	r4, #26
 800615c:	454d      	cmp	r5, r9
 800615e:	d11a      	bne.n	8006196 <_printf_common+0xd6>
 8006160:	2000      	movs	r0, #0
 8006162:	e008      	b.n	8006176 <_printf_common+0xb6>
 8006164:	2301      	movs	r3, #1
 8006166:	4652      	mov	r2, sl
 8006168:	4639      	mov	r1, r7
 800616a:	4630      	mov	r0, r6
 800616c:	47c0      	blx	r8
 800616e:	3001      	adds	r0, #1
 8006170:	d103      	bne.n	800617a <_printf_common+0xba>
 8006172:	f04f 30ff 	mov.w	r0, #4294967295
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	3501      	adds	r5, #1
 800617c:	e7c3      	b.n	8006106 <_printf_common+0x46>
 800617e:	18e1      	adds	r1, r4, r3
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	2030      	movs	r0, #48	; 0x30
 8006184:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006188:	4422      	add	r2, r4
 800618a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800618e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006192:	3302      	adds	r3, #2
 8006194:	e7c5      	b.n	8006122 <_printf_common+0x62>
 8006196:	2301      	movs	r3, #1
 8006198:	4622      	mov	r2, r4
 800619a:	4639      	mov	r1, r7
 800619c:	4630      	mov	r0, r6
 800619e:	47c0      	blx	r8
 80061a0:	3001      	adds	r0, #1
 80061a2:	d0e6      	beq.n	8006172 <_printf_common+0xb2>
 80061a4:	f109 0901 	add.w	r9, r9, #1
 80061a8:	e7d8      	b.n	800615c <_printf_common+0x9c>
	...

080061ac <_printf_i>:
 80061ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061b4:	460c      	mov	r4, r1
 80061b6:	7e09      	ldrb	r1, [r1, #24]
 80061b8:	b085      	sub	sp, #20
 80061ba:	296e      	cmp	r1, #110	; 0x6e
 80061bc:	4617      	mov	r7, r2
 80061be:	4606      	mov	r6, r0
 80061c0:	4698      	mov	r8, r3
 80061c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c4:	f000 80b3 	beq.w	800632e <_printf_i+0x182>
 80061c8:	d822      	bhi.n	8006210 <_printf_i+0x64>
 80061ca:	2963      	cmp	r1, #99	; 0x63
 80061cc:	d036      	beq.n	800623c <_printf_i+0x90>
 80061ce:	d80a      	bhi.n	80061e6 <_printf_i+0x3a>
 80061d0:	2900      	cmp	r1, #0
 80061d2:	f000 80b9 	beq.w	8006348 <_printf_i+0x19c>
 80061d6:	2958      	cmp	r1, #88	; 0x58
 80061d8:	f000 8083 	beq.w	80062e2 <_printf_i+0x136>
 80061dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80061e4:	e032      	b.n	800624c <_printf_i+0xa0>
 80061e6:	2964      	cmp	r1, #100	; 0x64
 80061e8:	d001      	beq.n	80061ee <_printf_i+0x42>
 80061ea:	2969      	cmp	r1, #105	; 0x69
 80061ec:	d1f6      	bne.n	80061dc <_printf_i+0x30>
 80061ee:	6820      	ldr	r0, [r4, #0]
 80061f0:	6813      	ldr	r3, [r2, #0]
 80061f2:	0605      	lsls	r5, r0, #24
 80061f4:	f103 0104 	add.w	r1, r3, #4
 80061f8:	d52a      	bpl.n	8006250 <_printf_i+0xa4>
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6011      	str	r1, [r2, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da03      	bge.n	800620a <_printf_i+0x5e>
 8006202:	222d      	movs	r2, #45	; 0x2d
 8006204:	425b      	negs	r3, r3
 8006206:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800620a:	486f      	ldr	r0, [pc, #444]	; (80063c8 <_printf_i+0x21c>)
 800620c:	220a      	movs	r2, #10
 800620e:	e039      	b.n	8006284 <_printf_i+0xd8>
 8006210:	2973      	cmp	r1, #115	; 0x73
 8006212:	f000 809d 	beq.w	8006350 <_printf_i+0x1a4>
 8006216:	d808      	bhi.n	800622a <_printf_i+0x7e>
 8006218:	296f      	cmp	r1, #111	; 0x6f
 800621a:	d020      	beq.n	800625e <_printf_i+0xb2>
 800621c:	2970      	cmp	r1, #112	; 0x70
 800621e:	d1dd      	bne.n	80061dc <_printf_i+0x30>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f043 0320 	orr.w	r3, r3, #32
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	e003      	b.n	8006232 <_printf_i+0x86>
 800622a:	2975      	cmp	r1, #117	; 0x75
 800622c:	d017      	beq.n	800625e <_printf_i+0xb2>
 800622e:	2978      	cmp	r1, #120	; 0x78
 8006230:	d1d4      	bne.n	80061dc <_printf_i+0x30>
 8006232:	2378      	movs	r3, #120	; 0x78
 8006234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006238:	4864      	ldr	r0, [pc, #400]	; (80063cc <_printf_i+0x220>)
 800623a:	e055      	b.n	80062e8 <_printf_i+0x13c>
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	1d19      	adds	r1, r3, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6011      	str	r1, [r2, #0]
 8006244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800624c:	2301      	movs	r3, #1
 800624e:	e08c      	b.n	800636a <_printf_i+0x1be>
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6011      	str	r1, [r2, #0]
 8006254:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006258:	bf18      	it	ne
 800625a:	b21b      	sxthne	r3, r3
 800625c:	e7cf      	b.n	80061fe <_printf_i+0x52>
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	6825      	ldr	r5, [r4, #0]
 8006262:	1d18      	adds	r0, r3, #4
 8006264:	6010      	str	r0, [r2, #0]
 8006266:	0628      	lsls	r0, r5, #24
 8006268:	d501      	bpl.n	800626e <_printf_i+0xc2>
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	e002      	b.n	8006274 <_printf_i+0xc8>
 800626e:	0668      	lsls	r0, r5, #25
 8006270:	d5fb      	bpl.n	800626a <_printf_i+0xbe>
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	4854      	ldr	r0, [pc, #336]	; (80063c8 <_printf_i+0x21c>)
 8006276:	296f      	cmp	r1, #111	; 0x6f
 8006278:	bf14      	ite	ne
 800627a:	220a      	movne	r2, #10
 800627c:	2208      	moveq	r2, #8
 800627e:	2100      	movs	r1, #0
 8006280:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006284:	6865      	ldr	r5, [r4, #4]
 8006286:	60a5      	str	r5, [r4, #8]
 8006288:	2d00      	cmp	r5, #0
 800628a:	f2c0 8095 	blt.w	80063b8 <_printf_i+0x20c>
 800628e:	6821      	ldr	r1, [r4, #0]
 8006290:	f021 0104 	bic.w	r1, r1, #4
 8006294:	6021      	str	r1, [r4, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d13d      	bne.n	8006316 <_printf_i+0x16a>
 800629a:	2d00      	cmp	r5, #0
 800629c:	f040 808e 	bne.w	80063bc <_printf_i+0x210>
 80062a0:	4665      	mov	r5, ip
 80062a2:	2a08      	cmp	r2, #8
 80062a4:	d10b      	bne.n	80062be <_printf_i+0x112>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	07db      	lsls	r3, r3, #31
 80062aa:	d508      	bpl.n	80062be <_printf_i+0x112>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	bfde      	ittt	le
 80062b4:	2330      	movle	r3, #48	; 0x30
 80062b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062be:	ebac 0305 	sub.w	r3, ip, r5
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	f8cd 8000 	str.w	r8, [sp]
 80062c8:	463b      	mov	r3, r7
 80062ca:	aa03      	add	r2, sp, #12
 80062cc:	4621      	mov	r1, r4
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff fef6 	bl	80060c0 <_printf_common>
 80062d4:	3001      	adds	r0, #1
 80062d6:	d14d      	bne.n	8006374 <_printf_i+0x1c8>
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	b005      	add	sp, #20
 80062de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e2:	4839      	ldr	r0, [pc, #228]	; (80063c8 <_printf_i+0x21c>)
 80062e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	6821      	ldr	r1, [r4, #0]
 80062ec:	1d1d      	adds	r5, r3, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6015      	str	r5, [r2, #0]
 80062f2:	060a      	lsls	r2, r1, #24
 80062f4:	d50b      	bpl.n	800630e <_printf_i+0x162>
 80062f6:	07ca      	lsls	r2, r1, #31
 80062f8:	bf44      	itt	mi
 80062fa:	f041 0120 	orrmi.w	r1, r1, #32
 80062fe:	6021      	strmi	r1, [r4, #0]
 8006300:	b91b      	cbnz	r3, 800630a <_printf_i+0x15e>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	f022 0220 	bic.w	r2, r2, #32
 8006308:	6022      	str	r2, [r4, #0]
 800630a:	2210      	movs	r2, #16
 800630c:	e7b7      	b.n	800627e <_printf_i+0xd2>
 800630e:	064d      	lsls	r5, r1, #25
 8006310:	bf48      	it	mi
 8006312:	b29b      	uxthmi	r3, r3
 8006314:	e7ef      	b.n	80062f6 <_printf_i+0x14a>
 8006316:	4665      	mov	r5, ip
 8006318:	fbb3 f1f2 	udiv	r1, r3, r2
 800631c:	fb02 3311 	mls	r3, r2, r1, r3
 8006320:	5cc3      	ldrb	r3, [r0, r3]
 8006322:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006326:	460b      	mov	r3, r1
 8006328:	2900      	cmp	r1, #0
 800632a:	d1f5      	bne.n	8006318 <_printf_i+0x16c>
 800632c:	e7b9      	b.n	80062a2 <_printf_i+0xf6>
 800632e:	6813      	ldr	r3, [r2, #0]
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	6961      	ldr	r1, [r4, #20]
 8006334:	1d18      	adds	r0, r3, #4
 8006336:	6010      	str	r0, [r2, #0]
 8006338:	0628      	lsls	r0, r5, #24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	d501      	bpl.n	8006342 <_printf_i+0x196>
 800633e:	6019      	str	r1, [r3, #0]
 8006340:	e002      	b.n	8006348 <_printf_i+0x19c>
 8006342:	066a      	lsls	r2, r5, #25
 8006344:	d5fb      	bpl.n	800633e <_printf_i+0x192>
 8006346:	8019      	strh	r1, [r3, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	4665      	mov	r5, ip
 800634e:	e7b9      	b.n	80062c4 <_printf_i+0x118>
 8006350:	6813      	ldr	r3, [r2, #0]
 8006352:	1d19      	adds	r1, r3, #4
 8006354:	6011      	str	r1, [r2, #0]
 8006356:	681d      	ldr	r5, [r3, #0]
 8006358:	6862      	ldr	r2, [r4, #4]
 800635a:	2100      	movs	r1, #0
 800635c:	4628      	mov	r0, r5
 800635e:	f7f9 ff3f 	bl	80001e0 <memchr>
 8006362:	b108      	cbz	r0, 8006368 <_printf_i+0x1bc>
 8006364:	1b40      	subs	r0, r0, r5
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2300      	movs	r3, #0
 800636e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006372:	e7a7      	b.n	80062c4 <_printf_i+0x118>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	462a      	mov	r2, r5
 8006378:	4639      	mov	r1, r7
 800637a:	4630      	mov	r0, r6
 800637c:	47c0      	blx	r8
 800637e:	3001      	adds	r0, #1
 8006380:	d0aa      	beq.n	80062d8 <_printf_i+0x12c>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	079b      	lsls	r3, r3, #30
 8006386:	d413      	bmi.n	80063b0 <_printf_i+0x204>
 8006388:	68e0      	ldr	r0, [r4, #12]
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	4298      	cmp	r0, r3
 800638e:	bfb8      	it	lt
 8006390:	4618      	movlt	r0, r3
 8006392:	e7a3      	b.n	80062dc <_printf_i+0x130>
 8006394:	2301      	movs	r3, #1
 8006396:	464a      	mov	r2, r9
 8006398:	4639      	mov	r1, r7
 800639a:	4630      	mov	r0, r6
 800639c:	47c0      	blx	r8
 800639e:	3001      	adds	r0, #1
 80063a0:	d09a      	beq.n	80062d8 <_printf_i+0x12c>
 80063a2:	3501      	adds	r5, #1
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	9a03      	ldr	r2, [sp, #12]
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	dcf2      	bgt.n	8006394 <_printf_i+0x1e8>
 80063ae:	e7eb      	b.n	8006388 <_printf_i+0x1dc>
 80063b0:	2500      	movs	r5, #0
 80063b2:	f104 0919 	add.w	r9, r4, #25
 80063b6:	e7f5      	b.n	80063a4 <_printf_i+0x1f8>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ac      	bne.n	8006316 <_printf_i+0x16a>
 80063bc:	7803      	ldrb	r3, [r0, #0]
 80063be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c6:	e76c      	b.n	80062a2 <_printf_i+0xf6>
 80063c8:	08008336 	.word	0x08008336
 80063cc:	08008347 	.word	0x08008347

080063d0 <iprintf>:
 80063d0:	b40f      	push	{r0, r1, r2, r3}
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <iprintf+0x2c>)
 80063d4:	b513      	push	{r0, r1, r4, lr}
 80063d6:	681c      	ldr	r4, [r3, #0]
 80063d8:	b124      	cbz	r4, 80063e4 <iprintf+0x14>
 80063da:	69a3      	ldr	r3, [r4, #24]
 80063dc:	b913      	cbnz	r3, 80063e4 <iprintf+0x14>
 80063de:	4620      	mov	r0, r4
 80063e0:	f001 f866 	bl	80074b0 <__sinit>
 80063e4:	ab05      	add	r3, sp, #20
 80063e6:	9a04      	ldr	r2, [sp, #16]
 80063e8:	68a1      	ldr	r1, [r4, #8]
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	4620      	mov	r0, r4
 80063ee:	f001 fd1f 	bl	8007e30 <_vfiprintf_r>
 80063f2:	b002      	add	sp, #8
 80063f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f8:	b004      	add	sp, #16
 80063fa:	4770      	bx	lr
 80063fc:	20000028 	.word	0x20000028

08006400 <_puts_r>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	460e      	mov	r6, r1
 8006404:	4605      	mov	r5, r0
 8006406:	b118      	cbz	r0, 8006410 <_puts_r+0x10>
 8006408:	6983      	ldr	r3, [r0, #24]
 800640a:	b90b      	cbnz	r3, 8006410 <_puts_r+0x10>
 800640c:	f001 f850 	bl	80074b0 <__sinit>
 8006410:	69ab      	ldr	r3, [r5, #24]
 8006412:	68ac      	ldr	r4, [r5, #8]
 8006414:	b913      	cbnz	r3, 800641c <_puts_r+0x1c>
 8006416:	4628      	mov	r0, r5
 8006418:	f001 f84a 	bl	80074b0 <__sinit>
 800641c:	4b23      	ldr	r3, [pc, #140]	; (80064ac <_puts_r+0xac>)
 800641e:	429c      	cmp	r4, r3
 8006420:	d117      	bne.n	8006452 <_puts_r+0x52>
 8006422:	686c      	ldr	r4, [r5, #4]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	071b      	lsls	r3, r3, #28
 8006428:	d51d      	bpl.n	8006466 <_puts_r+0x66>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	b1db      	cbz	r3, 8006466 <_puts_r+0x66>
 800642e:	3e01      	subs	r6, #1
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006436:	3b01      	subs	r3, #1
 8006438:	60a3      	str	r3, [r4, #8]
 800643a:	b9e9      	cbnz	r1, 8006478 <_puts_r+0x78>
 800643c:	2b00      	cmp	r3, #0
 800643e:	da2e      	bge.n	800649e <_puts_r+0x9e>
 8006440:	4622      	mov	r2, r4
 8006442:	210a      	movs	r1, #10
 8006444:	4628      	mov	r0, r5
 8006446:	f000 f83f 	bl	80064c8 <__swbuf_r>
 800644a:	3001      	adds	r0, #1
 800644c:	d011      	beq.n	8006472 <_puts_r+0x72>
 800644e:	200a      	movs	r0, #10
 8006450:	e011      	b.n	8006476 <_puts_r+0x76>
 8006452:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <_puts_r+0xb0>)
 8006454:	429c      	cmp	r4, r3
 8006456:	d101      	bne.n	800645c <_puts_r+0x5c>
 8006458:	68ac      	ldr	r4, [r5, #8]
 800645a:	e7e3      	b.n	8006424 <_puts_r+0x24>
 800645c:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <_puts_r+0xb4>)
 800645e:	429c      	cmp	r4, r3
 8006460:	bf08      	it	eq
 8006462:	68ec      	ldreq	r4, [r5, #12]
 8006464:	e7de      	b.n	8006424 <_puts_r+0x24>
 8006466:	4621      	mov	r1, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f000 f87f 	bl	800656c <__swsetup_r>
 800646e:	2800      	cmp	r0, #0
 8006470:	d0dd      	beq.n	800642e <_puts_r+0x2e>
 8006472:	f04f 30ff 	mov.w	r0, #4294967295
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	2b00      	cmp	r3, #0
 800647a:	da04      	bge.n	8006486 <_puts_r+0x86>
 800647c:	69a2      	ldr	r2, [r4, #24]
 800647e:	429a      	cmp	r2, r3
 8006480:	dc06      	bgt.n	8006490 <_puts_r+0x90>
 8006482:	290a      	cmp	r1, #10
 8006484:	d004      	beq.n	8006490 <_puts_r+0x90>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	7019      	strb	r1, [r3, #0]
 800648e:	e7cf      	b.n	8006430 <_puts_r+0x30>
 8006490:	4622      	mov	r2, r4
 8006492:	4628      	mov	r0, r5
 8006494:	f000 f818 	bl	80064c8 <__swbuf_r>
 8006498:	3001      	adds	r0, #1
 800649a:	d1c9      	bne.n	8006430 <_puts_r+0x30>
 800649c:	e7e9      	b.n	8006472 <_puts_r+0x72>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	200a      	movs	r0, #10
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	6022      	str	r2, [r4, #0]
 80064a6:	7018      	strb	r0, [r3, #0]
 80064a8:	e7e5      	b.n	8006476 <_puts_r+0x76>
 80064aa:	bf00      	nop
 80064ac:	08008388 	.word	0x08008388
 80064b0:	080083a8 	.word	0x080083a8
 80064b4:	08008368 	.word	0x08008368

080064b8 <puts>:
 80064b8:	4b02      	ldr	r3, [pc, #8]	; (80064c4 <puts+0xc>)
 80064ba:	4601      	mov	r1, r0
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	f7ff bf9f 	b.w	8006400 <_puts_r>
 80064c2:	bf00      	nop
 80064c4:	20000028 	.word	0x20000028

080064c8 <__swbuf_r>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	460e      	mov	r6, r1
 80064cc:	4614      	mov	r4, r2
 80064ce:	4605      	mov	r5, r0
 80064d0:	b118      	cbz	r0, 80064da <__swbuf_r+0x12>
 80064d2:	6983      	ldr	r3, [r0, #24]
 80064d4:	b90b      	cbnz	r3, 80064da <__swbuf_r+0x12>
 80064d6:	f000 ffeb 	bl	80074b0 <__sinit>
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <__swbuf_r+0x98>)
 80064dc:	429c      	cmp	r4, r3
 80064de:	d12a      	bne.n	8006536 <__swbuf_r+0x6e>
 80064e0:	686c      	ldr	r4, [r5, #4]
 80064e2:	69a3      	ldr	r3, [r4, #24]
 80064e4:	60a3      	str	r3, [r4, #8]
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	071a      	lsls	r2, r3, #28
 80064ea:	d52e      	bpl.n	800654a <__swbuf_r+0x82>
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	b363      	cbz	r3, 800654a <__swbuf_r+0x82>
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	6820      	ldr	r0, [r4, #0]
 80064f4:	1ac0      	subs	r0, r0, r3
 80064f6:	6963      	ldr	r3, [r4, #20]
 80064f8:	b2f6      	uxtb	r6, r6
 80064fa:	4283      	cmp	r3, r0
 80064fc:	4637      	mov	r7, r6
 80064fe:	dc04      	bgt.n	800650a <__swbuf_r+0x42>
 8006500:	4621      	mov	r1, r4
 8006502:	4628      	mov	r0, r5
 8006504:	f000 ff6a 	bl	80073dc <_fflush_r>
 8006508:	bb28      	cbnz	r0, 8006556 <__swbuf_r+0x8e>
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	3b01      	subs	r3, #1
 800650e:	60a3      	str	r3, [r4, #8]
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	6022      	str	r2, [r4, #0]
 8006516:	701e      	strb	r6, [r3, #0]
 8006518:	6963      	ldr	r3, [r4, #20]
 800651a:	3001      	adds	r0, #1
 800651c:	4283      	cmp	r3, r0
 800651e:	d004      	beq.n	800652a <__swbuf_r+0x62>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	07db      	lsls	r3, r3, #31
 8006524:	d519      	bpl.n	800655a <__swbuf_r+0x92>
 8006526:	2e0a      	cmp	r6, #10
 8006528:	d117      	bne.n	800655a <__swbuf_r+0x92>
 800652a:	4621      	mov	r1, r4
 800652c:	4628      	mov	r0, r5
 800652e:	f000 ff55 	bl	80073dc <_fflush_r>
 8006532:	b190      	cbz	r0, 800655a <__swbuf_r+0x92>
 8006534:	e00f      	b.n	8006556 <__swbuf_r+0x8e>
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <__swbuf_r+0x9c>)
 8006538:	429c      	cmp	r4, r3
 800653a:	d101      	bne.n	8006540 <__swbuf_r+0x78>
 800653c:	68ac      	ldr	r4, [r5, #8]
 800653e:	e7d0      	b.n	80064e2 <__swbuf_r+0x1a>
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <__swbuf_r+0xa0>)
 8006542:	429c      	cmp	r4, r3
 8006544:	bf08      	it	eq
 8006546:	68ec      	ldreq	r4, [r5, #12]
 8006548:	e7cb      	b.n	80064e2 <__swbuf_r+0x1a>
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f80d 	bl	800656c <__swsetup_r>
 8006552:	2800      	cmp	r0, #0
 8006554:	d0cc      	beq.n	80064f0 <__swbuf_r+0x28>
 8006556:	f04f 37ff 	mov.w	r7, #4294967295
 800655a:	4638      	mov	r0, r7
 800655c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655e:	bf00      	nop
 8006560:	08008388 	.word	0x08008388
 8006564:	080083a8 	.word	0x080083a8
 8006568:	08008368 	.word	0x08008368

0800656c <__swsetup_r>:
 800656c:	4b32      	ldr	r3, [pc, #200]	; (8006638 <__swsetup_r+0xcc>)
 800656e:	b570      	push	{r4, r5, r6, lr}
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	4606      	mov	r6, r0
 8006574:	460c      	mov	r4, r1
 8006576:	b125      	cbz	r5, 8006582 <__swsetup_r+0x16>
 8006578:	69ab      	ldr	r3, [r5, #24]
 800657a:	b913      	cbnz	r3, 8006582 <__swsetup_r+0x16>
 800657c:	4628      	mov	r0, r5
 800657e:	f000 ff97 	bl	80074b0 <__sinit>
 8006582:	4b2e      	ldr	r3, [pc, #184]	; (800663c <__swsetup_r+0xd0>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d10f      	bne.n	80065a8 <__swsetup_r+0x3c>
 8006588:	686c      	ldr	r4, [r5, #4]
 800658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658e:	b29a      	uxth	r2, r3
 8006590:	0715      	lsls	r5, r2, #28
 8006592:	d42c      	bmi.n	80065ee <__swsetup_r+0x82>
 8006594:	06d0      	lsls	r0, r2, #27
 8006596:	d411      	bmi.n	80065bc <__swsetup_r+0x50>
 8006598:	2209      	movs	r2, #9
 800659a:	6032      	str	r2, [r6, #0]
 800659c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	f04f 30ff 	mov.w	r0, #4294967295
 80065a6:	e03e      	b.n	8006626 <__swsetup_r+0xba>
 80065a8:	4b25      	ldr	r3, [pc, #148]	; (8006640 <__swsetup_r+0xd4>)
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d101      	bne.n	80065b2 <__swsetup_r+0x46>
 80065ae:	68ac      	ldr	r4, [r5, #8]
 80065b0:	e7eb      	b.n	800658a <__swsetup_r+0x1e>
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <__swsetup_r+0xd8>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	bf08      	it	eq
 80065b8:	68ec      	ldreq	r4, [r5, #12]
 80065ba:	e7e6      	b.n	800658a <__swsetup_r+0x1e>
 80065bc:	0751      	lsls	r1, r2, #29
 80065be:	d512      	bpl.n	80065e6 <__swsetup_r+0x7a>
 80065c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065c2:	b141      	cbz	r1, 80065d6 <__swsetup_r+0x6a>
 80065c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d002      	beq.n	80065d2 <__swsetup_r+0x66>
 80065cc:	4630      	mov	r0, r6
 80065ce:	f001 fb5d 	bl	8007c8c <_free_r>
 80065d2:	2300      	movs	r3, #0
 80065d4:	6363      	str	r3, [r4, #52]	; 0x34
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	2300      	movs	r3, #0
 80065e0:	6063      	str	r3, [r4, #4]
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f043 0308 	orr.w	r3, r3, #8
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	b94b      	cbnz	r3, 8006606 <__swsetup_r+0x9a>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d003      	beq.n	8006606 <__swsetup_r+0x9a>
 80065fe:	4621      	mov	r1, r4
 8006600:	4630      	mov	r0, r6
 8006602:	f001 f811 	bl	8007628 <__smakebuf_r>
 8006606:	89a2      	ldrh	r2, [r4, #12]
 8006608:	f012 0301 	ands.w	r3, r2, #1
 800660c:	d00c      	beq.n	8006628 <__swsetup_r+0xbc>
 800660e:	2300      	movs	r3, #0
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	6963      	ldr	r3, [r4, #20]
 8006614:	425b      	negs	r3, r3
 8006616:	61a3      	str	r3, [r4, #24]
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	b953      	cbnz	r3, 8006632 <__swsetup_r+0xc6>
 800661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006620:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006624:	d1ba      	bne.n	800659c <__swsetup_r+0x30>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	0792      	lsls	r2, r2, #30
 800662a:	bf58      	it	pl
 800662c:	6963      	ldrpl	r3, [r4, #20]
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	e7f2      	b.n	8006618 <__swsetup_r+0xac>
 8006632:	2000      	movs	r0, #0
 8006634:	e7f7      	b.n	8006626 <__swsetup_r+0xba>
 8006636:	bf00      	nop
 8006638:	20000028 	.word	0x20000028
 800663c:	08008388 	.word	0x08008388
 8006640:	080083a8 	.word	0x080083a8
 8006644:	08008368 	.word	0x08008368

08006648 <quorem>:
 8006648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	6903      	ldr	r3, [r0, #16]
 800664e:	690c      	ldr	r4, [r1, #16]
 8006650:	42a3      	cmp	r3, r4
 8006652:	4680      	mov	r8, r0
 8006654:	f2c0 8082 	blt.w	800675c <quorem+0x114>
 8006658:	3c01      	subs	r4, #1
 800665a:	f101 0714 	add.w	r7, r1, #20
 800665e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006662:	f100 0614 	add.w	r6, r0, #20
 8006666:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800666a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800666e:	eb06 030c 	add.w	r3, r6, ip
 8006672:	3501      	adds	r5, #1
 8006674:	eb07 090c 	add.w	r9, r7, ip
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	fbb0 f5f5 	udiv	r5, r0, r5
 800667e:	b395      	cbz	r5, 80066e6 <quorem+0x9e>
 8006680:	f04f 0a00 	mov.w	sl, #0
 8006684:	4638      	mov	r0, r7
 8006686:	46b6      	mov	lr, r6
 8006688:	46d3      	mov	fp, sl
 800668a:	f850 2b04 	ldr.w	r2, [r0], #4
 800668e:	b293      	uxth	r3, r2
 8006690:	fb05 a303 	mla	r3, r5, r3, sl
 8006694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006698:	b29b      	uxth	r3, r3
 800669a:	ebab 0303 	sub.w	r3, fp, r3
 800669e:	0c12      	lsrs	r2, r2, #16
 80066a0:	f8de b000 	ldr.w	fp, [lr]
 80066a4:	fb05 a202 	mla	r2, r5, r2, sl
 80066a8:	fa13 f38b 	uxtah	r3, r3, fp
 80066ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80066b0:	fa1f fb82 	uxth.w	fp, r2
 80066b4:	f8de 2000 	ldr.w	r2, [lr]
 80066b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80066bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c6:	4581      	cmp	r9, r0
 80066c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80066cc:	f84e 3b04 	str.w	r3, [lr], #4
 80066d0:	d2db      	bcs.n	800668a <quorem+0x42>
 80066d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80066d6:	b933      	cbnz	r3, 80066e6 <quorem+0x9e>
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	3b04      	subs	r3, #4
 80066dc:	429e      	cmp	r6, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	d330      	bcc.n	8006744 <quorem+0xfc>
 80066e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80066e6:	4640      	mov	r0, r8
 80066e8:	f001 f9fc 	bl	8007ae4 <__mcmp>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	db25      	blt.n	800673c <quorem+0xf4>
 80066f0:	3501      	adds	r5, #1
 80066f2:	4630      	mov	r0, r6
 80066f4:	f04f 0c00 	mov.w	ip, #0
 80066f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80066fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006700:	b293      	uxth	r3, r2
 8006702:	ebac 0303 	sub.w	r3, ip, r3
 8006706:	0c12      	lsrs	r2, r2, #16
 8006708:	fa13 f38e 	uxtah	r3, r3, lr
 800670c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006714:	b29b      	uxth	r3, r3
 8006716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800671a:	45b9      	cmp	r9, r7
 800671c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006720:	f840 3b04 	str.w	r3, [r0], #4
 8006724:	d2e8      	bcs.n	80066f8 <quorem+0xb0>
 8006726:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800672a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800672e:	b92a      	cbnz	r2, 800673c <quorem+0xf4>
 8006730:	3b04      	subs	r3, #4
 8006732:	429e      	cmp	r6, r3
 8006734:	461a      	mov	r2, r3
 8006736:	d30b      	bcc.n	8006750 <quorem+0x108>
 8006738:	f8c8 4010 	str.w	r4, [r8, #16]
 800673c:	4628      	mov	r0, r5
 800673e:	b003      	add	sp, #12
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	3b04      	subs	r3, #4
 8006748:	2a00      	cmp	r2, #0
 800674a:	d1ca      	bne.n	80066e2 <quorem+0x9a>
 800674c:	3c01      	subs	r4, #1
 800674e:	e7c5      	b.n	80066dc <quorem+0x94>
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	3b04      	subs	r3, #4
 8006754:	2a00      	cmp	r2, #0
 8006756:	d1ef      	bne.n	8006738 <quorem+0xf0>
 8006758:	3c01      	subs	r4, #1
 800675a:	e7ea      	b.n	8006732 <quorem+0xea>
 800675c:	2000      	movs	r0, #0
 800675e:	e7ee      	b.n	800673e <quorem+0xf6>

08006760 <_dtoa_r>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	ec57 6b10 	vmov	r6, r7, d0
 8006768:	b097      	sub	sp, #92	; 0x5c
 800676a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800676c:	9106      	str	r1, [sp, #24]
 800676e:	4604      	mov	r4, r0
 8006770:	920b      	str	r2, [sp, #44]	; 0x2c
 8006772:	9312      	str	r3, [sp, #72]	; 0x48
 8006774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006778:	e9cd 6700 	strd	r6, r7, [sp]
 800677c:	b93d      	cbnz	r5, 800678e <_dtoa_r+0x2e>
 800677e:	2010      	movs	r0, #16
 8006780:	f000 ff92 	bl	80076a8 <malloc>
 8006784:	6260      	str	r0, [r4, #36]	; 0x24
 8006786:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800678a:	6005      	str	r5, [r0, #0]
 800678c:	60c5      	str	r5, [r0, #12]
 800678e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006790:	6819      	ldr	r1, [r3, #0]
 8006792:	b151      	cbz	r1, 80067aa <_dtoa_r+0x4a>
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	604a      	str	r2, [r1, #4]
 8006798:	2301      	movs	r3, #1
 800679a:	4093      	lsls	r3, r2
 800679c:	608b      	str	r3, [r1, #8]
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 ffbe 	bl	8007720 <_Bfree>
 80067a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	1e3b      	subs	r3, r7, #0
 80067ac:	bfbb      	ittet	lt
 80067ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	9301      	strlt	r3, [sp, #4]
 80067b4:	2300      	movge	r3, #0
 80067b6:	2201      	movlt	r2, #1
 80067b8:	bfac      	ite	ge
 80067ba:	f8c8 3000 	strge.w	r3, [r8]
 80067be:	f8c8 2000 	strlt.w	r2, [r8]
 80067c2:	4baf      	ldr	r3, [pc, #700]	; (8006a80 <_dtoa_r+0x320>)
 80067c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067c8:	ea33 0308 	bics.w	r3, r3, r8
 80067cc:	d114      	bne.n	80067f8 <_dtoa_r+0x98>
 80067ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	9b00      	ldr	r3, [sp, #0]
 80067d8:	b923      	cbnz	r3, 80067e4 <_dtoa_r+0x84>
 80067da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80067de:	2800      	cmp	r0, #0
 80067e0:	f000 8542 	beq.w	8007268 <_dtoa_r+0xb08>
 80067e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006a94 <_dtoa_r+0x334>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8544 	beq.w	8007278 <_dtoa_r+0xb18>
 80067f0:	f10b 0303 	add.w	r3, fp, #3
 80067f4:	f000 bd3e 	b.w	8007274 <_dtoa_r+0xb14>
 80067f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7fa f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8006808:	4681      	mov	r9, r0
 800680a:	b168      	cbz	r0, 8006828 <_dtoa_r+0xc8>
 800680c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800680e:	2301      	movs	r3, #1
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8524 	beq.w	8007262 <_dtoa_r+0xb02>
 800681a:	4b9a      	ldr	r3, [pc, #616]	; (8006a84 <_dtoa_r+0x324>)
 800681c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800681e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	f000 bd28 	b.w	8007278 <_dtoa_r+0xb18>
 8006828:	aa14      	add	r2, sp, #80	; 0x50
 800682a:	a915      	add	r1, sp, #84	; 0x54
 800682c:	ec47 6b10 	vmov	d0, r6, r7
 8006830:	4620      	mov	r0, r4
 8006832:	f001 f9ce 	bl	8007bd2 <__d2b>
 8006836:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800683a:	9004      	str	r0, [sp, #16]
 800683c:	2d00      	cmp	r5, #0
 800683e:	d07c      	beq.n	800693a <_dtoa_r+0x1da>
 8006840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006844:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006848:	46b2      	mov	sl, r6
 800684a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800684e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006852:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006856:	2200      	movs	r2, #0
 8006858:	4b8b      	ldr	r3, [pc, #556]	; (8006a88 <_dtoa_r+0x328>)
 800685a:	4650      	mov	r0, sl
 800685c:	4659      	mov	r1, fp
 800685e:	f7f9 fd13 	bl	8000288 <__aeabi_dsub>
 8006862:	a381      	add	r3, pc, #516	; (adr r3, 8006a68 <_dtoa_r+0x308>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fec6 	bl	80005f8 <__aeabi_dmul>
 800686c:	a380      	add	r3, pc, #512	; (adr r3, 8006a70 <_dtoa_r+0x310>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fd0b 	bl	800028c <__adddf3>
 8006876:	4606      	mov	r6, r0
 8006878:	4628      	mov	r0, r5
 800687a:	460f      	mov	r7, r1
 800687c:	f7f9 fe52 	bl	8000524 <__aeabi_i2d>
 8006880:	a37d      	add	r3, pc, #500	; (adr r3, 8006a78 <_dtoa_r+0x318>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7f9 feb7 	bl	80005f8 <__aeabi_dmul>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7f9 fcfb 	bl	800028c <__adddf3>
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	f7fa f95d 	bl	8000b58 <__aeabi_d2iz>
 800689e:	2200      	movs	r2, #0
 80068a0:	4682      	mov	sl, r0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f7fa f918 	bl	8000adc <__aeabi_dcmplt>
 80068ac:	b148      	cbz	r0, 80068c2 <_dtoa_r+0x162>
 80068ae:	4650      	mov	r0, sl
 80068b0:	f7f9 fe38 	bl	8000524 <__aeabi_i2d>
 80068b4:	4632      	mov	r2, r6
 80068b6:	463b      	mov	r3, r7
 80068b8:	f7fa f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80068bc:	b908      	cbnz	r0, 80068c2 <_dtoa_r+0x162>
 80068be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068c2:	f1ba 0f16 	cmp.w	sl, #22
 80068c6:	d859      	bhi.n	800697c <_dtoa_r+0x21c>
 80068c8:	4970      	ldr	r1, [pc, #448]	; (8006a8c <_dtoa_r+0x32c>)
 80068ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80068ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068d6:	f7fa f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d050      	beq.n	8006980 <_dtoa_r+0x220>
 80068de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068e2:	2300      	movs	r3, #0
 80068e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068e8:	1b5d      	subs	r5, r3, r5
 80068ea:	f1b5 0801 	subs.w	r8, r5, #1
 80068ee:	bf49      	itett	mi
 80068f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80068f4:	2300      	movpl	r3, #0
 80068f6:	9305      	strmi	r3, [sp, #20]
 80068f8:	f04f 0800 	movmi.w	r8, #0
 80068fc:	bf58      	it	pl
 80068fe:	9305      	strpl	r3, [sp, #20]
 8006900:	f1ba 0f00 	cmp.w	sl, #0
 8006904:	db3e      	blt.n	8006984 <_dtoa_r+0x224>
 8006906:	2300      	movs	r3, #0
 8006908:	44d0      	add	r8, sl
 800690a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800690e:	9307      	str	r3, [sp, #28]
 8006910:	9b06      	ldr	r3, [sp, #24]
 8006912:	2b09      	cmp	r3, #9
 8006914:	f200 8090 	bhi.w	8006a38 <_dtoa_r+0x2d8>
 8006918:	2b05      	cmp	r3, #5
 800691a:	bfc4      	itt	gt
 800691c:	3b04      	subgt	r3, #4
 800691e:	9306      	strgt	r3, [sp, #24]
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	f1a3 0302 	sub.w	r3, r3, #2
 8006926:	bfcc      	ite	gt
 8006928:	2500      	movgt	r5, #0
 800692a:	2501      	movle	r5, #1
 800692c:	2b03      	cmp	r3, #3
 800692e:	f200 808f 	bhi.w	8006a50 <_dtoa_r+0x2f0>
 8006932:	e8df f003 	tbb	[pc, r3]
 8006936:	7f7d      	.short	0x7f7d
 8006938:	7131      	.short	0x7131
 800693a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800693e:	441d      	add	r5, r3
 8006940:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006944:	2820      	cmp	r0, #32
 8006946:	dd13      	ble.n	8006970 <_dtoa_r+0x210>
 8006948:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	fa08 f800 	lsl.w	r8, r8, r0
 8006952:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006956:	fa23 f000 	lsr.w	r0, r3, r0
 800695a:	ea48 0000 	orr.w	r0, r8, r0
 800695e:	f7f9 fdd1 	bl	8000504 <__aeabi_ui2d>
 8006962:	2301      	movs	r3, #1
 8006964:	4682      	mov	sl, r0
 8006966:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800696a:	3d01      	subs	r5, #1
 800696c:	9313      	str	r3, [sp, #76]	; 0x4c
 800696e:	e772      	b.n	8006856 <_dtoa_r+0xf6>
 8006970:	9b00      	ldr	r3, [sp, #0]
 8006972:	f1c0 0020 	rsb	r0, r0, #32
 8006976:	fa03 f000 	lsl.w	r0, r3, r0
 800697a:	e7f0      	b.n	800695e <_dtoa_r+0x1fe>
 800697c:	2301      	movs	r3, #1
 800697e:	e7b1      	b.n	80068e4 <_dtoa_r+0x184>
 8006980:	900f      	str	r0, [sp, #60]	; 0x3c
 8006982:	e7b0      	b.n	80068e6 <_dtoa_r+0x186>
 8006984:	9b05      	ldr	r3, [sp, #20]
 8006986:	eba3 030a 	sub.w	r3, r3, sl
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	f1ca 0300 	rsb	r3, sl, #0
 8006990:	9307      	str	r3, [sp, #28]
 8006992:	2300      	movs	r3, #0
 8006994:	930e      	str	r3, [sp, #56]	; 0x38
 8006996:	e7bb      	b.n	8006910 <_dtoa_r+0x1b0>
 8006998:	2301      	movs	r3, #1
 800699a:	930a      	str	r3, [sp, #40]	; 0x28
 800699c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dd59      	ble.n	8006a56 <_dtoa_r+0x2f6>
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	4699      	mov	r9, r3
 80069a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069a8:	2200      	movs	r2, #0
 80069aa:	6072      	str	r2, [r6, #4]
 80069ac:	2204      	movs	r2, #4
 80069ae:	f102 0014 	add.w	r0, r2, #20
 80069b2:	4298      	cmp	r0, r3
 80069b4:	6871      	ldr	r1, [r6, #4]
 80069b6:	d953      	bls.n	8006a60 <_dtoa_r+0x300>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fe7d 	bl	80076b8 <_Balloc>
 80069be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c0:	6030      	str	r0, [r6, #0]
 80069c2:	f1b9 0f0e 	cmp.w	r9, #14
 80069c6:	f8d3 b000 	ldr.w	fp, [r3]
 80069ca:	f200 80e6 	bhi.w	8006b9a <_dtoa_r+0x43a>
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	f000 80e3 	beq.w	8006b9a <_dtoa_r+0x43a>
 80069d4:	ed9d 7b00 	vldr	d7, [sp]
 80069d8:	f1ba 0f00 	cmp.w	sl, #0
 80069dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80069e0:	dd74      	ble.n	8006acc <_dtoa_r+0x36c>
 80069e2:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <_dtoa_r+0x32c>)
 80069e4:	f00a 030f 	and.w	r3, sl, #15
 80069e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069ec:	ed93 7b00 	vldr	d7, [r3]
 80069f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80069f4:	06f0      	lsls	r0, r6, #27
 80069f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80069fa:	d565      	bpl.n	8006ac8 <_dtoa_r+0x368>
 80069fc:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <_dtoa_r+0x330>)
 80069fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a06:	f7f9 ff21 	bl	800084c <__aeabi_ddiv>
 8006a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8006a0e:	f006 060f 	and.w	r6, r6, #15
 8006a12:	2503      	movs	r5, #3
 8006a14:	4f1e      	ldr	r7, [pc, #120]	; (8006a90 <_dtoa_r+0x330>)
 8006a16:	e04c      	b.n	8006ab2 <_dtoa_r+0x352>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a1e:	4453      	add	r3, sl
 8006a20:	f103 0901 	add.w	r9, r3, #1
 8006a24:	9302      	str	r3, [sp, #8]
 8006a26:	464b      	mov	r3, r9
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	bfb8      	it	lt
 8006a2c:	2301      	movlt	r3, #1
 8006a2e:	e7ba      	b.n	80069a6 <_dtoa_r+0x246>
 8006a30:	2300      	movs	r3, #0
 8006a32:	e7b2      	b.n	800699a <_dtoa_r+0x23a>
 8006a34:	2300      	movs	r3, #0
 8006a36:	e7f0      	b.n	8006a1a <_dtoa_r+0x2ba>
 8006a38:	2501      	movs	r5, #1
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9306      	str	r3, [sp, #24]
 8006a3e:	950a      	str	r5, [sp, #40]	; 0x28
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	4699      	mov	r9, r3
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2312      	movs	r3, #18
 8006a4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a4e:	e7aa      	b.n	80069a6 <_dtoa_r+0x246>
 8006a50:	2301      	movs	r3, #1
 8006a52:	930a      	str	r3, [sp, #40]	; 0x28
 8006a54:	e7f4      	b.n	8006a40 <_dtoa_r+0x2e0>
 8006a56:	2301      	movs	r3, #1
 8006a58:	9302      	str	r3, [sp, #8]
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	e7f5      	b.n	8006a4c <_dtoa_r+0x2ec>
 8006a60:	3101      	adds	r1, #1
 8006a62:	6071      	str	r1, [r6, #4]
 8006a64:	0052      	lsls	r2, r2, #1
 8006a66:	e7a2      	b.n	80069ae <_dtoa_r+0x24e>
 8006a68:	636f4361 	.word	0x636f4361
 8006a6c:	3fd287a7 	.word	0x3fd287a7
 8006a70:	8b60c8b3 	.word	0x8b60c8b3
 8006a74:	3fc68a28 	.word	0x3fc68a28
 8006a78:	509f79fb 	.word	0x509f79fb
 8006a7c:	3fd34413 	.word	0x3fd34413
 8006a80:	7ff00000 	.word	0x7ff00000
 8006a84:	08008335 	.word	0x08008335
 8006a88:	3ff80000 	.word	0x3ff80000
 8006a8c:	080083f0 	.word	0x080083f0
 8006a90:	080083c8 	.word	0x080083c8
 8006a94:	08008361 	.word	0x08008361
 8006a98:	07f1      	lsls	r1, r6, #31
 8006a9a:	d508      	bpl.n	8006aae <_dtoa_r+0x34e>
 8006a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa4:	f7f9 fda8 	bl	80005f8 <__aeabi_dmul>
 8006aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006aac:	3501      	adds	r5, #1
 8006aae:	1076      	asrs	r6, r6, #1
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d1f0      	bne.n	8006a98 <_dtoa_r+0x338>
 8006ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006abe:	f7f9 fec5 	bl	800084c <__aeabi_ddiv>
 8006ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ac6:	e01a      	b.n	8006afe <_dtoa_r+0x39e>
 8006ac8:	2502      	movs	r5, #2
 8006aca:	e7a3      	b.n	8006a14 <_dtoa_r+0x2b4>
 8006acc:	f000 80a0 	beq.w	8006c10 <_dtoa_r+0x4b0>
 8006ad0:	f1ca 0600 	rsb	r6, sl, #0
 8006ad4:	4b9f      	ldr	r3, [pc, #636]	; (8006d54 <_dtoa_r+0x5f4>)
 8006ad6:	4fa0      	ldr	r7, [pc, #640]	; (8006d58 <_dtoa_r+0x5f8>)
 8006ad8:	f006 020f 	and.w	r2, r6, #15
 8006adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ae8:	f7f9 fd86 	bl	80005f8 <__aeabi_dmul>
 8006aec:	e9cd 0100 	strd	r0, r1, [sp]
 8006af0:	1136      	asrs	r6, r6, #4
 8006af2:	2300      	movs	r3, #0
 8006af4:	2502      	movs	r5, #2
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	d17f      	bne.n	8006bfa <_dtoa_r+0x49a>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e1      	bne.n	8006ac2 <_dtoa_r+0x362>
 8006afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8087 	beq.w	8006c14 <_dtoa_r+0x4b4>
 8006b06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4b93      	ldr	r3, [pc, #588]	; (8006d5c <_dtoa_r+0x5fc>)
 8006b0e:	4630      	mov	r0, r6
 8006b10:	4639      	mov	r1, r7
 8006b12:	f7f9 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d07c      	beq.n	8006c14 <_dtoa_r+0x4b4>
 8006b1a:	f1b9 0f00 	cmp.w	r9, #0
 8006b1e:	d079      	beq.n	8006c14 <_dtoa_r+0x4b4>
 8006b20:	9b02      	ldr	r3, [sp, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dd35      	ble.n	8006b92 <_dtoa_r+0x432>
 8006b26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4b8b      	ldr	r3, [pc, #556]	; (8006d60 <_dtoa_r+0x600>)
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7f9 fd60 	bl	80005f8 <__aeabi_dmul>
 8006b38:	e9cd 0100 	strd	r0, r1, [sp]
 8006b3c:	9f02      	ldr	r7, [sp, #8]
 8006b3e:	3501      	adds	r5, #1
 8006b40:	4628      	mov	r0, r5
 8006b42:	f7f9 fcef 	bl	8000524 <__aeabi_i2d>
 8006b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b4a:	f7f9 fd55 	bl	80005f8 <__aeabi_dmul>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4b84      	ldr	r3, [pc, #528]	; (8006d64 <_dtoa_r+0x604>)
 8006b52:	f7f9 fb9b 	bl	800028c <__adddf3>
 8006b56:	4605      	mov	r5, r0
 8006b58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006b5c:	2f00      	cmp	r7, #0
 8006b5e:	d15d      	bne.n	8006c1c <_dtoa_r+0x4bc>
 8006b60:	2200      	movs	r2, #0
 8006b62:	4b81      	ldr	r3, [pc, #516]	; (8006d68 <_dtoa_r+0x608>)
 8006b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b68:	f7f9 fb8e 	bl	8000288 <__aeabi_dsub>
 8006b6c:	462a      	mov	r2, r5
 8006b6e:	4633      	mov	r3, r6
 8006b70:	e9cd 0100 	strd	r0, r1, [sp]
 8006b74:	f7f9 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	f040 8288 	bne.w	800708e <_dtoa_r+0x92e>
 8006b7e:	462a      	mov	r2, r5
 8006b80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b88:	f7f9 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 827c 	bne.w	800708a <_dtoa_r+0x92a>
 8006b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b96:	e9cd 2300 	strd	r2, r3, [sp]
 8006b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f2c0 8150 	blt.w	8006e42 <_dtoa_r+0x6e2>
 8006ba2:	f1ba 0f0e 	cmp.w	sl, #14
 8006ba6:	f300 814c 	bgt.w	8006e42 <_dtoa_r+0x6e2>
 8006baa:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <_dtoa_r+0x5f4>)
 8006bac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bb0:	ed93 7b00 	vldr	d7, [r3]
 8006bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006bbc:	f280 80d8 	bge.w	8006d70 <_dtoa_r+0x610>
 8006bc0:	f1b9 0f00 	cmp.w	r9, #0
 8006bc4:	f300 80d4 	bgt.w	8006d70 <_dtoa_r+0x610>
 8006bc8:	f040 825e 	bne.w	8007088 <_dtoa_r+0x928>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4b66      	ldr	r3, [pc, #408]	; (8006d68 <_dtoa_r+0x608>)
 8006bd0:	ec51 0b17 	vmov	r0, r1, d7
 8006bd4:	f7f9 fd10 	bl	80005f8 <__aeabi_dmul>
 8006bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bdc:	f7f9 ff92 	bl	8000b04 <__aeabi_dcmpge>
 8006be0:	464f      	mov	r7, r9
 8006be2:	464e      	mov	r6, r9
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f040 8234 	bne.w	8007052 <_dtoa_r+0x8f2>
 8006bea:	2331      	movs	r3, #49	; 0x31
 8006bec:	f10b 0501 	add.w	r5, fp, #1
 8006bf0:	f88b 3000 	strb.w	r3, [fp]
 8006bf4:	f10a 0a01 	add.w	sl, sl, #1
 8006bf8:	e22f      	b.n	800705a <_dtoa_r+0x8fa>
 8006bfa:	07f2      	lsls	r2, r6, #31
 8006bfc:	d505      	bpl.n	8006c0a <_dtoa_r+0x4aa>
 8006bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c02:	f7f9 fcf9 	bl	80005f8 <__aeabi_dmul>
 8006c06:	3501      	adds	r5, #1
 8006c08:	2301      	movs	r3, #1
 8006c0a:	1076      	asrs	r6, r6, #1
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	e772      	b.n	8006af6 <_dtoa_r+0x396>
 8006c10:	2502      	movs	r5, #2
 8006c12:	e774      	b.n	8006afe <_dtoa_r+0x39e>
 8006c14:	f8cd a020 	str.w	sl, [sp, #32]
 8006c18:	464f      	mov	r7, r9
 8006c1a:	e791      	b.n	8006b40 <_dtoa_r+0x3e0>
 8006c1c:	4b4d      	ldr	r3, [pc, #308]	; (8006d54 <_dtoa_r+0x5f4>)
 8006c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d047      	beq.n	8006cbc <_dtoa_r+0x55c>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	2000      	movs	r0, #0
 8006c32:	494e      	ldr	r1, [pc, #312]	; (8006d6c <_dtoa_r+0x60c>)
 8006c34:	f7f9 fe0a 	bl	800084c <__aeabi_ddiv>
 8006c38:	462a      	mov	r2, r5
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	f7f9 fb24 	bl	8000288 <__aeabi_dsub>
 8006c40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006c44:	465d      	mov	r5, fp
 8006c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c4a:	f7f9 ff85 	bl	8000b58 <__aeabi_d2iz>
 8006c4e:	4606      	mov	r6, r0
 8006c50:	f7f9 fc68 	bl	8000524 <__aeabi_i2d>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c5c:	f7f9 fb14 	bl	8000288 <__aeabi_dsub>
 8006c60:	3630      	adds	r6, #48	; 0x30
 8006c62:	f805 6b01 	strb.w	r6, [r5], #1
 8006c66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c6e:	f7f9 ff35 	bl	8000adc <__aeabi_dcmplt>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d163      	bne.n	8006d3e <_dtoa_r+0x5de>
 8006c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	4937      	ldr	r1, [pc, #220]	; (8006d5c <_dtoa_r+0x5fc>)
 8006c7e:	f7f9 fb03 	bl	8000288 <__aeabi_dsub>
 8006c82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c86:	f7f9 ff29 	bl	8000adc <__aeabi_dcmplt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f040 80b7 	bne.w	8006dfe <_dtoa_r+0x69e>
 8006c90:	eba5 030b 	sub.w	r3, r5, fp
 8006c94:	429f      	cmp	r7, r3
 8006c96:	f77f af7c 	ble.w	8006b92 <_dtoa_r+0x432>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4b30      	ldr	r3, [pc, #192]	; (8006d60 <_dtoa_r+0x600>)
 8006c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ca2:	f7f9 fca9 	bl	80005f8 <__aeabi_dmul>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006cac:	4b2c      	ldr	r3, [pc, #176]	; (8006d60 <_dtoa_r+0x600>)
 8006cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cb2:	f7f9 fca1 	bl	80005f8 <__aeabi_dmul>
 8006cb6:	e9cd 0100 	strd	r0, r1, [sp]
 8006cba:	e7c4      	b.n	8006c46 <_dtoa_r+0x4e6>
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	4633      	mov	r3, r6
 8006cc0:	f7f9 fc9a 	bl	80005f8 <__aeabi_dmul>
 8006cc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006cc8:	eb0b 0507 	add.w	r5, fp, r7
 8006ccc:	465e      	mov	r6, fp
 8006cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cd2:	f7f9 ff41 	bl	8000b58 <__aeabi_d2iz>
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	f7f9 fc24 	bl	8000524 <__aeabi_i2d>
 8006cdc:	3730      	adds	r7, #48	; 0x30
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ce6:	f7f9 facf 	bl	8000288 <__aeabi_dsub>
 8006cea:	f806 7b01 	strb.w	r7, [r6], #1
 8006cee:	42ae      	cmp	r6, r5
 8006cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	d126      	bne.n	8006d48 <_dtoa_r+0x5e8>
 8006cfa:	4b1c      	ldr	r3, [pc, #112]	; (8006d6c <_dtoa_r+0x60c>)
 8006cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d00:	f7f9 fac4 	bl	800028c <__adddf3>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d0c:	f7f9 ff04 	bl	8000b18 <__aeabi_dcmpgt>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d174      	bne.n	8006dfe <_dtoa_r+0x69e>
 8006d14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d18:	2000      	movs	r0, #0
 8006d1a:	4914      	ldr	r1, [pc, #80]	; (8006d6c <_dtoa_r+0x60c>)
 8006d1c:	f7f9 fab4 	bl	8000288 <__aeabi_dsub>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d28:	f7f9 fed8 	bl	8000adc <__aeabi_dcmplt>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f af30 	beq.w	8006b92 <_dtoa_r+0x432>
 8006d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d36:	2b30      	cmp	r3, #48	; 0x30
 8006d38:	f105 32ff 	add.w	r2, r5, #4294967295
 8006d3c:	d002      	beq.n	8006d44 <_dtoa_r+0x5e4>
 8006d3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006d42:	e04a      	b.n	8006dda <_dtoa_r+0x67a>
 8006d44:	4615      	mov	r5, r2
 8006d46:	e7f4      	b.n	8006d32 <_dtoa_r+0x5d2>
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <_dtoa_r+0x600>)
 8006d4a:	f7f9 fc55 	bl	80005f8 <__aeabi_dmul>
 8006d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8006d52:	e7bc      	b.n	8006cce <_dtoa_r+0x56e>
 8006d54:	080083f0 	.word	0x080083f0
 8006d58:	080083c8 	.word	0x080083c8
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	40240000 	.word	0x40240000
 8006d64:	401c0000 	.word	0x401c0000
 8006d68:	40140000 	.word	0x40140000
 8006d6c:	3fe00000 	.word	0x3fe00000
 8006d70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d74:	465d      	mov	r5, fp
 8006d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 fd65 	bl	800084c <__aeabi_ddiv>
 8006d82:	f7f9 fee9 	bl	8000b58 <__aeabi_d2iz>
 8006d86:	4680      	mov	r8, r0
 8006d88:	f7f9 fbcc 	bl	8000524 <__aeabi_i2d>
 8006d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d90:	f7f9 fc32 	bl	80005f8 <__aeabi_dmul>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4630      	mov	r0, r6
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006da0:	f7f9 fa72 	bl	8000288 <__aeabi_dsub>
 8006da4:	f805 6b01 	strb.w	r6, [r5], #1
 8006da8:	eba5 060b 	sub.w	r6, r5, fp
 8006dac:	45b1      	cmp	r9, r6
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	d139      	bne.n	8006e28 <_dtoa_r+0x6c8>
 8006db4:	f7f9 fa6a 	bl	800028c <__adddf3>
 8006db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	460f      	mov	r7, r1
 8006dc0:	f7f9 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 8006dc4:	b9c8      	cbnz	r0, 8006dfa <_dtoa_r+0x69a>
 8006dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7f9 fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dd2:	b110      	cbz	r0, 8006dda <_dtoa_r+0x67a>
 8006dd4:	f018 0f01 	tst.w	r8, #1
 8006dd8:	d10f      	bne.n	8006dfa <_dtoa_r+0x69a>
 8006dda:	9904      	ldr	r1, [sp, #16]
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fc9f 	bl	8007720 <_Bfree>
 8006de2:	2300      	movs	r3, #0
 8006de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006de6:	702b      	strb	r3, [r5, #0]
 8006de8:	f10a 0301 	add.w	r3, sl, #1
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8241 	beq.w	8007278 <_dtoa_r+0xb18>
 8006df6:	601d      	str	r5, [r3, #0]
 8006df8:	e23e      	b.n	8007278 <_dtoa_r+0xb18>
 8006dfa:	f8cd a020 	str.w	sl, [sp, #32]
 8006dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e02:	2a39      	cmp	r2, #57	; 0x39
 8006e04:	f105 33ff 	add.w	r3, r5, #4294967295
 8006e08:	d108      	bne.n	8006e1c <_dtoa_r+0x6bc>
 8006e0a:	459b      	cmp	fp, r3
 8006e0c:	d10a      	bne.n	8006e24 <_dtoa_r+0x6c4>
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	3301      	adds	r3, #1
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	2330      	movs	r3, #48	; 0x30
 8006e16:	f88b 3000 	strb.w	r3, [fp]
 8006e1a:	465b      	mov	r3, fp
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	3201      	adds	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e78c      	b.n	8006d3e <_dtoa_r+0x5de>
 8006e24:	461d      	mov	r5, r3
 8006e26:	e7ea      	b.n	8006dfe <_dtoa_r+0x69e>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4b9b      	ldr	r3, [pc, #620]	; (8007098 <_dtoa_r+0x938>)
 8006e2c:	f7f9 fbe4 	bl	80005f8 <__aeabi_dmul>
 8006e30:	2200      	movs	r2, #0
 8006e32:	2300      	movs	r3, #0
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	f7f9 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d09a      	beq.n	8006d76 <_dtoa_r+0x616>
 8006e40:	e7cb      	b.n	8006dda <_dtoa_r+0x67a>
 8006e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	f000 808b 	beq.w	8006f60 <_dtoa_r+0x800>
 8006e4a:	9a06      	ldr	r2, [sp, #24]
 8006e4c:	2a01      	cmp	r2, #1
 8006e4e:	dc6e      	bgt.n	8006f2e <_dtoa_r+0x7ce>
 8006e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d067      	beq.n	8006f26 <_dtoa_r+0x7c6>
 8006e56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e5a:	9f07      	ldr	r7, [sp, #28]
 8006e5c:	9d05      	ldr	r5, [sp, #20]
 8006e5e:	9a05      	ldr	r2, [sp, #20]
 8006e60:	2101      	movs	r1, #1
 8006e62:	441a      	add	r2, r3
 8006e64:	4620      	mov	r0, r4
 8006e66:	9205      	str	r2, [sp, #20]
 8006e68:	4498      	add	r8, r3
 8006e6a:	f000 fcf9 	bl	8007860 <__i2b>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	dd0c      	ble.n	8006e8e <_dtoa_r+0x72e>
 8006e74:	f1b8 0f00 	cmp.w	r8, #0
 8006e78:	dd09      	ble.n	8006e8e <_dtoa_r+0x72e>
 8006e7a:	4545      	cmp	r5, r8
 8006e7c:	9a05      	ldr	r2, [sp, #20]
 8006e7e:	462b      	mov	r3, r5
 8006e80:	bfa8      	it	ge
 8006e82:	4643      	movge	r3, r8
 8006e84:	1ad2      	subs	r2, r2, r3
 8006e86:	9205      	str	r2, [sp, #20]
 8006e88:	1aed      	subs	r5, r5, r3
 8006e8a:	eba8 0803 	sub.w	r8, r8, r3
 8006e8e:	9b07      	ldr	r3, [sp, #28]
 8006e90:	b1eb      	cbz	r3, 8006ece <_dtoa_r+0x76e>
 8006e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d067      	beq.n	8006f68 <_dtoa_r+0x808>
 8006e98:	b18f      	cbz	r7, 8006ebe <_dtoa_r+0x75e>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fd7e 	bl	80079a0 <__pow5mult>
 8006ea4:	9a04      	ldr	r2, [sp, #16]
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 fce1 	bl	8007872 <__multiply>
 8006eb0:	9904      	ldr	r1, [sp, #16]
 8006eb2:	9008      	str	r0, [sp, #32]
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fc33 	bl	8007720 <_Bfree>
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	9304      	str	r3, [sp, #16]
 8006ebe:	9b07      	ldr	r3, [sp, #28]
 8006ec0:	1bda      	subs	r2, r3, r7
 8006ec2:	d004      	beq.n	8006ece <_dtoa_r+0x76e>
 8006ec4:	9904      	ldr	r1, [sp, #16]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fd6a 	bl	80079a0 <__pow5mult>
 8006ecc:	9004      	str	r0, [sp, #16]
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fcc5 	bl	8007860 <__i2b>
 8006ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ed8:	4607      	mov	r7, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 81d0 	beq.w	8007280 <_dtoa_r+0xb20>
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fd5b 	bl	80079a0 <__pow5mult>
 8006eea:	9b06      	ldr	r3, [sp, #24]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	4607      	mov	r7, r0
 8006ef0:	dc40      	bgt.n	8006f74 <_dtoa_r+0x814>
 8006ef2:	9b00      	ldr	r3, [sp, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d139      	bne.n	8006f6c <_dtoa_r+0x80c>
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d136      	bne.n	8006f70 <_dtoa_r+0x810>
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f08:	0d1b      	lsrs	r3, r3, #20
 8006f0a:	051b      	lsls	r3, r3, #20
 8006f0c:	b12b      	cbz	r3, 8006f1a <_dtoa_r+0x7ba>
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	f108 0801 	add.w	r8, r8, #1
 8006f18:	2301      	movs	r3, #1
 8006f1a:	9307      	str	r3, [sp, #28]
 8006f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d12a      	bne.n	8006f78 <_dtoa_r+0x818>
 8006f22:	2001      	movs	r0, #1
 8006f24:	e030      	b.n	8006f88 <_dtoa_r+0x828>
 8006f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f2c:	e795      	b.n	8006e5a <_dtoa_r+0x6fa>
 8006f2e:	9b07      	ldr	r3, [sp, #28]
 8006f30:	f109 37ff 	add.w	r7, r9, #4294967295
 8006f34:	42bb      	cmp	r3, r7
 8006f36:	bfbf      	itttt	lt
 8006f38:	9b07      	ldrlt	r3, [sp, #28]
 8006f3a:	9707      	strlt	r7, [sp, #28]
 8006f3c:	1afa      	sublt	r2, r7, r3
 8006f3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006f40:	bfbb      	ittet	lt
 8006f42:	189b      	addlt	r3, r3, r2
 8006f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006f46:	1bdf      	subge	r7, r3, r7
 8006f48:	2700      	movlt	r7, #0
 8006f4a:	f1b9 0f00 	cmp.w	r9, #0
 8006f4e:	bfb5      	itete	lt
 8006f50:	9b05      	ldrlt	r3, [sp, #20]
 8006f52:	9d05      	ldrge	r5, [sp, #20]
 8006f54:	eba3 0509 	sublt.w	r5, r3, r9
 8006f58:	464b      	movge	r3, r9
 8006f5a:	bfb8      	it	lt
 8006f5c:	2300      	movlt	r3, #0
 8006f5e:	e77e      	b.n	8006e5e <_dtoa_r+0x6fe>
 8006f60:	9f07      	ldr	r7, [sp, #28]
 8006f62:	9d05      	ldr	r5, [sp, #20]
 8006f64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f66:	e783      	b.n	8006e70 <_dtoa_r+0x710>
 8006f68:	9a07      	ldr	r2, [sp, #28]
 8006f6a:	e7ab      	b.n	8006ec4 <_dtoa_r+0x764>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e7d4      	b.n	8006f1a <_dtoa_r+0x7ba>
 8006f70:	9b00      	ldr	r3, [sp, #0]
 8006f72:	e7d2      	b.n	8006f1a <_dtoa_r+0x7ba>
 8006f74:	2300      	movs	r3, #0
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006f7e:	6918      	ldr	r0, [r3, #16]
 8006f80:	f000 fc20 	bl	80077c4 <__hi0bits>
 8006f84:	f1c0 0020 	rsb	r0, r0, #32
 8006f88:	4440      	add	r0, r8
 8006f8a:	f010 001f 	ands.w	r0, r0, #31
 8006f8e:	d047      	beq.n	8007020 <_dtoa_r+0x8c0>
 8006f90:	f1c0 0320 	rsb	r3, r0, #32
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	dd3b      	ble.n	8007010 <_dtoa_r+0x8b0>
 8006f98:	9b05      	ldr	r3, [sp, #20]
 8006f9a:	f1c0 001c 	rsb	r0, r0, #28
 8006f9e:	4403      	add	r3, r0
 8006fa0:	9305      	str	r3, [sp, #20]
 8006fa2:	4405      	add	r5, r0
 8006fa4:	4480      	add	r8, r0
 8006fa6:	9b05      	ldr	r3, [sp, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dd05      	ble.n	8006fb8 <_dtoa_r+0x858>
 8006fac:	461a      	mov	r2, r3
 8006fae:	9904      	ldr	r1, [sp, #16]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fd43 	bl	8007a3c <__lshift>
 8006fb6:	9004      	str	r0, [sp, #16]
 8006fb8:	f1b8 0f00 	cmp.w	r8, #0
 8006fbc:	dd05      	ble.n	8006fca <_dtoa_r+0x86a>
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fd3a 	bl	8007a3c <__lshift>
 8006fc8:	4607      	mov	r7, r0
 8006fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fcc:	b353      	cbz	r3, 8007024 <_dtoa_r+0x8c4>
 8006fce:	4639      	mov	r1, r7
 8006fd0:	9804      	ldr	r0, [sp, #16]
 8006fd2:	f000 fd87 	bl	8007ae4 <__mcmp>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	da24      	bge.n	8007024 <_dtoa_r+0x8c4>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	220a      	movs	r2, #10
 8006fde:	9904      	ldr	r1, [sp, #16]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fbb4 	bl	800774e <__multadd>
 8006fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe8:	9004      	str	r0, [sp, #16]
 8006fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 814d 	beq.w	800728e <_dtoa_r+0xb2e>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	220a      	movs	r2, #10
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 fba7 	bl	800774e <__multadd>
 8007000:	9b02      	ldr	r3, [sp, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	4606      	mov	r6, r0
 8007006:	dc4f      	bgt.n	80070a8 <_dtoa_r+0x948>
 8007008:	9b06      	ldr	r3, [sp, #24]
 800700a:	2b02      	cmp	r3, #2
 800700c:	dd4c      	ble.n	80070a8 <_dtoa_r+0x948>
 800700e:	e011      	b.n	8007034 <_dtoa_r+0x8d4>
 8007010:	d0c9      	beq.n	8006fa6 <_dtoa_r+0x846>
 8007012:	9a05      	ldr	r2, [sp, #20]
 8007014:	331c      	adds	r3, #28
 8007016:	441a      	add	r2, r3
 8007018:	9205      	str	r2, [sp, #20]
 800701a:	441d      	add	r5, r3
 800701c:	4498      	add	r8, r3
 800701e:	e7c2      	b.n	8006fa6 <_dtoa_r+0x846>
 8007020:	4603      	mov	r3, r0
 8007022:	e7f6      	b.n	8007012 <_dtoa_r+0x8b2>
 8007024:	f1b9 0f00 	cmp.w	r9, #0
 8007028:	dc38      	bgt.n	800709c <_dtoa_r+0x93c>
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b02      	cmp	r3, #2
 800702e:	dd35      	ble.n	800709c <_dtoa_r+0x93c>
 8007030:	f8cd 9008 	str.w	r9, [sp, #8]
 8007034:	9b02      	ldr	r3, [sp, #8]
 8007036:	b963      	cbnz	r3, 8007052 <_dtoa_r+0x8f2>
 8007038:	4639      	mov	r1, r7
 800703a:	2205      	movs	r2, #5
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fb86 	bl	800774e <__multadd>
 8007042:	4601      	mov	r1, r0
 8007044:	4607      	mov	r7, r0
 8007046:	9804      	ldr	r0, [sp, #16]
 8007048:	f000 fd4c 	bl	8007ae4 <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	f73f adcc 	bgt.w	8006bea <_dtoa_r+0x48a>
 8007052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007054:	465d      	mov	r5, fp
 8007056:	ea6f 0a03 	mvn.w	sl, r3
 800705a:	f04f 0900 	mov.w	r9, #0
 800705e:	4639      	mov	r1, r7
 8007060:	4620      	mov	r0, r4
 8007062:	f000 fb5d 	bl	8007720 <_Bfree>
 8007066:	2e00      	cmp	r6, #0
 8007068:	f43f aeb7 	beq.w	8006dda <_dtoa_r+0x67a>
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	d005      	beq.n	800707e <_dtoa_r+0x91e>
 8007072:	45b1      	cmp	r9, r6
 8007074:	d003      	beq.n	800707e <_dtoa_r+0x91e>
 8007076:	4649      	mov	r1, r9
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fb51 	bl	8007720 <_Bfree>
 800707e:	4631      	mov	r1, r6
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fb4d 	bl	8007720 <_Bfree>
 8007086:	e6a8      	b.n	8006dda <_dtoa_r+0x67a>
 8007088:	2700      	movs	r7, #0
 800708a:	463e      	mov	r6, r7
 800708c:	e7e1      	b.n	8007052 <_dtoa_r+0x8f2>
 800708e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007092:	463e      	mov	r6, r7
 8007094:	e5a9      	b.n	8006bea <_dtoa_r+0x48a>
 8007096:	bf00      	nop
 8007098:	40240000 	.word	0x40240000
 800709c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709e:	f8cd 9008 	str.w	r9, [sp, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80fa 	beq.w	800729c <_dtoa_r+0xb3c>
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	dd05      	ble.n	80070b8 <_dtoa_r+0x958>
 80070ac:	4631      	mov	r1, r6
 80070ae:	462a      	mov	r2, r5
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fcc3 	bl	8007a3c <__lshift>
 80070b6:	4606      	mov	r6, r0
 80070b8:	9b07      	ldr	r3, [sp, #28]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d04c      	beq.n	8007158 <_dtoa_r+0x9f8>
 80070be:	6871      	ldr	r1, [r6, #4]
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 faf9 	bl	80076b8 <_Balloc>
 80070c6:	6932      	ldr	r2, [r6, #16]
 80070c8:	3202      	adds	r2, #2
 80070ca:	4605      	mov	r5, r0
 80070cc:	0092      	lsls	r2, r2, #2
 80070ce:	f106 010c 	add.w	r1, r6, #12
 80070d2:	300c      	adds	r0, #12
 80070d4:	f7fe fd0c 	bl	8005af0 <memcpy>
 80070d8:	2201      	movs	r2, #1
 80070da:	4629      	mov	r1, r5
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fcad 	bl	8007a3c <__lshift>
 80070e2:	9b00      	ldr	r3, [sp, #0]
 80070e4:	f8cd b014 	str.w	fp, [sp, #20]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	46b1      	mov	r9, r6
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	4606      	mov	r6, r0
 80070f2:	4639      	mov	r1, r7
 80070f4:	9804      	ldr	r0, [sp, #16]
 80070f6:	f7ff faa7 	bl	8006648 <quorem>
 80070fa:	4649      	mov	r1, r9
 80070fc:	4605      	mov	r5, r0
 80070fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007102:	9804      	ldr	r0, [sp, #16]
 8007104:	f000 fcee 	bl	8007ae4 <__mcmp>
 8007108:	4632      	mov	r2, r6
 800710a:	9000      	str	r0, [sp, #0]
 800710c:	4639      	mov	r1, r7
 800710e:	4620      	mov	r0, r4
 8007110:	f000 fd02 	bl	8007b18 <__mdiff>
 8007114:	68c3      	ldr	r3, [r0, #12]
 8007116:	4602      	mov	r2, r0
 8007118:	bb03      	cbnz	r3, 800715c <_dtoa_r+0x9fc>
 800711a:	4601      	mov	r1, r0
 800711c:	9008      	str	r0, [sp, #32]
 800711e:	9804      	ldr	r0, [sp, #16]
 8007120:	f000 fce0 	bl	8007ae4 <__mcmp>
 8007124:	9a08      	ldr	r2, [sp, #32]
 8007126:	4603      	mov	r3, r0
 8007128:	4611      	mov	r1, r2
 800712a:	4620      	mov	r0, r4
 800712c:	9308      	str	r3, [sp, #32]
 800712e:	f000 faf7 	bl	8007720 <_Bfree>
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	b9a3      	cbnz	r3, 8007160 <_dtoa_r+0xa00>
 8007136:	9a06      	ldr	r2, [sp, #24]
 8007138:	b992      	cbnz	r2, 8007160 <_dtoa_r+0xa00>
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	b982      	cbnz	r2, 8007160 <_dtoa_r+0xa00>
 800713e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007142:	d029      	beq.n	8007198 <_dtoa_r+0xa38>
 8007144:	9b00      	ldr	r3, [sp, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dd01      	ble.n	800714e <_dtoa_r+0x9ee>
 800714a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800714e:	9b05      	ldr	r3, [sp, #20]
 8007150:	1c5d      	adds	r5, r3, #1
 8007152:	f883 8000 	strb.w	r8, [r3]
 8007156:	e782      	b.n	800705e <_dtoa_r+0x8fe>
 8007158:	4630      	mov	r0, r6
 800715a:	e7c2      	b.n	80070e2 <_dtoa_r+0x982>
 800715c:	2301      	movs	r3, #1
 800715e:	e7e3      	b.n	8007128 <_dtoa_r+0x9c8>
 8007160:	9a00      	ldr	r2, [sp, #0]
 8007162:	2a00      	cmp	r2, #0
 8007164:	db04      	blt.n	8007170 <_dtoa_r+0xa10>
 8007166:	d125      	bne.n	80071b4 <_dtoa_r+0xa54>
 8007168:	9a06      	ldr	r2, [sp, #24]
 800716a:	bb1a      	cbnz	r2, 80071b4 <_dtoa_r+0xa54>
 800716c:	9a07      	ldr	r2, [sp, #28]
 800716e:	bb0a      	cbnz	r2, 80071b4 <_dtoa_r+0xa54>
 8007170:	2b00      	cmp	r3, #0
 8007172:	ddec      	ble.n	800714e <_dtoa_r+0x9ee>
 8007174:	2201      	movs	r2, #1
 8007176:	9904      	ldr	r1, [sp, #16]
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fc5f 	bl	8007a3c <__lshift>
 800717e:	4639      	mov	r1, r7
 8007180:	9004      	str	r0, [sp, #16]
 8007182:	f000 fcaf 	bl	8007ae4 <__mcmp>
 8007186:	2800      	cmp	r0, #0
 8007188:	dc03      	bgt.n	8007192 <_dtoa_r+0xa32>
 800718a:	d1e0      	bne.n	800714e <_dtoa_r+0x9ee>
 800718c:	f018 0f01 	tst.w	r8, #1
 8007190:	d0dd      	beq.n	800714e <_dtoa_r+0x9ee>
 8007192:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007196:	d1d8      	bne.n	800714a <_dtoa_r+0x9ea>
 8007198:	9b05      	ldr	r3, [sp, #20]
 800719a:	9a05      	ldr	r2, [sp, #20]
 800719c:	1c5d      	adds	r5, r3, #1
 800719e:	2339      	movs	r3, #57	; 0x39
 80071a0:	7013      	strb	r3, [r2, #0]
 80071a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071a6:	2b39      	cmp	r3, #57	; 0x39
 80071a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80071ac:	d04f      	beq.n	800724e <_dtoa_r+0xaee>
 80071ae:	3301      	adds	r3, #1
 80071b0:	7013      	strb	r3, [r2, #0]
 80071b2:	e754      	b.n	800705e <_dtoa_r+0x8fe>
 80071b4:	9a05      	ldr	r2, [sp, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f102 0501 	add.w	r5, r2, #1
 80071bc:	dd06      	ble.n	80071cc <_dtoa_r+0xa6c>
 80071be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80071c2:	d0e9      	beq.n	8007198 <_dtoa_r+0xa38>
 80071c4:	f108 0801 	add.w	r8, r8, #1
 80071c8:	9b05      	ldr	r3, [sp, #20]
 80071ca:	e7c2      	b.n	8007152 <_dtoa_r+0x9f2>
 80071cc:	9a02      	ldr	r2, [sp, #8]
 80071ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80071d2:	eba5 030b 	sub.w	r3, r5, fp
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d021      	beq.n	800721e <_dtoa_r+0xabe>
 80071da:	2300      	movs	r3, #0
 80071dc:	220a      	movs	r2, #10
 80071de:	9904      	ldr	r1, [sp, #16]
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fab4 	bl	800774e <__multadd>
 80071e6:	45b1      	cmp	r9, r6
 80071e8:	9004      	str	r0, [sp, #16]
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	f04f 020a 	mov.w	r2, #10
 80071f2:	4649      	mov	r1, r9
 80071f4:	4620      	mov	r0, r4
 80071f6:	d105      	bne.n	8007204 <_dtoa_r+0xaa4>
 80071f8:	f000 faa9 	bl	800774e <__multadd>
 80071fc:	4681      	mov	r9, r0
 80071fe:	4606      	mov	r6, r0
 8007200:	9505      	str	r5, [sp, #20]
 8007202:	e776      	b.n	80070f2 <_dtoa_r+0x992>
 8007204:	f000 faa3 	bl	800774e <__multadd>
 8007208:	4631      	mov	r1, r6
 800720a:	4681      	mov	r9, r0
 800720c:	2300      	movs	r3, #0
 800720e:	220a      	movs	r2, #10
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fa9c 	bl	800774e <__multadd>
 8007216:	4606      	mov	r6, r0
 8007218:	e7f2      	b.n	8007200 <_dtoa_r+0xaa0>
 800721a:	f04f 0900 	mov.w	r9, #0
 800721e:	2201      	movs	r2, #1
 8007220:	9904      	ldr	r1, [sp, #16]
 8007222:	4620      	mov	r0, r4
 8007224:	f000 fc0a 	bl	8007a3c <__lshift>
 8007228:	4639      	mov	r1, r7
 800722a:	9004      	str	r0, [sp, #16]
 800722c:	f000 fc5a 	bl	8007ae4 <__mcmp>
 8007230:	2800      	cmp	r0, #0
 8007232:	dcb6      	bgt.n	80071a2 <_dtoa_r+0xa42>
 8007234:	d102      	bne.n	800723c <_dtoa_r+0xadc>
 8007236:	f018 0f01 	tst.w	r8, #1
 800723a:	d1b2      	bne.n	80071a2 <_dtoa_r+0xa42>
 800723c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007240:	2b30      	cmp	r3, #48	; 0x30
 8007242:	f105 32ff 	add.w	r2, r5, #4294967295
 8007246:	f47f af0a 	bne.w	800705e <_dtoa_r+0x8fe>
 800724a:	4615      	mov	r5, r2
 800724c:	e7f6      	b.n	800723c <_dtoa_r+0xadc>
 800724e:	4593      	cmp	fp, r2
 8007250:	d105      	bne.n	800725e <_dtoa_r+0xafe>
 8007252:	2331      	movs	r3, #49	; 0x31
 8007254:	f10a 0a01 	add.w	sl, sl, #1
 8007258:	f88b 3000 	strb.w	r3, [fp]
 800725c:	e6ff      	b.n	800705e <_dtoa_r+0x8fe>
 800725e:	4615      	mov	r5, r2
 8007260:	e79f      	b.n	80071a2 <_dtoa_r+0xa42>
 8007262:	f8df b064 	ldr.w	fp, [pc, #100]	; 80072c8 <_dtoa_r+0xb68>
 8007266:	e007      	b.n	8007278 <_dtoa_r+0xb18>
 8007268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80072cc <_dtoa_r+0xb6c>
 800726e:	b11b      	cbz	r3, 8007278 <_dtoa_r+0xb18>
 8007270:	f10b 0308 	add.w	r3, fp, #8
 8007274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	4658      	mov	r0, fp
 800727a:	b017      	add	sp, #92	; 0x5c
 800727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007280:	9b06      	ldr	r3, [sp, #24]
 8007282:	2b01      	cmp	r3, #1
 8007284:	f77f ae35 	ble.w	8006ef2 <_dtoa_r+0x792>
 8007288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	e649      	b.n	8006f22 <_dtoa_r+0x7c2>
 800728e:	9b02      	ldr	r3, [sp, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	dc03      	bgt.n	800729c <_dtoa_r+0xb3c>
 8007294:	9b06      	ldr	r3, [sp, #24]
 8007296:	2b02      	cmp	r3, #2
 8007298:	f73f aecc 	bgt.w	8007034 <_dtoa_r+0x8d4>
 800729c:	465d      	mov	r5, fp
 800729e:	4639      	mov	r1, r7
 80072a0:	9804      	ldr	r0, [sp, #16]
 80072a2:	f7ff f9d1 	bl	8006648 <quorem>
 80072a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80072aa:	f805 8b01 	strb.w	r8, [r5], #1
 80072ae:	9a02      	ldr	r2, [sp, #8]
 80072b0:	eba5 030b 	sub.w	r3, r5, fp
 80072b4:	429a      	cmp	r2, r3
 80072b6:	ddb0      	ble.n	800721a <_dtoa_r+0xaba>
 80072b8:	2300      	movs	r3, #0
 80072ba:	220a      	movs	r2, #10
 80072bc:	9904      	ldr	r1, [sp, #16]
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 fa45 	bl	800774e <__multadd>
 80072c4:	9004      	str	r0, [sp, #16]
 80072c6:	e7ea      	b.n	800729e <_dtoa_r+0xb3e>
 80072c8:	08008334 	.word	0x08008334
 80072cc:	08008358 	.word	0x08008358

080072d0 <__sflush_r>:
 80072d0:	898a      	ldrh	r2, [r1, #12]
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	0710      	lsls	r0, r2, #28
 80072da:	460c      	mov	r4, r1
 80072dc:	d458      	bmi.n	8007390 <__sflush_r+0xc0>
 80072de:	684b      	ldr	r3, [r1, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc05      	bgt.n	80072f0 <__sflush_r+0x20>
 80072e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dc02      	bgt.n	80072f0 <__sflush_r+0x20>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d0f9      	beq.n	80072ea <__sflush_r+0x1a>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072fc:	682f      	ldr	r7, [r5, #0]
 80072fe:	6a21      	ldr	r1, [r4, #32]
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	d032      	beq.n	800736a <__sflush_r+0x9a>
 8007304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	075a      	lsls	r2, r3, #29
 800730a:	d505      	bpl.n	8007318 <__sflush_r+0x48>
 800730c:	6863      	ldr	r3, [r4, #4]
 800730e:	1ac0      	subs	r0, r0, r3
 8007310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007312:	b10b      	cbz	r3, 8007318 <__sflush_r+0x48>
 8007314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007316:	1ac0      	subs	r0, r0, r3
 8007318:	2300      	movs	r3, #0
 800731a:	4602      	mov	r2, r0
 800731c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800731e:	6a21      	ldr	r1, [r4, #32]
 8007320:	4628      	mov	r0, r5
 8007322:	47b0      	blx	r6
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	d106      	bne.n	8007338 <__sflush_r+0x68>
 800732a:	6829      	ldr	r1, [r5, #0]
 800732c:	291d      	cmp	r1, #29
 800732e:	d848      	bhi.n	80073c2 <__sflush_r+0xf2>
 8007330:	4a29      	ldr	r2, [pc, #164]	; (80073d8 <__sflush_r+0x108>)
 8007332:	40ca      	lsrs	r2, r1
 8007334:	07d6      	lsls	r6, r2, #31
 8007336:	d544      	bpl.n	80073c2 <__sflush_r+0xf2>
 8007338:	2200      	movs	r2, #0
 800733a:	6062      	str	r2, [r4, #4]
 800733c:	04d9      	lsls	r1, r3, #19
 800733e:	6922      	ldr	r2, [r4, #16]
 8007340:	6022      	str	r2, [r4, #0]
 8007342:	d504      	bpl.n	800734e <__sflush_r+0x7e>
 8007344:	1c42      	adds	r2, r0, #1
 8007346:	d101      	bne.n	800734c <__sflush_r+0x7c>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b903      	cbnz	r3, 800734e <__sflush_r+0x7e>
 800734c:	6560      	str	r0, [r4, #84]	; 0x54
 800734e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007350:	602f      	str	r7, [r5, #0]
 8007352:	2900      	cmp	r1, #0
 8007354:	d0c9      	beq.n	80072ea <__sflush_r+0x1a>
 8007356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800735a:	4299      	cmp	r1, r3
 800735c:	d002      	beq.n	8007364 <__sflush_r+0x94>
 800735e:	4628      	mov	r0, r5
 8007360:	f000 fc94 	bl	8007c8c <_free_r>
 8007364:	2000      	movs	r0, #0
 8007366:	6360      	str	r0, [r4, #52]	; 0x34
 8007368:	e7c0      	b.n	80072ec <__sflush_r+0x1c>
 800736a:	2301      	movs	r3, #1
 800736c:	4628      	mov	r0, r5
 800736e:	47b0      	blx	r6
 8007370:	1c41      	adds	r1, r0, #1
 8007372:	d1c8      	bne.n	8007306 <__sflush_r+0x36>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c5      	beq.n	8007306 <__sflush_r+0x36>
 800737a:	2b1d      	cmp	r3, #29
 800737c:	d001      	beq.n	8007382 <__sflush_r+0xb2>
 800737e:	2b16      	cmp	r3, #22
 8007380:	d101      	bne.n	8007386 <__sflush_r+0xb6>
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	e7b1      	b.n	80072ea <__sflush_r+0x1a>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	e7ad      	b.n	80072ec <__sflush_r+0x1c>
 8007390:	690f      	ldr	r7, [r1, #16]
 8007392:	2f00      	cmp	r7, #0
 8007394:	d0a9      	beq.n	80072ea <__sflush_r+0x1a>
 8007396:	0793      	lsls	r3, r2, #30
 8007398:	680e      	ldr	r6, [r1, #0]
 800739a:	bf08      	it	eq
 800739c:	694b      	ldreq	r3, [r1, #20]
 800739e:	600f      	str	r7, [r1, #0]
 80073a0:	bf18      	it	ne
 80073a2:	2300      	movne	r3, #0
 80073a4:	eba6 0807 	sub.w	r8, r6, r7
 80073a8:	608b      	str	r3, [r1, #8]
 80073aa:	f1b8 0f00 	cmp.w	r8, #0
 80073ae:	dd9c      	ble.n	80072ea <__sflush_r+0x1a>
 80073b0:	4643      	mov	r3, r8
 80073b2:	463a      	mov	r2, r7
 80073b4:	6a21      	ldr	r1, [r4, #32]
 80073b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073b8:	4628      	mov	r0, r5
 80073ba:	47b0      	blx	r6
 80073bc:	2800      	cmp	r0, #0
 80073be:	dc06      	bgt.n	80073ce <__sflush_r+0xfe>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	e78e      	b.n	80072ec <__sflush_r+0x1c>
 80073ce:	4407      	add	r7, r0
 80073d0:	eba8 0800 	sub.w	r8, r8, r0
 80073d4:	e7e9      	b.n	80073aa <__sflush_r+0xda>
 80073d6:	bf00      	nop
 80073d8:	20400001 	.word	0x20400001

080073dc <_fflush_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b1db      	cbz	r3, 800741e <_fflush_r+0x42>
 80073e6:	b118      	cbz	r0, 80073f0 <_fflush_r+0x14>
 80073e8:	6983      	ldr	r3, [r0, #24]
 80073ea:	b90b      	cbnz	r3, 80073f0 <_fflush_r+0x14>
 80073ec:	f000 f860 	bl	80074b0 <__sinit>
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <_fflush_r+0x48>)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	d109      	bne.n	800740a <_fflush_r+0x2e>
 80073f6:	686c      	ldr	r4, [r5, #4]
 80073f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073fc:	b17b      	cbz	r3, 800741e <_fflush_r+0x42>
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007406:	f7ff bf63 	b.w	80072d0 <__sflush_r>
 800740a:	4b07      	ldr	r3, [pc, #28]	; (8007428 <_fflush_r+0x4c>)
 800740c:	429c      	cmp	r4, r3
 800740e:	d101      	bne.n	8007414 <_fflush_r+0x38>
 8007410:	68ac      	ldr	r4, [r5, #8]
 8007412:	e7f1      	b.n	80073f8 <_fflush_r+0x1c>
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <_fflush_r+0x50>)
 8007416:	429c      	cmp	r4, r3
 8007418:	bf08      	it	eq
 800741a:	68ec      	ldreq	r4, [r5, #12]
 800741c:	e7ec      	b.n	80073f8 <_fflush_r+0x1c>
 800741e:	2000      	movs	r0, #0
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	bf00      	nop
 8007424:	08008388 	.word	0x08008388
 8007428:	080083a8 	.word	0x080083a8
 800742c:	08008368 	.word	0x08008368

08007430 <std>:
 8007430:	2300      	movs	r3, #0
 8007432:	b510      	push	{r4, lr}
 8007434:	4604      	mov	r4, r0
 8007436:	e9c0 3300 	strd	r3, r3, [r0]
 800743a:	6083      	str	r3, [r0, #8]
 800743c:	8181      	strh	r1, [r0, #12]
 800743e:	6643      	str	r3, [r0, #100]	; 0x64
 8007440:	81c2      	strh	r2, [r0, #14]
 8007442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007446:	6183      	str	r3, [r0, #24]
 8007448:	4619      	mov	r1, r3
 800744a:	2208      	movs	r2, #8
 800744c:	305c      	adds	r0, #92	; 0x5c
 800744e:	f7fe fb5a 	bl	8005b06 <memset>
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <std+0x38>)
 8007454:	6263      	str	r3, [r4, #36]	; 0x24
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <std+0x3c>)
 8007458:	62a3      	str	r3, [r4, #40]	; 0x28
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <std+0x40>)
 800745c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800745e:	4b05      	ldr	r3, [pc, #20]	; (8007474 <std+0x44>)
 8007460:	6224      	str	r4, [r4, #32]
 8007462:	6323      	str	r3, [r4, #48]	; 0x30
 8007464:	bd10      	pop	{r4, pc}
 8007466:	bf00      	nop
 8007468:	0800807d 	.word	0x0800807d
 800746c:	0800809f 	.word	0x0800809f
 8007470:	080080d7 	.word	0x080080d7
 8007474:	080080fb 	.word	0x080080fb

08007478 <_cleanup_r>:
 8007478:	4901      	ldr	r1, [pc, #4]	; (8007480 <_cleanup_r+0x8>)
 800747a:	f000 b885 	b.w	8007588 <_fwalk_reent>
 800747e:	bf00      	nop
 8007480:	080073dd 	.word	0x080073dd

08007484 <__sfmoreglue>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	1e4a      	subs	r2, r1, #1
 8007488:	2568      	movs	r5, #104	; 0x68
 800748a:	4355      	muls	r5, r2
 800748c:	460e      	mov	r6, r1
 800748e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007492:	f000 fc49 	bl	8007d28 <_malloc_r>
 8007496:	4604      	mov	r4, r0
 8007498:	b140      	cbz	r0, 80074ac <__sfmoreglue+0x28>
 800749a:	2100      	movs	r1, #0
 800749c:	e9c0 1600 	strd	r1, r6, [r0]
 80074a0:	300c      	adds	r0, #12
 80074a2:	60a0      	str	r0, [r4, #8]
 80074a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074a8:	f7fe fb2d 	bl	8005b06 <memset>
 80074ac:	4620      	mov	r0, r4
 80074ae:	bd70      	pop	{r4, r5, r6, pc}

080074b0 <__sinit>:
 80074b0:	6983      	ldr	r3, [r0, #24]
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	bb33      	cbnz	r3, 8007506 <__sinit+0x56>
 80074b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80074bc:	6503      	str	r3, [r0, #80]	; 0x50
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <__sinit+0x58>)
 80074c0:	4a12      	ldr	r2, [pc, #72]	; (800750c <__sinit+0x5c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6282      	str	r2, [r0, #40]	; 0x28
 80074c6:	4298      	cmp	r0, r3
 80074c8:	bf04      	itt	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	6183      	streq	r3, [r0, #24]
 80074ce:	f000 f81f 	bl	8007510 <__sfp>
 80074d2:	6060      	str	r0, [r4, #4]
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 f81b 	bl	8007510 <__sfp>
 80074da:	60a0      	str	r0, [r4, #8]
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 f817 	bl	8007510 <__sfp>
 80074e2:	2200      	movs	r2, #0
 80074e4:	60e0      	str	r0, [r4, #12]
 80074e6:	2104      	movs	r1, #4
 80074e8:	6860      	ldr	r0, [r4, #4]
 80074ea:	f7ff ffa1 	bl	8007430 <std>
 80074ee:	2201      	movs	r2, #1
 80074f0:	2109      	movs	r1, #9
 80074f2:	68a0      	ldr	r0, [r4, #8]
 80074f4:	f7ff ff9c 	bl	8007430 <std>
 80074f8:	2202      	movs	r2, #2
 80074fa:	2112      	movs	r1, #18
 80074fc:	68e0      	ldr	r0, [r4, #12]
 80074fe:	f7ff ff97 	bl	8007430 <std>
 8007502:	2301      	movs	r3, #1
 8007504:	61a3      	str	r3, [r4, #24]
 8007506:	bd10      	pop	{r4, pc}
 8007508:	08008320 	.word	0x08008320
 800750c:	08007479 	.word	0x08007479

08007510 <__sfp>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <__sfp+0x70>)
 8007514:	681e      	ldr	r6, [r3, #0]
 8007516:	69b3      	ldr	r3, [r6, #24]
 8007518:	4607      	mov	r7, r0
 800751a:	b913      	cbnz	r3, 8007522 <__sfp+0x12>
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffc7 	bl	80074b0 <__sinit>
 8007522:	3648      	adds	r6, #72	; 0x48
 8007524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	d503      	bpl.n	8007534 <__sfp+0x24>
 800752c:	6833      	ldr	r3, [r6, #0]
 800752e:	b133      	cbz	r3, 800753e <__sfp+0x2e>
 8007530:	6836      	ldr	r6, [r6, #0]
 8007532:	e7f7      	b.n	8007524 <__sfp+0x14>
 8007534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007538:	b16d      	cbz	r5, 8007556 <__sfp+0x46>
 800753a:	3468      	adds	r4, #104	; 0x68
 800753c:	e7f4      	b.n	8007528 <__sfp+0x18>
 800753e:	2104      	movs	r1, #4
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff ff9f 	bl	8007484 <__sfmoreglue>
 8007546:	6030      	str	r0, [r6, #0]
 8007548:	2800      	cmp	r0, #0
 800754a:	d1f1      	bne.n	8007530 <__sfp+0x20>
 800754c:	230c      	movs	r3, #12
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	4604      	mov	r4, r0
 8007552:	4620      	mov	r0, r4
 8007554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <__sfp+0x74>)
 8007558:	6665      	str	r5, [r4, #100]	; 0x64
 800755a:	e9c4 5500 	strd	r5, r5, [r4]
 800755e:	60a5      	str	r5, [r4, #8]
 8007560:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007564:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007568:	2208      	movs	r2, #8
 800756a:	4629      	mov	r1, r5
 800756c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007570:	f7fe fac9 	bl	8005b06 <memset>
 8007574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800757c:	e7e9      	b.n	8007552 <__sfp+0x42>
 800757e:	bf00      	nop
 8007580:	08008320 	.word	0x08008320
 8007584:	ffff0001 	.word	0xffff0001

08007588 <_fwalk_reent>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	4680      	mov	r8, r0
 800758e:	4689      	mov	r9, r1
 8007590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007594:	2600      	movs	r6, #0
 8007596:	b914      	cbnz	r4, 800759e <_fwalk_reent+0x16>
 8007598:	4630      	mov	r0, r6
 800759a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80075a2:	3f01      	subs	r7, #1
 80075a4:	d501      	bpl.n	80075aa <_fwalk_reent+0x22>
 80075a6:	6824      	ldr	r4, [r4, #0]
 80075a8:	e7f5      	b.n	8007596 <_fwalk_reent+0xe>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d907      	bls.n	80075c0 <_fwalk_reent+0x38>
 80075b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b4:	3301      	adds	r3, #1
 80075b6:	d003      	beq.n	80075c0 <_fwalk_reent+0x38>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4640      	mov	r0, r8
 80075bc:	47c8      	blx	r9
 80075be:	4306      	orrs	r6, r0
 80075c0:	3568      	adds	r5, #104	; 0x68
 80075c2:	e7ee      	b.n	80075a2 <_fwalk_reent+0x1a>

080075c4 <_localeconv_r>:
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <_localeconv_r+0x14>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6a18      	ldr	r0, [r3, #32]
 80075ca:	4b04      	ldr	r3, [pc, #16]	; (80075dc <_localeconv_r+0x18>)
 80075cc:	2800      	cmp	r0, #0
 80075ce:	bf08      	it	eq
 80075d0:	4618      	moveq	r0, r3
 80075d2:	30f0      	adds	r0, #240	; 0xf0
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000028 	.word	0x20000028
 80075dc:	2000008c 	.word	0x2000008c

080075e0 <__swhatbuf_r>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	460e      	mov	r6, r1
 80075e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	b096      	sub	sp, #88	; 0x58
 80075ec:	4614      	mov	r4, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	da07      	bge.n	8007602 <__swhatbuf_r+0x22>
 80075f2:	2300      	movs	r3, #0
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	89b3      	ldrh	r3, [r6, #12]
 80075f8:	061a      	lsls	r2, r3, #24
 80075fa:	d410      	bmi.n	800761e <__swhatbuf_r+0x3e>
 80075fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007600:	e00e      	b.n	8007620 <__swhatbuf_r+0x40>
 8007602:	466a      	mov	r2, sp
 8007604:	f000 fda0 	bl	8008148 <_fstat_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	dbf2      	blt.n	80075f2 <__swhatbuf_r+0x12>
 800760c:	9a01      	ldr	r2, [sp, #4]
 800760e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007616:	425a      	negs	r2, r3
 8007618:	415a      	adcs	r2, r3
 800761a:	602a      	str	r2, [r5, #0]
 800761c:	e7ee      	b.n	80075fc <__swhatbuf_r+0x1c>
 800761e:	2340      	movs	r3, #64	; 0x40
 8007620:	2000      	movs	r0, #0
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	b016      	add	sp, #88	; 0x58
 8007626:	bd70      	pop	{r4, r5, r6, pc}

08007628 <__smakebuf_r>:
 8007628:	898b      	ldrh	r3, [r1, #12]
 800762a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800762c:	079d      	lsls	r5, r3, #30
 800762e:	4606      	mov	r6, r0
 8007630:	460c      	mov	r4, r1
 8007632:	d507      	bpl.n	8007644 <__smakebuf_r+0x1c>
 8007634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	2301      	movs	r3, #1
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	b002      	add	sp, #8
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	ab01      	add	r3, sp, #4
 8007646:	466a      	mov	r2, sp
 8007648:	f7ff ffca 	bl	80075e0 <__swhatbuf_r>
 800764c:	9900      	ldr	r1, [sp, #0]
 800764e:	4605      	mov	r5, r0
 8007650:	4630      	mov	r0, r6
 8007652:	f000 fb69 	bl	8007d28 <_malloc_r>
 8007656:	b948      	cbnz	r0, 800766c <__smakebuf_r+0x44>
 8007658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765c:	059a      	lsls	r2, r3, #22
 800765e:	d4ef      	bmi.n	8007640 <__smakebuf_r+0x18>
 8007660:	f023 0303 	bic.w	r3, r3, #3
 8007664:	f043 0302 	orr.w	r3, r3, #2
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	e7e3      	b.n	8007634 <__smakebuf_r+0xc>
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <__smakebuf_r+0x7c>)
 800766e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	6020      	str	r0, [r4, #0]
 8007674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	6163      	str	r3, [r4, #20]
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	6120      	str	r0, [r4, #16]
 8007682:	b15b      	cbz	r3, 800769c <__smakebuf_r+0x74>
 8007684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007688:	4630      	mov	r0, r6
 800768a:	f000 fd6f 	bl	800816c <_isatty_r>
 800768e:	b128      	cbz	r0, 800769c <__smakebuf_r+0x74>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	431d      	orrs	r5, r3
 80076a0:	81a5      	strh	r5, [r4, #12]
 80076a2:	e7cd      	b.n	8007640 <__smakebuf_r+0x18>
 80076a4:	08007479 	.word	0x08007479

080076a8 <malloc>:
 80076a8:	4b02      	ldr	r3, [pc, #8]	; (80076b4 <malloc+0xc>)
 80076aa:	4601      	mov	r1, r0
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	f000 bb3b 	b.w	8007d28 <_malloc_r>
 80076b2:	bf00      	nop
 80076b4:	20000028 	.word	0x20000028

080076b8 <_Balloc>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076bc:	4604      	mov	r4, r0
 80076be:	460e      	mov	r6, r1
 80076c0:	b93d      	cbnz	r5, 80076d2 <_Balloc+0x1a>
 80076c2:	2010      	movs	r0, #16
 80076c4:	f7ff fff0 	bl	80076a8 <malloc>
 80076c8:	6260      	str	r0, [r4, #36]	; 0x24
 80076ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076ce:	6005      	str	r5, [r0, #0]
 80076d0:	60c5      	str	r5, [r0, #12]
 80076d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80076d4:	68eb      	ldr	r3, [r5, #12]
 80076d6:	b183      	cbz	r3, 80076fa <_Balloc+0x42>
 80076d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076e0:	b9b8      	cbnz	r0, 8007712 <_Balloc+0x5a>
 80076e2:	2101      	movs	r1, #1
 80076e4:	fa01 f506 	lsl.w	r5, r1, r6
 80076e8:	1d6a      	adds	r2, r5, #5
 80076ea:	0092      	lsls	r2, r2, #2
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fabf 	bl	8007c70 <_calloc_r>
 80076f2:	b160      	cbz	r0, 800770e <_Balloc+0x56>
 80076f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80076f8:	e00e      	b.n	8007718 <_Balloc+0x60>
 80076fa:	2221      	movs	r2, #33	; 0x21
 80076fc:	2104      	movs	r1, #4
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 fab6 	bl	8007c70 <_calloc_r>
 8007704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007706:	60e8      	str	r0, [r5, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e4      	bne.n	80076d8 <_Balloc+0x20>
 800770e:	2000      	movs	r0, #0
 8007710:	bd70      	pop	{r4, r5, r6, pc}
 8007712:	6802      	ldr	r2, [r0, #0]
 8007714:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007718:	2300      	movs	r3, #0
 800771a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800771e:	e7f7      	b.n	8007710 <_Balloc+0x58>

08007720 <_Bfree>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007724:	4606      	mov	r6, r0
 8007726:	460d      	mov	r5, r1
 8007728:	b93c      	cbnz	r4, 800773a <_Bfree+0x1a>
 800772a:	2010      	movs	r0, #16
 800772c:	f7ff ffbc 	bl	80076a8 <malloc>
 8007730:	6270      	str	r0, [r6, #36]	; 0x24
 8007732:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007736:	6004      	str	r4, [r0, #0]
 8007738:	60c4      	str	r4, [r0, #12]
 800773a:	b13d      	cbz	r5, 800774c <_Bfree+0x2c>
 800773c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800773e:	686a      	ldr	r2, [r5, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007746:	6029      	str	r1, [r5, #0]
 8007748:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800774c:	bd70      	pop	{r4, r5, r6, pc}

0800774e <__multadd>:
 800774e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007752:	690d      	ldr	r5, [r1, #16]
 8007754:	461f      	mov	r7, r3
 8007756:	4606      	mov	r6, r0
 8007758:	460c      	mov	r4, r1
 800775a:	f101 0c14 	add.w	ip, r1, #20
 800775e:	2300      	movs	r3, #0
 8007760:	f8dc 0000 	ldr.w	r0, [ip]
 8007764:	b281      	uxth	r1, r0
 8007766:	fb02 7101 	mla	r1, r2, r1, r7
 800776a:	0c0f      	lsrs	r7, r1, #16
 800776c:	0c00      	lsrs	r0, r0, #16
 800776e:	fb02 7000 	mla	r0, r2, r0, r7
 8007772:	b289      	uxth	r1, r1
 8007774:	3301      	adds	r3, #1
 8007776:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800777a:	429d      	cmp	r5, r3
 800777c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007780:	f84c 1b04 	str.w	r1, [ip], #4
 8007784:	dcec      	bgt.n	8007760 <__multadd+0x12>
 8007786:	b1d7      	cbz	r7, 80077be <__multadd+0x70>
 8007788:	68a3      	ldr	r3, [r4, #8]
 800778a:	42ab      	cmp	r3, r5
 800778c:	dc12      	bgt.n	80077b4 <__multadd+0x66>
 800778e:	6861      	ldr	r1, [r4, #4]
 8007790:	4630      	mov	r0, r6
 8007792:	3101      	adds	r1, #1
 8007794:	f7ff ff90 	bl	80076b8 <_Balloc>
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	3202      	adds	r2, #2
 800779c:	f104 010c 	add.w	r1, r4, #12
 80077a0:	4680      	mov	r8, r0
 80077a2:	0092      	lsls	r2, r2, #2
 80077a4:	300c      	adds	r0, #12
 80077a6:	f7fe f9a3 	bl	8005af0 <memcpy>
 80077aa:	4621      	mov	r1, r4
 80077ac:	4630      	mov	r0, r6
 80077ae:	f7ff ffb7 	bl	8007720 <_Bfree>
 80077b2:	4644      	mov	r4, r8
 80077b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077b8:	3501      	adds	r5, #1
 80077ba:	615f      	str	r7, [r3, #20]
 80077bc:	6125      	str	r5, [r4, #16]
 80077be:	4620      	mov	r0, r4
 80077c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077c4 <__hi0bits>:
 80077c4:	0c02      	lsrs	r2, r0, #16
 80077c6:	0412      	lsls	r2, r2, #16
 80077c8:	4603      	mov	r3, r0
 80077ca:	b9b2      	cbnz	r2, 80077fa <__hi0bits+0x36>
 80077cc:	0403      	lsls	r3, r0, #16
 80077ce:	2010      	movs	r0, #16
 80077d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80077d4:	bf04      	itt	eq
 80077d6:	021b      	lsleq	r3, r3, #8
 80077d8:	3008      	addeq	r0, #8
 80077da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80077de:	bf04      	itt	eq
 80077e0:	011b      	lsleq	r3, r3, #4
 80077e2:	3004      	addeq	r0, #4
 80077e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80077e8:	bf04      	itt	eq
 80077ea:	009b      	lsleq	r3, r3, #2
 80077ec:	3002      	addeq	r0, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	db06      	blt.n	8007800 <__hi0bits+0x3c>
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	d503      	bpl.n	80077fe <__hi0bits+0x3a>
 80077f6:	3001      	adds	r0, #1
 80077f8:	4770      	bx	lr
 80077fa:	2000      	movs	r0, #0
 80077fc:	e7e8      	b.n	80077d0 <__hi0bits+0xc>
 80077fe:	2020      	movs	r0, #32
 8007800:	4770      	bx	lr

08007802 <__lo0bits>:
 8007802:	6803      	ldr	r3, [r0, #0]
 8007804:	f013 0207 	ands.w	r2, r3, #7
 8007808:	4601      	mov	r1, r0
 800780a:	d00b      	beq.n	8007824 <__lo0bits+0x22>
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	d423      	bmi.n	8007858 <__lo0bits+0x56>
 8007810:	0798      	lsls	r0, r3, #30
 8007812:	bf49      	itett	mi
 8007814:	085b      	lsrmi	r3, r3, #1
 8007816:	089b      	lsrpl	r3, r3, #2
 8007818:	2001      	movmi	r0, #1
 800781a:	600b      	strmi	r3, [r1, #0]
 800781c:	bf5c      	itt	pl
 800781e:	600b      	strpl	r3, [r1, #0]
 8007820:	2002      	movpl	r0, #2
 8007822:	4770      	bx	lr
 8007824:	b298      	uxth	r0, r3
 8007826:	b9a8      	cbnz	r0, 8007854 <__lo0bits+0x52>
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	2010      	movs	r0, #16
 800782c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007830:	bf04      	itt	eq
 8007832:	0a1b      	lsreq	r3, r3, #8
 8007834:	3008      	addeq	r0, #8
 8007836:	071a      	lsls	r2, r3, #28
 8007838:	bf04      	itt	eq
 800783a:	091b      	lsreq	r3, r3, #4
 800783c:	3004      	addeq	r0, #4
 800783e:	079a      	lsls	r2, r3, #30
 8007840:	bf04      	itt	eq
 8007842:	089b      	lsreq	r3, r3, #2
 8007844:	3002      	addeq	r0, #2
 8007846:	07da      	lsls	r2, r3, #31
 8007848:	d402      	bmi.n	8007850 <__lo0bits+0x4e>
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	d006      	beq.n	800785c <__lo0bits+0x5a>
 800784e:	3001      	adds	r0, #1
 8007850:	600b      	str	r3, [r1, #0]
 8007852:	4770      	bx	lr
 8007854:	4610      	mov	r0, r2
 8007856:	e7e9      	b.n	800782c <__lo0bits+0x2a>
 8007858:	2000      	movs	r0, #0
 800785a:	4770      	bx	lr
 800785c:	2020      	movs	r0, #32
 800785e:	4770      	bx	lr

08007860 <__i2b>:
 8007860:	b510      	push	{r4, lr}
 8007862:	460c      	mov	r4, r1
 8007864:	2101      	movs	r1, #1
 8007866:	f7ff ff27 	bl	80076b8 <_Balloc>
 800786a:	2201      	movs	r2, #1
 800786c:	6144      	str	r4, [r0, #20]
 800786e:	6102      	str	r2, [r0, #16]
 8007870:	bd10      	pop	{r4, pc}

08007872 <__multiply>:
 8007872:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007876:	4614      	mov	r4, r2
 8007878:	690a      	ldr	r2, [r1, #16]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	bfb8      	it	lt
 8007880:	460b      	movlt	r3, r1
 8007882:	4688      	mov	r8, r1
 8007884:	bfbc      	itt	lt
 8007886:	46a0      	movlt	r8, r4
 8007888:	461c      	movlt	r4, r3
 800788a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800788e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007896:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800789a:	eb07 0609 	add.w	r6, r7, r9
 800789e:	42b3      	cmp	r3, r6
 80078a0:	bfb8      	it	lt
 80078a2:	3101      	addlt	r1, #1
 80078a4:	f7ff ff08 	bl	80076b8 <_Balloc>
 80078a8:	f100 0514 	add.w	r5, r0, #20
 80078ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80078b0:	462b      	mov	r3, r5
 80078b2:	2200      	movs	r2, #0
 80078b4:	4573      	cmp	r3, lr
 80078b6:	d316      	bcc.n	80078e6 <__multiply+0x74>
 80078b8:	f104 0214 	add.w	r2, r4, #20
 80078bc:	f108 0114 	add.w	r1, r8, #20
 80078c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80078c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	9201      	str	r2, [sp, #4]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d80c      	bhi.n	80078ec <__multiply+0x7a>
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	dd03      	ble.n	80078de <__multiply+0x6c>
 80078d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d05d      	beq.n	800799a <__multiply+0x128>
 80078de:	6106      	str	r6, [r0, #16]
 80078e0:	b003      	add	sp, #12
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e6:	f843 2b04 	str.w	r2, [r3], #4
 80078ea:	e7e3      	b.n	80078b4 <__multiply+0x42>
 80078ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80078f0:	f1bb 0f00 	cmp.w	fp, #0
 80078f4:	d023      	beq.n	800793e <__multiply+0xcc>
 80078f6:	4689      	mov	r9, r1
 80078f8:	46ac      	mov	ip, r5
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8007902:	f8dc a000 	ldr.w	sl, [ip]
 8007906:	b2a3      	uxth	r3, r4
 8007908:	fa1f fa8a 	uxth.w	sl, sl
 800790c:	fb0b a303 	mla	r3, fp, r3, sl
 8007910:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007914:	f8dc 4000 	ldr.w	r4, [ip]
 8007918:	4443      	add	r3, r8
 800791a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800791e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007922:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007926:	46e2      	mov	sl, ip
 8007928:	b29b      	uxth	r3, r3
 800792a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800792e:	454f      	cmp	r7, r9
 8007930:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007934:	f84a 3b04 	str.w	r3, [sl], #4
 8007938:	d82b      	bhi.n	8007992 <__multiply+0x120>
 800793a:	f8cc 8004 	str.w	r8, [ip, #4]
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007944:	3204      	adds	r2, #4
 8007946:	f1ba 0f00 	cmp.w	sl, #0
 800794a:	d020      	beq.n	800798e <__multiply+0x11c>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	4689      	mov	r9, r1
 8007950:	46a8      	mov	r8, r5
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	f8b9 c000 	ldrh.w	ip, [r9]
 800795a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800795e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007962:	445c      	add	r4, fp
 8007964:	46c4      	mov	ip, r8
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800796c:	f84c 3b04 	str.w	r3, [ip], #4
 8007970:	f859 3b04 	ldr.w	r3, [r9], #4
 8007974:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007978:	0c1b      	lsrs	r3, r3, #16
 800797a:	fb0a b303 	mla	r3, sl, r3, fp
 800797e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007982:	454f      	cmp	r7, r9
 8007984:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007988:	d805      	bhi.n	8007996 <__multiply+0x124>
 800798a:	f8c8 3004 	str.w	r3, [r8, #4]
 800798e:	3504      	adds	r5, #4
 8007990:	e79b      	b.n	80078ca <__multiply+0x58>
 8007992:	46d4      	mov	ip, sl
 8007994:	e7b3      	b.n	80078fe <__multiply+0x8c>
 8007996:	46e0      	mov	r8, ip
 8007998:	e7dd      	b.n	8007956 <__multiply+0xe4>
 800799a:	3e01      	subs	r6, #1
 800799c:	e799      	b.n	80078d2 <__multiply+0x60>
	...

080079a0 <__pow5mult>:
 80079a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a4:	4615      	mov	r5, r2
 80079a6:	f012 0203 	ands.w	r2, r2, #3
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	d007      	beq.n	80079c0 <__pow5mult+0x20>
 80079b0:	3a01      	subs	r2, #1
 80079b2:	4c21      	ldr	r4, [pc, #132]	; (8007a38 <__pow5mult+0x98>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079ba:	f7ff fec8 	bl	800774e <__multadd>
 80079be:	4607      	mov	r7, r0
 80079c0:	10ad      	asrs	r5, r5, #2
 80079c2:	d035      	beq.n	8007a30 <__pow5mult+0x90>
 80079c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079c6:	b93c      	cbnz	r4, 80079d8 <__pow5mult+0x38>
 80079c8:	2010      	movs	r0, #16
 80079ca:	f7ff fe6d 	bl	80076a8 <malloc>
 80079ce:	6270      	str	r0, [r6, #36]	; 0x24
 80079d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079d4:	6004      	str	r4, [r0, #0]
 80079d6:	60c4      	str	r4, [r0, #12]
 80079d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079e0:	b94c      	cbnz	r4, 80079f6 <__pow5mult+0x56>
 80079e2:	f240 2171 	movw	r1, #625	; 0x271
 80079e6:	4630      	mov	r0, r6
 80079e8:	f7ff ff3a 	bl	8007860 <__i2b>
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80079f2:	4604      	mov	r4, r0
 80079f4:	6003      	str	r3, [r0, #0]
 80079f6:	f04f 0800 	mov.w	r8, #0
 80079fa:	07eb      	lsls	r3, r5, #31
 80079fc:	d50a      	bpl.n	8007a14 <__pow5mult+0x74>
 80079fe:	4639      	mov	r1, r7
 8007a00:	4622      	mov	r2, r4
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ff35 	bl	8007872 <__multiply>
 8007a08:	4639      	mov	r1, r7
 8007a0a:	4681      	mov	r9, r0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fe87 	bl	8007720 <_Bfree>
 8007a12:	464f      	mov	r7, r9
 8007a14:	106d      	asrs	r5, r5, #1
 8007a16:	d00b      	beq.n	8007a30 <__pow5mult+0x90>
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	b938      	cbnz	r0, 8007a2c <__pow5mult+0x8c>
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7ff ff26 	bl	8007872 <__multiply>
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	f8c0 8000 	str.w	r8, [r0]
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e7e4      	b.n	80079fa <__pow5mult+0x5a>
 8007a30:	4638      	mov	r0, r7
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	bf00      	nop
 8007a38:	080084b8 	.word	0x080084b8

08007a3c <__lshift>:
 8007a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	460c      	mov	r4, r1
 8007a42:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	6849      	ldr	r1, [r1, #4]
 8007a4a:	eb0a 0903 	add.w	r9, sl, r3
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	4607      	mov	r7, r0
 8007a52:	4616      	mov	r6, r2
 8007a54:	f109 0501 	add.w	r5, r9, #1
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	db32      	blt.n	8007ac2 <__lshift+0x86>
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f7ff fe2b 	bl	80076b8 <_Balloc>
 8007a62:	2300      	movs	r3, #0
 8007a64:	4680      	mov	r8, r0
 8007a66:	f100 0114 	add.w	r1, r0, #20
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4553      	cmp	r3, sl
 8007a6e:	db2b      	blt.n	8007ac8 <__lshift+0x8c>
 8007a70:	6920      	ldr	r0, [r4, #16]
 8007a72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a76:	f104 0314 	add.w	r3, r4, #20
 8007a7a:	f016 021f 	ands.w	r2, r6, #31
 8007a7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a86:	d025      	beq.n	8007ad4 <__lshift+0x98>
 8007a88:	f1c2 0e20 	rsb	lr, r2, #32
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	681e      	ldr	r6, [r3, #0]
 8007a90:	468a      	mov	sl, r1
 8007a92:	4096      	lsls	r6, r2
 8007a94:	4330      	orrs	r0, r6
 8007a96:	f84a 0b04 	str.w	r0, [sl], #4
 8007a9a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a9e:	459c      	cmp	ip, r3
 8007aa0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007aa4:	d814      	bhi.n	8007ad0 <__lshift+0x94>
 8007aa6:	6048      	str	r0, [r1, #4]
 8007aa8:	b108      	cbz	r0, 8007aae <__lshift+0x72>
 8007aaa:	f109 0502 	add.w	r5, r9, #2
 8007aae:	3d01      	subs	r5, #1
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f7ff fe32 	bl	8007720 <_Bfree>
 8007abc:	4640      	mov	r0, r8
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	3101      	adds	r1, #1
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	e7c7      	b.n	8007a58 <__lshift+0x1c>
 8007ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007acc:	3301      	adds	r3, #1
 8007ace:	e7cd      	b.n	8007a6c <__lshift+0x30>
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	e7dc      	b.n	8007a8e <__lshift+0x52>
 8007ad4:	3904      	subs	r1, #4
 8007ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ada:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ade:	459c      	cmp	ip, r3
 8007ae0:	d8f9      	bhi.n	8007ad6 <__lshift+0x9a>
 8007ae2:	e7e4      	b.n	8007aae <__lshift+0x72>

08007ae4 <__mcmp>:
 8007ae4:	6903      	ldr	r3, [r0, #16]
 8007ae6:	690a      	ldr	r2, [r1, #16]
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	b530      	push	{r4, r5, lr}
 8007aec:	d10c      	bne.n	8007b08 <__mcmp+0x24>
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	3014      	adds	r0, #20
 8007af2:	3114      	adds	r1, #20
 8007af4:	1884      	adds	r4, r0, r2
 8007af6:	4411      	add	r1, r2
 8007af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b00:	4295      	cmp	r5, r2
 8007b02:	d003      	beq.n	8007b0c <__mcmp+0x28>
 8007b04:	d305      	bcc.n	8007b12 <__mcmp+0x2e>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	bd30      	pop	{r4, r5, pc}
 8007b0c:	42a0      	cmp	r0, r4
 8007b0e:	d3f3      	bcc.n	8007af8 <__mcmp+0x14>
 8007b10:	e7fa      	b.n	8007b08 <__mcmp+0x24>
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	e7f7      	b.n	8007b08 <__mcmp+0x24>

08007b18 <__mdiff>:
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	4607      	mov	r7, r0
 8007b20:	4611      	mov	r1, r2
 8007b22:	4628      	mov	r0, r5
 8007b24:	4614      	mov	r4, r2
 8007b26:	f7ff ffdd 	bl	8007ae4 <__mcmp>
 8007b2a:	1e06      	subs	r6, r0, #0
 8007b2c:	d108      	bne.n	8007b40 <__mdiff+0x28>
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff fdc1 	bl	80076b8 <_Balloc>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	bfa4      	itt	ge
 8007b42:	4623      	movge	r3, r4
 8007b44:	462c      	movge	r4, r5
 8007b46:	4638      	mov	r0, r7
 8007b48:	6861      	ldr	r1, [r4, #4]
 8007b4a:	bfa6      	itte	ge
 8007b4c:	461d      	movge	r5, r3
 8007b4e:	2600      	movge	r6, #0
 8007b50:	2601      	movlt	r6, #1
 8007b52:	f7ff fdb1 	bl	80076b8 <_Balloc>
 8007b56:	692b      	ldr	r3, [r5, #16]
 8007b58:	60c6      	str	r6, [r0, #12]
 8007b5a:	6926      	ldr	r6, [r4, #16]
 8007b5c:	f105 0914 	add.w	r9, r5, #20
 8007b60:	f104 0214 	add.w	r2, r4, #20
 8007b64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b6c:	f100 0514 	add.w	r5, r0, #20
 8007b70:	f04f 0e00 	mov.w	lr, #0
 8007b74:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b78:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b7c:	fa1e f18a 	uxtah	r1, lr, sl
 8007b80:	b2a3      	uxth	r3, r4
 8007b82:	1ac9      	subs	r1, r1, r3
 8007b84:	0c23      	lsrs	r3, r4, #16
 8007b86:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007b8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b8e:	b289      	uxth	r1, r1
 8007b90:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b94:	45c8      	cmp	r8, r9
 8007b96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b9a:	4694      	mov	ip, r2
 8007b9c:	f845 3b04 	str.w	r3, [r5], #4
 8007ba0:	d8e8      	bhi.n	8007b74 <__mdiff+0x5c>
 8007ba2:	45bc      	cmp	ip, r7
 8007ba4:	d304      	bcc.n	8007bb0 <__mdiff+0x98>
 8007ba6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007baa:	b183      	cbz	r3, 8007bce <__mdiff+0xb6>
 8007bac:	6106      	str	r6, [r0, #16]
 8007bae:	e7c5      	b.n	8007b3c <__mdiff+0x24>
 8007bb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bb4:	fa1e f381 	uxtah	r3, lr, r1
 8007bb8:	141a      	asrs	r2, r3, #16
 8007bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bc4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007bc8:	f845 3b04 	str.w	r3, [r5], #4
 8007bcc:	e7e9      	b.n	8007ba2 <__mdiff+0x8a>
 8007bce:	3e01      	subs	r6, #1
 8007bd0:	e7e9      	b.n	8007ba6 <__mdiff+0x8e>

08007bd2 <__d2b>:
 8007bd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bd6:	460e      	mov	r6, r1
 8007bd8:	2101      	movs	r1, #1
 8007bda:	ec59 8b10 	vmov	r8, r9, d0
 8007bde:	4615      	mov	r5, r2
 8007be0:	f7ff fd6a 	bl	80076b8 <_Balloc>
 8007be4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007be8:	4607      	mov	r7, r0
 8007bea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bee:	bb34      	cbnz	r4, 8007c3e <__d2b+0x6c>
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	f1b8 0300 	subs.w	r3, r8, #0
 8007bf6:	d027      	beq.n	8007c48 <__d2b+0x76>
 8007bf8:	a802      	add	r0, sp, #8
 8007bfa:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007bfe:	f7ff fe00 	bl	8007802 <__lo0bits>
 8007c02:	9900      	ldr	r1, [sp, #0]
 8007c04:	b1f0      	cbz	r0, 8007c44 <__d2b+0x72>
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	f1c0 0320 	rsb	r3, r0, #32
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	430b      	orrs	r3, r1
 8007c12:	40c2      	lsrs	r2, r0
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	9201      	str	r2, [sp, #4]
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf14      	ite	ne
 8007c20:	2102      	movne	r1, #2
 8007c22:	2101      	moveq	r1, #1
 8007c24:	6139      	str	r1, [r7, #16]
 8007c26:	b1c4      	cbz	r4, 8007c5a <__d2b+0x88>
 8007c28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c2c:	4404      	add	r4, r0
 8007c2e:	6034      	str	r4, [r6, #0]
 8007c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c34:	6028      	str	r0, [r5, #0]
 8007c36:	4638      	mov	r0, r7
 8007c38:	b003      	add	sp, #12
 8007c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c42:	e7d5      	b.n	8007bf0 <__d2b+0x1e>
 8007c44:	6179      	str	r1, [r7, #20]
 8007c46:	e7e7      	b.n	8007c18 <__d2b+0x46>
 8007c48:	a801      	add	r0, sp, #4
 8007c4a:	f7ff fdda 	bl	8007802 <__lo0bits>
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	2101      	movs	r1, #1
 8007c54:	6139      	str	r1, [r7, #16]
 8007c56:	3020      	adds	r0, #32
 8007c58:	e7e5      	b.n	8007c26 <__d2b+0x54>
 8007c5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007c5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c62:	6030      	str	r0, [r6, #0]
 8007c64:	6918      	ldr	r0, [r3, #16]
 8007c66:	f7ff fdad 	bl	80077c4 <__hi0bits>
 8007c6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c6e:	e7e1      	b.n	8007c34 <__d2b+0x62>

08007c70 <_calloc_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	fb02 f401 	mul.w	r4, r2, r1
 8007c76:	4621      	mov	r1, r4
 8007c78:	f000 f856 	bl	8007d28 <_malloc_r>
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	b118      	cbz	r0, 8007c88 <_calloc_r+0x18>
 8007c80:	4622      	mov	r2, r4
 8007c82:	2100      	movs	r1, #0
 8007c84:	f7fd ff3f 	bl	8005b06 <memset>
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}

08007c8c <_free_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4605      	mov	r5, r0
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d045      	beq.n	8007d20 <_free_r+0x94>
 8007c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c98:	1f0c      	subs	r4, r1, #4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfb8      	it	lt
 8007c9e:	18e4      	addlt	r4, r4, r3
 8007ca0:	f000 fa98 	bl	80081d4 <__malloc_lock>
 8007ca4:	4a1f      	ldr	r2, [pc, #124]	; (8007d24 <_free_r+0x98>)
 8007ca6:	6813      	ldr	r3, [r2, #0]
 8007ca8:	4610      	mov	r0, r2
 8007caa:	b933      	cbnz	r3, 8007cba <_free_r+0x2e>
 8007cac:	6063      	str	r3, [r4, #4]
 8007cae:	6014      	str	r4, [r2, #0]
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cb6:	f000 ba8e 	b.w	80081d6 <__malloc_unlock>
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	d90c      	bls.n	8007cd8 <_free_r+0x4c>
 8007cbe:	6821      	ldr	r1, [r4, #0]
 8007cc0:	1862      	adds	r2, r4, r1
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bf04      	itt	eq
 8007cc6:	681a      	ldreq	r2, [r3, #0]
 8007cc8:	685b      	ldreq	r3, [r3, #4]
 8007cca:	6063      	str	r3, [r4, #4]
 8007ccc:	bf04      	itt	eq
 8007cce:	1852      	addeq	r2, r2, r1
 8007cd0:	6022      	streq	r2, [r4, #0]
 8007cd2:	6004      	str	r4, [r0, #0]
 8007cd4:	e7ec      	b.n	8007cb0 <_free_r+0x24>
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	b10a      	cbz	r2, 8007ce0 <_free_r+0x54>
 8007cdc:	42a2      	cmp	r2, r4
 8007cde:	d9fa      	bls.n	8007cd6 <_free_r+0x4a>
 8007ce0:	6819      	ldr	r1, [r3, #0]
 8007ce2:	1858      	adds	r0, r3, r1
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	d10b      	bne.n	8007d00 <_free_r+0x74>
 8007ce8:	6820      	ldr	r0, [r4, #0]
 8007cea:	4401      	add	r1, r0
 8007cec:	1858      	adds	r0, r3, r1
 8007cee:	4282      	cmp	r2, r0
 8007cf0:	6019      	str	r1, [r3, #0]
 8007cf2:	d1dd      	bne.n	8007cb0 <_free_r+0x24>
 8007cf4:	6810      	ldr	r0, [r2, #0]
 8007cf6:	6852      	ldr	r2, [r2, #4]
 8007cf8:	605a      	str	r2, [r3, #4]
 8007cfa:	4401      	add	r1, r0
 8007cfc:	6019      	str	r1, [r3, #0]
 8007cfe:	e7d7      	b.n	8007cb0 <_free_r+0x24>
 8007d00:	d902      	bls.n	8007d08 <_free_r+0x7c>
 8007d02:	230c      	movs	r3, #12
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	e7d3      	b.n	8007cb0 <_free_r+0x24>
 8007d08:	6820      	ldr	r0, [r4, #0]
 8007d0a:	1821      	adds	r1, r4, r0
 8007d0c:	428a      	cmp	r2, r1
 8007d0e:	bf04      	itt	eq
 8007d10:	6811      	ldreq	r1, [r2, #0]
 8007d12:	6852      	ldreq	r2, [r2, #4]
 8007d14:	6062      	str	r2, [r4, #4]
 8007d16:	bf04      	itt	eq
 8007d18:	1809      	addeq	r1, r1, r0
 8007d1a:	6021      	streq	r1, [r4, #0]
 8007d1c:	605c      	str	r4, [r3, #4]
 8007d1e:	e7c7      	b.n	8007cb0 <_free_r+0x24>
 8007d20:	bd38      	pop	{r3, r4, r5, pc}
 8007d22:	bf00      	nop
 8007d24:	20000244 	.word	0x20000244

08007d28 <_malloc_r>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	1ccd      	adds	r5, r1, #3
 8007d2c:	f025 0503 	bic.w	r5, r5, #3
 8007d30:	3508      	adds	r5, #8
 8007d32:	2d0c      	cmp	r5, #12
 8007d34:	bf38      	it	cc
 8007d36:	250c      	movcc	r5, #12
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	db01      	blt.n	8007d42 <_malloc_r+0x1a>
 8007d3e:	42a9      	cmp	r1, r5
 8007d40:	d903      	bls.n	8007d4a <_malloc_r+0x22>
 8007d42:	230c      	movs	r3, #12
 8007d44:	6033      	str	r3, [r6, #0]
 8007d46:	2000      	movs	r0, #0
 8007d48:	bd70      	pop	{r4, r5, r6, pc}
 8007d4a:	f000 fa43 	bl	80081d4 <__malloc_lock>
 8007d4e:	4a21      	ldr	r2, [pc, #132]	; (8007dd4 <_malloc_r+0xac>)
 8007d50:	6814      	ldr	r4, [r2, #0]
 8007d52:	4621      	mov	r1, r4
 8007d54:	b991      	cbnz	r1, 8007d7c <_malloc_r+0x54>
 8007d56:	4c20      	ldr	r4, [pc, #128]	; (8007dd8 <_malloc_r+0xb0>)
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	b91b      	cbnz	r3, 8007d64 <_malloc_r+0x3c>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 f97d 	bl	800805c <_sbrk_r>
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f978 	bl	800805c <_sbrk_r>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d124      	bne.n	8007dba <_malloc_r+0x92>
 8007d70:	230c      	movs	r3, #12
 8007d72:	6033      	str	r3, [r6, #0]
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 fa2e 	bl	80081d6 <__malloc_unlock>
 8007d7a:	e7e4      	b.n	8007d46 <_malloc_r+0x1e>
 8007d7c:	680b      	ldr	r3, [r1, #0]
 8007d7e:	1b5b      	subs	r3, r3, r5
 8007d80:	d418      	bmi.n	8007db4 <_malloc_r+0x8c>
 8007d82:	2b0b      	cmp	r3, #11
 8007d84:	d90f      	bls.n	8007da6 <_malloc_r+0x7e>
 8007d86:	600b      	str	r3, [r1, #0]
 8007d88:	50cd      	str	r5, [r1, r3]
 8007d8a:	18cc      	adds	r4, r1, r3
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f000 fa22 	bl	80081d6 <__malloc_unlock>
 8007d92:	f104 000b 	add.w	r0, r4, #11
 8007d96:	1d23      	adds	r3, r4, #4
 8007d98:	f020 0007 	bic.w	r0, r0, #7
 8007d9c:	1ac3      	subs	r3, r0, r3
 8007d9e:	d0d3      	beq.n	8007d48 <_malloc_r+0x20>
 8007da0:	425a      	negs	r2, r3
 8007da2:	50e2      	str	r2, [r4, r3]
 8007da4:	e7d0      	b.n	8007d48 <_malloc_r+0x20>
 8007da6:	428c      	cmp	r4, r1
 8007da8:	684b      	ldr	r3, [r1, #4]
 8007daa:	bf16      	itet	ne
 8007dac:	6063      	strne	r3, [r4, #4]
 8007dae:	6013      	streq	r3, [r2, #0]
 8007db0:	460c      	movne	r4, r1
 8007db2:	e7eb      	b.n	8007d8c <_malloc_r+0x64>
 8007db4:	460c      	mov	r4, r1
 8007db6:	6849      	ldr	r1, [r1, #4]
 8007db8:	e7cc      	b.n	8007d54 <_malloc_r+0x2c>
 8007dba:	1cc4      	adds	r4, r0, #3
 8007dbc:	f024 0403 	bic.w	r4, r4, #3
 8007dc0:	42a0      	cmp	r0, r4
 8007dc2:	d005      	beq.n	8007dd0 <_malloc_r+0xa8>
 8007dc4:	1a21      	subs	r1, r4, r0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f000 f948 	bl	800805c <_sbrk_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d0cf      	beq.n	8007d70 <_malloc_r+0x48>
 8007dd0:	6025      	str	r5, [r4, #0]
 8007dd2:	e7db      	b.n	8007d8c <_malloc_r+0x64>
 8007dd4:	20000244 	.word	0x20000244
 8007dd8:	20000248 	.word	0x20000248

08007ddc <__sfputc_r>:
 8007ddc:	6893      	ldr	r3, [r2, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	b410      	push	{r4}
 8007de4:	6093      	str	r3, [r2, #8]
 8007de6:	da08      	bge.n	8007dfa <__sfputc_r+0x1e>
 8007de8:	6994      	ldr	r4, [r2, #24]
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	db01      	blt.n	8007df2 <__sfputc_r+0x16>
 8007dee:	290a      	cmp	r1, #10
 8007df0:	d103      	bne.n	8007dfa <__sfputc_r+0x1e>
 8007df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df6:	f7fe bb67 	b.w	80064c8 <__swbuf_r>
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	1c58      	adds	r0, r3, #1
 8007dfe:	6010      	str	r0, [r2, #0]
 8007e00:	7019      	strb	r1, [r3, #0]
 8007e02:	4608      	mov	r0, r1
 8007e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <__sfputs_r>:
 8007e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	4614      	mov	r4, r2
 8007e12:	18d5      	adds	r5, r2, r3
 8007e14:	42ac      	cmp	r4, r5
 8007e16:	d101      	bne.n	8007e1c <__sfputs_r+0x12>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e007      	b.n	8007e2c <__sfputs_r+0x22>
 8007e1c:	463a      	mov	r2, r7
 8007e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffda 	bl	8007ddc <__sfputc_r>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d1f3      	bne.n	8007e14 <__sfputs_r+0xa>
 8007e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e30 <_vfiprintf_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	460c      	mov	r4, r1
 8007e36:	b09d      	sub	sp, #116	; 0x74
 8007e38:	4617      	mov	r7, r2
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	b118      	cbz	r0, 8007e48 <_vfiprintf_r+0x18>
 8007e40:	6983      	ldr	r3, [r0, #24]
 8007e42:	b90b      	cbnz	r3, 8007e48 <_vfiprintf_r+0x18>
 8007e44:	f7ff fb34 	bl	80074b0 <__sinit>
 8007e48:	4b7c      	ldr	r3, [pc, #496]	; (800803c <_vfiprintf_r+0x20c>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d158      	bne.n	8007f00 <_vfiprintf_r+0xd0>
 8007e4e:	6874      	ldr	r4, [r6, #4]
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	0718      	lsls	r0, r3, #28
 8007e54:	d55e      	bpl.n	8007f14 <_vfiprintf_r+0xe4>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d05b      	beq.n	8007f14 <_vfiprintf_r+0xe4>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	2320      	movs	r3, #32
 8007e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e66:	2330      	movs	r3, #48	; 0x30
 8007e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6c:	9503      	str	r5, [sp, #12]
 8007e6e:	f04f 0b01 	mov.w	fp, #1
 8007e72:	46b8      	mov	r8, r7
 8007e74:	4645      	mov	r5, r8
 8007e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e7a:	b10b      	cbz	r3, 8007e80 <_vfiprintf_r+0x50>
 8007e7c:	2b25      	cmp	r3, #37	; 0x25
 8007e7e:	d154      	bne.n	8007f2a <_vfiprintf_r+0xfa>
 8007e80:	ebb8 0a07 	subs.w	sl, r8, r7
 8007e84:	d00b      	beq.n	8007e9e <_vfiprintf_r+0x6e>
 8007e86:	4653      	mov	r3, sl
 8007e88:	463a      	mov	r2, r7
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff ffbc 	bl	8007e0a <__sfputs_r>
 8007e92:	3001      	adds	r0, #1
 8007e94:	f000 80c2 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	4453      	add	r3, sl
 8007e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9e:	f898 3000 	ldrb.w	r3, [r8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80ba 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eba:	931a      	str	r3, [sp, #104]	; 0x68
 8007ebc:	46a8      	mov	r8, r5
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007ec4:	485e      	ldr	r0, [pc, #376]	; (8008040 <_vfiprintf_r+0x210>)
 8007ec6:	f7f8 f98b 	bl	80001e0 <memchr>
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	bb78      	cbnz	r0, 8007f2e <_vfiprintf_r+0xfe>
 8007ece:	06d9      	lsls	r1, r3, #27
 8007ed0:	bf44      	itt	mi
 8007ed2:	2220      	movmi	r2, #32
 8007ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ed8:	071a      	lsls	r2, r3, #28
 8007eda:	bf44      	itt	mi
 8007edc:	222b      	movmi	r2, #43	; 0x2b
 8007ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ee2:	782a      	ldrb	r2, [r5, #0]
 8007ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8007ee6:	d02a      	beq.n	8007f3e <_vfiprintf_r+0x10e>
 8007ee8:	9a07      	ldr	r2, [sp, #28]
 8007eea:	46a8      	mov	r8, r5
 8007eec:	2000      	movs	r0, #0
 8007eee:	250a      	movs	r5, #10
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef6:	3b30      	subs	r3, #48	; 0x30
 8007ef8:	2b09      	cmp	r3, #9
 8007efa:	d969      	bls.n	8007fd0 <_vfiprintf_r+0x1a0>
 8007efc:	b360      	cbz	r0, 8007f58 <_vfiprintf_r+0x128>
 8007efe:	e024      	b.n	8007f4a <_vfiprintf_r+0x11a>
 8007f00:	4b50      	ldr	r3, [pc, #320]	; (8008044 <_vfiprintf_r+0x214>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d101      	bne.n	8007f0a <_vfiprintf_r+0xda>
 8007f06:	68b4      	ldr	r4, [r6, #8]
 8007f08:	e7a2      	b.n	8007e50 <_vfiprintf_r+0x20>
 8007f0a:	4b4f      	ldr	r3, [pc, #316]	; (8008048 <_vfiprintf_r+0x218>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	bf08      	it	eq
 8007f10:	68f4      	ldreq	r4, [r6, #12]
 8007f12:	e79d      	b.n	8007e50 <_vfiprintf_r+0x20>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7fe fb28 	bl	800656c <__swsetup_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d09d      	beq.n	8007e5c <_vfiprintf_r+0x2c>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	b01d      	add	sp, #116	; 0x74
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	46a8      	mov	r8, r5
 8007f2c:	e7a2      	b.n	8007e74 <_vfiprintf_r+0x44>
 8007f2e:	4a44      	ldr	r2, [pc, #272]	; (8008040 <_vfiprintf_r+0x210>)
 8007f30:	1a80      	subs	r0, r0, r2
 8007f32:	fa0b f000 	lsl.w	r0, fp, r0
 8007f36:	4318      	orrs	r0, r3
 8007f38:	9004      	str	r0, [sp, #16]
 8007f3a:	4645      	mov	r5, r8
 8007f3c:	e7be      	b.n	8007ebc <_vfiprintf_r+0x8c>
 8007f3e:	9a03      	ldr	r2, [sp, #12]
 8007f40:	1d11      	adds	r1, r2, #4
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	9103      	str	r1, [sp, #12]
 8007f46:	2a00      	cmp	r2, #0
 8007f48:	db01      	blt.n	8007f4e <_vfiprintf_r+0x11e>
 8007f4a:	9207      	str	r2, [sp, #28]
 8007f4c:	e004      	b.n	8007f58 <_vfiprintf_r+0x128>
 8007f4e:	4252      	negs	r2, r2
 8007f50:	f043 0302 	orr.w	r3, r3, #2
 8007f54:	9207      	str	r2, [sp, #28]
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	f898 3000 	ldrb.w	r3, [r8]
 8007f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5e:	d10e      	bne.n	8007f7e <_vfiprintf_r+0x14e>
 8007f60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007f64:	2b2a      	cmp	r3, #42	; 0x2a
 8007f66:	d138      	bne.n	8007fda <_vfiprintf_r+0x1aa>
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	1d1a      	adds	r2, r3, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	9203      	str	r2, [sp, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfb8      	it	lt
 8007f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f78:	f108 0802 	add.w	r8, r8, #2
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	4d33      	ldr	r5, [pc, #204]	; (800804c <_vfiprintf_r+0x21c>)
 8007f80:	f898 1000 	ldrb.w	r1, [r8]
 8007f84:	2203      	movs	r2, #3
 8007f86:	4628      	mov	r0, r5
 8007f88:	f7f8 f92a 	bl	80001e0 <memchr>
 8007f8c:	b140      	cbz	r0, 8007fa0 <_vfiprintf_r+0x170>
 8007f8e:	2340      	movs	r3, #64	; 0x40
 8007f90:	1b40      	subs	r0, r0, r5
 8007f92:	fa03 f000 	lsl.w	r0, r3, r0
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	4303      	orrs	r3, r0
 8007f9a:	f108 0801 	add.w	r8, r8, #1
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	f898 1000 	ldrb.w	r1, [r8]
 8007fa4:	482a      	ldr	r0, [pc, #168]	; (8008050 <_vfiprintf_r+0x220>)
 8007fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007faa:	2206      	movs	r2, #6
 8007fac:	f108 0701 	add.w	r7, r8, #1
 8007fb0:	f7f8 f916 	bl	80001e0 <memchr>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d037      	beq.n	8008028 <_vfiprintf_r+0x1f8>
 8007fb8:	4b26      	ldr	r3, [pc, #152]	; (8008054 <_vfiprintf_r+0x224>)
 8007fba:	bb1b      	cbnz	r3, 8008004 <_vfiprintf_r+0x1d4>
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	3307      	adds	r3, #7
 8007fc0:	f023 0307 	bic.w	r3, r3, #7
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	444b      	add	r3, r9
 8007fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fce:	e750      	b.n	8007e72 <_vfiprintf_r+0x42>
 8007fd0:	fb05 3202 	mla	r2, r5, r2, r3
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	4688      	mov	r8, r1
 8007fd8:	e78a      	b.n	8007ef0 <_vfiprintf_r+0xc0>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f108 0801 	add.w	r8, r8, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	250a      	movs	r5, #10
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fec:	3a30      	subs	r2, #48	; 0x30
 8007fee:	2a09      	cmp	r2, #9
 8007ff0:	d903      	bls.n	8007ffa <_vfiprintf_r+0x1ca>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0c3      	beq.n	8007f7e <_vfiprintf_r+0x14e>
 8007ff6:	9105      	str	r1, [sp, #20]
 8007ff8:	e7c1      	b.n	8007f7e <_vfiprintf_r+0x14e>
 8007ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8007ffe:	2301      	movs	r3, #1
 8008000:	4680      	mov	r8, r0
 8008002:	e7f0      	b.n	8007fe6 <_vfiprintf_r+0x1b6>
 8008004:	ab03      	add	r3, sp, #12
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4622      	mov	r2, r4
 800800a:	4b13      	ldr	r3, [pc, #76]	; (8008058 <_vfiprintf_r+0x228>)
 800800c:	a904      	add	r1, sp, #16
 800800e:	4630      	mov	r0, r6
 8008010:	f7fd fe16 	bl	8005c40 <_printf_float>
 8008014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008018:	4681      	mov	r9, r0
 800801a:	d1d5      	bne.n	8007fc8 <_vfiprintf_r+0x198>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	f53f af7e 	bmi.w	8007f20 <_vfiprintf_r+0xf0>
 8008024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008026:	e77d      	b.n	8007f24 <_vfiprintf_r+0xf4>
 8008028:	ab03      	add	r3, sp, #12
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4622      	mov	r2, r4
 800802e:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <_vfiprintf_r+0x228>)
 8008030:	a904      	add	r1, sp, #16
 8008032:	4630      	mov	r0, r6
 8008034:	f7fe f8ba 	bl	80061ac <_printf_i>
 8008038:	e7ec      	b.n	8008014 <_vfiprintf_r+0x1e4>
 800803a:	bf00      	nop
 800803c:	08008388 	.word	0x08008388
 8008040:	080084c4 	.word	0x080084c4
 8008044:	080083a8 	.word	0x080083a8
 8008048:	08008368 	.word	0x08008368
 800804c:	080084ca 	.word	0x080084ca
 8008050:	080084ce 	.word	0x080084ce
 8008054:	08005c41 	.word	0x08005c41
 8008058:	08007e0b 	.word	0x08007e0b

0800805c <_sbrk_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4c06      	ldr	r4, [pc, #24]	; (8008078 <_sbrk_r+0x1c>)
 8008060:	2300      	movs	r3, #0
 8008062:	4605      	mov	r5, r0
 8008064:	4608      	mov	r0, r1
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	f7fa f9c4 	bl	80023f4 <_sbrk>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_sbrk_r+0x1a>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	b103      	cbz	r3, 8008076 <_sbrk_r+0x1a>
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	200008a0 	.word	0x200008a0

0800807c <__sread>:
 800807c:	b510      	push	{r4, lr}
 800807e:	460c      	mov	r4, r1
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	f000 f8a8 	bl	80081d8 <_read_r>
 8008088:	2800      	cmp	r0, #0
 800808a:	bfab      	itete	ge
 800808c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800808e:	89a3      	ldrhlt	r3, [r4, #12]
 8008090:	181b      	addge	r3, r3, r0
 8008092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008096:	bfac      	ite	ge
 8008098:	6563      	strge	r3, [r4, #84]	; 0x54
 800809a:	81a3      	strhlt	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__swrite>:
 800809e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	461f      	mov	r7, r3
 80080a4:	898b      	ldrh	r3, [r1, #12]
 80080a6:	05db      	lsls	r3, r3, #23
 80080a8:	4605      	mov	r5, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	4616      	mov	r6, r2
 80080ae:	d505      	bpl.n	80080bc <__swrite+0x1e>
 80080b0:	2302      	movs	r3, #2
 80080b2:	2200      	movs	r2, #0
 80080b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b8:	f000 f868 	bl	800818c <_lseek_r>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	4632      	mov	r2, r6
 80080ca:	463b      	mov	r3, r7
 80080cc:	4628      	mov	r0, r5
 80080ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d2:	f000 b817 	b.w	8008104 <_write_r>

080080d6 <__sseek>:
 80080d6:	b510      	push	{r4, lr}
 80080d8:	460c      	mov	r4, r1
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 f855 	bl	800818c <_lseek_r>
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	bf15      	itete	ne
 80080e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080f2:	81a3      	strheq	r3, [r4, #12]
 80080f4:	bf18      	it	ne
 80080f6:	81a3      	strhne	r3, [r4, #12]
 80080f8:	bd10      	pop	{r4, pc}

080080fa <__sclose>:
 80080fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fe:	f000 b813 	b.w	8008128 <_close_r>
	...

08008104 <_write_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4c07      	ldr	r4, [pc, #28]	; (8008124 <_write_r+0x20>)
 8008108:	4605      	mov	r5, r0
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	2200      	movs	r2, #0
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f9 fef2 	bl	8001efc <_write>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_write_r+0x1e>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	b103      	cbz	r3, 8008122 <_write_r+0x1e>
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	200008a0 	.word	0x200008a0

08008128 <_close_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4c06      	ldr	r4, [pc, #24]	; (8008144 <_close_r+0x1c>)
 800812c:	2300      	movs	r3, #0
 800812e:	4605      	mov	r5, r0
 8008130:	4608      	mov	r0, r1
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	f7fa f92a 	bl	800238c <_close>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_close_r+0x1a>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	b103      	cbz	r3, 8008142 <_close_r+0x1a>
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	200008a0 	.word	0x200008a0

08008148 <_fstat_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4c07      	ldr	r4, [pc, #28]	; (8008168 <_fstat_r+0x20>)
 800814c:	2300      	movs	r3, #0
 800814e:	4605      	mov	r5, r0
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	f7fa f925 	bl	80023a4 <_fstat>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d102      	bne.n	8008164 <_fstat_r+0x1c>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	b103      	cbz	r3, 8008164 <_fstat_r+0x1c>
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	200008a0 	.word	0x200008a0

0800816c <_isatty_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4c06      	ldr	r4, [pc, #24]	; (8008188 <_isatty_r+0x1c>)
 8008170:	2300      	movs	r3, #0
 8008172:	4605      	mov	r5, r0
 8008174:	4608      	mov	r0, r1
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	f7fa f924 	bl	80023c4 <_isatty>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_isatty_r+0x1a>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	b103      	cbz	r3, 8008186 <_isatty_r+0x1a>
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	200008a0 	.word	0x200008a0

0800818c <_lseek_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4c07      	ldr	r4, [pc, #28]	; (80081ac <_lseek_r+0x20>)
 8008190:	4605      	mov	r5, r0
 8008192:	4608      	mov	r0, r1
 8008194:	4611      	mov	r1, r2
 8008196:	2200      	movs	r2, #0
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f7fa f91d 	bl	80023da <_lseek>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_lseek_r+0x1e>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_lseek_r+0x1e>
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	200008a0 	.word	0x200008a0

080081b0 <__ascii_mbtowc>:
 80081b0:	b082      	sub	sp, #8
 80081b2:	b901      	cbnz	r1, 80081b6 <__ascii_mbtowc+0x6>
 80081b4:	a901      	add	r1, sp, #4
 80081b6:	b142      	cbz	r2, 80081ca <__ascii_mbtowc+0x1a>
 80081b8:	b14b      	cbz	r3, 80081ce <__ascii_mbtowc+0x1e>
 80081ba:	7813      	ldrb	r3, [r2, #0]
 80081bc:	600b      	str	r3, [r1, #0]
 80081be:	7812      	ldrb	r2, [r2, #0]
 80081c0:	1c10      	adds	r0, r2, #0
 80081c2:	bf18      	it	ne
 80081c4:	2001      	movne	r0, #1
 80081c6:	b002      	add	sp, #8
 80081c8:	4770      	bx	lr
 80081ca:	4610      	mov	r0, r2
 80081cc:	e7fb      	b.n	80081c6 <__ascii_mbtowc+0x16>
 80081ce:	f06f 0001 	mvn.w	r0, #1
 80081d2:	e7f8      	b.n	80081c6 <__ascii_mbtowc+0x16>

080081d4 <__malloc_lock>:
 80081d4:	4770      	bx	lr

080081d6 <__malloc_unlock>:
 80081d6:	4770      	bx	lr

080081d8 <_read_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4c07      	ldr	r4, [pc, #28]	; (80081f8 <_read_r+0x20>)
 80081dc:	4605      	mov	r5, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	6022      	str	r2, [r4, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7fa f8b3 	bl	8002352 <_read>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_read_r+0x1e>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_read_r+0x1e>
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	200008a0 	.word	0x200008a0

080081fc <__ascii_wctomb>:
 80081fc:	b149      	cbz	r1, 8008212 <__ascii_wctomb+0x16>
 80081fe:	2aff      	cmp	r2, #255	; 0xff
 8008200:	bf85      	ittet	hi
 8008202:	238a      	movhi	r3, #138	; 0x8a
 8008204:	6003      	strhi	r3, [r0, #0]
 8008206:	700a      	strbls	r2, [r1, #0]
 8008208:	f04f 30ff 	movhi.w	r0, #4294967295
 800820c:	bf98      	it	ls
 800820e:	2001      	movls	r0, #1
 8008210:	4770      	bx	lr
 8008212:	4608      	mov	r0, r1
 8008214:	4770      	bx	lr
	...

08008218 <_init>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr

08008224 <_fini>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr
